make[1]: Entering directory '/home/yso0488/projects/BenchmarksBitcodes/build/SPEC2017/benchmarks/mcf_r'
ln -s /home/yso0488/projects/noelle/install/../src/runtime/Parallelizer_utils.cpp
mkdir -p include ; cd include ; ../download.sh "https://github.com/scampanoni/virgil.git" "threadpool" ;
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
clang++ "-DDEBUG" -Iinclude/threadpool/include -std=c++14 -emit-llvm -O3 -c Parallelizer_utils.cpp -o Parallelizer_utils.bc
llvm-link mcf_r.bc Parallelizer_utils.bc -o baseline.bc
noelle-norm baseline.bc -o baseline.bc
opt -load /home/yso0488/projects/noelle/install/lib/libSvf.so -load /home/yso0488/projects/noelle/install/lib/libCudd.so -basicaa -mem2reg -simplifycfg -instcombine -tailcallelim -loop-simplify -lcssa -loop-unswitch -instcombine -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -mergereturn baseline.bc -o baseline.bc
Bitcode is modified by SVF
llvm-dis baseline.bc
./inject_hotprofiler.sh baseline.bc baseline_prof.bc
clang++ -fprofile-instr-generate baseline_prof.bc -lm -lstdc++ -lpthread -o baseline_prof
cd test ; ./../baseline_prof `tail -n 1 ../run_test.sh | awk -Fmcf_r '{print $2}'`; mv default.profraw ../ ;

MCF SPEC CPU version 1.11
Copyright (c) 1998-2000 Zuse Institut Berlin (ZIB)
Copyright (c) 2000-2002 Andreas Loebel & ZIB
Copyright (c) 2003-2005 Andreas Loebel
Copyright (c) 2006-2010 Dres. Loebel, Borndoerfer & Weider GbR (LBW)

nodes                      : 5985
active arcs                : 102404
simplex iterations         : 45986
objective value            : 3180065918
new implicit arcs          : 1000000
active arcs                : 1102404
simplex iterations         : 57610
objective value            : 2060058590
erased arcs                : 998080
new implicit arcs          : 721331
active arcs                : 825655
simplex iterations         : 70075
objective value            : 2060055934
erased arcs                : 719199
new implicit arcs          : 807
active arcs                : 107263
simplex iterations         : 70415
objective value            : 2060055898
erased arcs                : 935
new implicit arcs          : 579
active arcs                : 106907
simplex iterations         : 70428
objective value            : 2060055880
erased arcs                : 578
new implicit arcs          : 34
active arcs                : 106363
simplex iterations         : 70450
objective value            : 2060055880
erased arcs                : 34
new implicit arcs          : 1
active arcs                : 106330
simplex iterations         : 70451
objective value            : 2060055880
erased arcs                : 1
new implicit arcs          : 6
active arcs                : 106335
simplex iterations         : 70460
objective value            : 2060055880
erased arcs                : 10
new implicit arcs          : 8
active arcs                : 106333
simplex iterations         : 70583
objective value            : 2060055879
erased arcs                : 114
new implicit arcs          : 3538
active arcs                : 109757
simplex iterations         : 71002
objective value            : 2060055866
erased arcs                : 3547
checksum                   : 2060055866
done
llvm-profdata merge default.profraw -output=output.prof
noelle-load -pgo-test-profile-file=output.prof -block-freq -pgo-instr-use -HotProfiler baseline.bc -o baseline_hotprofiled.bc
HotProfiler: Start
HotProfiler:   Total instructions = 44324103116
HotProfiler: Exit
llvm-dis baseline_hotprofiled.bc
noelle-meta-pdg-embed baseline_hotprofiled.bc -o baseline_with_metadata.bc
noelle-meta-clean baseline_hotprofiled.bc -o baseline_hotprofiled.bc
noelle-load -load /home/yso0488/projects/noelle/install/lib/CleanMetadata.so -CleanMetadata -clean-pdg-metadata=true baseline_hotprofiled.bc -o baseline_hotprofiled.bc
Clean PDG Metadata
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 baseline_hotprofiled.bc -o baseline_with_metadata.bc
Start at WPAPass
Bitcode is not modified by SVF
End at WPAPass
get PDG through getPDG()
Check if PDG has been embeded as metadata
Construct PDG from Analysis
Embed PDG as Metadata
llvm-dis baseline_with_metadata.bc
noelle-load -parallelization -heuristics -parallelizer -noelle-verbose=3 -dswp-force -noelle-disable-helix -dswp-no-scc-merge baseline_with_metadata.bc -o baseline_parallelized.bc
Start at WPAPass
Bitcode is not modified by SVF
End at WPAPass
HotProfiler: Start
HotProfiler:   Total instructions = 44804047410
HotProfiler: Exit
Parallelization at "runOnModule"
Start at WPAPass
End at WPAPass
HotProfiler: Start
HotProfiler:   Total instructions = 44804047410
HotProfiler: Exit
Parallelizer: Analyzing the module baseline_with_metadata.bc
Parallelizer: Filter out cold code
get PDG through getFunctionPDG(): dual_feasible
get PDG through getPDG()
Check if PDG has been embeded as metadata
Construct PDG from Metadata
Parallelizer:  Loop hotness = 1.548110e-03
get PDG through getFunctionPDG(): flow_cost
Parallelizer:  Loop hotness = 6.678278e-04
Parallelizer:  Loop hotness = 3.526824e-05
Parallelizer:  Loop hotness = 9.066171e-04
SCCDAGNormalizer:  Unknown SCC with external loop carried dependence edge!
From:	  %78 = load i64, i64* %77, align 8, !tbaa !573, !pdg.inst.id !188
To:	  %85 = phi i64 [ %74, %72 ], [ %78, %75 ], !pdg.inst.id !156
RAW (must)
SCCDAGNormalizer:  Unknown SCC with external loop carried dependence edge!
From:	  %74 = load i64, i64* %73, align 8, !tbaa !573, !pdg.inst.id !125
To:	  %85 = phi i64 [ %74, %72 ], [ %78, %75 ], !pdg.inst.id !156
RAW (must)
get PDG through getFunctionPDG(): global_opt
Parallelizer:  Loop hotness = 7.722517e-09
get PDG through getFunctionPDG(): markBaskets
Parallelizer:  Loop hotness = 1.520639e-03
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
SCCDAGNormalizer:  Unknown SCC with external loop carried dependence edge!
From:	  %54 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
To:	  %29 = phi %struct.basket*** [ %10, %.preheader ], [ %54, %53 ], !pdg.inst.id !94
RAW (must)
get PDG through getFunctionPDG(): master
Parallelizer:  Loop hotness = 3.055081e-06
Parallelizer:  Loop hotness = 6.919018e-09
Parallelizer:  Loop hotness = 1.442142e-04
Parallelizer:  Loop hotness = 3.328184e-05
get PDG through getFunctionPDG(): price_out_impl
Parallelizer:  Loop hotness = 2.595136e-03
Parallelizer:  Loop hotness = 4.642438e-09
Parallelizer:  Loop hotness = 1.339165e-09
Parallelizer:  Loop hotness = 1.743137e-01
Parallelizer:  Loop hotness = 1.742121e-01
Parallelizer:  Loop hotness = 5.873090e-02
Parallelizer:  Loop hotness = 7.273401e-03
Parallelizer:  Loop hotness = 2.967033e-03
Parallelizer:  Loop hotness = 1.562359e-10
Parallelizer:  Loop hotness = 1.068631e-05
Parallelizer:  Loop hotness = 6.549996e-04
Parallelizer:  Loop hotness = 2.455135e-09
Parallelizer:  Loop hotness = 5.334340e-09
Parallelizer:  Loop hotness = 4.820993e-09
Parallelizer:  Loop hotness = 9.694161e-04
Parallelizer:  Loop hotness = 4.217789e-06
Parallelizer:  Loop hotness = 1.202281e-04
Parallelizer:  Loop hotness = 4.483463e-04
get PDG through getFunctionPDG(): primal_bea_mpp
Parallelizer:  Loop hotness = 4.688939e-03
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.139927e-01
Parallelizer:  Loop hotness = 2.139316e-01
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 1.392678e-05
get PDG through getFunctionPDG(): primal_feasible
Parallelizer:  Loop hotness = 5.343519e-05
get PDG through getFunctionPDG(): primal_iminus
Parallelizer:  Loop hotness = 9.709528e-04
get PDG through getFunctionPDG(): primal_start_artificial
Parallelizer:  Loop hotness = 2.171317e-05
Parallelizer:  Loop hotness = 9.885848e-06
get PDG through getFunctionPDG(): primal_update_flow
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
get PDG through getFunctionPDG(): read_min
Parallelizer:  Loop hotness = 2.678329e-10
Parallelizer:  Loop hotness = 8.481377e-10
Parallelizer:  Loop hotness = 7.588600e-10
Parallelizer:  Loop hotness = 1.843427e-05
Parallelizer:  Loop hotness = 9.046968e-05
Parallelizer:  Loop hotness = 2.404448e-06
get PDG through getFunctionPDG(): refreshPositions
Parallelizer:  Loop hotness = 1.202222e-05
Parallelizer:  Loop hotness = 4.342592e-05
get PDG through getFunctionPDG(): refresh_neighbour_lists
Parallelizer:  Loop hotness = 2.351388e-05
Parallelizer:  Loop hotness = 7.518242e-04
get PDG through getFunctionPDG(): resize_prob
Parallelizer:  Loop hotness = 1.014998e-05
get PDG through getFunctionPDG(): spec_qsort
Parallelizer:  Loop hotness = 2.540796e-01
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.185283e-01
SCCDAGNormalizer:  Unknown SCC with external loop carried dependence edge!
From:	  %.lcssa10 = phi i32 [ %1065, %.preheader64 ], !pdg.inst.id !3434
To:	  %.ph = phi i32 [ %.lcssa18, %..loopexit65.loopexit_crit_edge ], [ %.lcssa10, %.loopexit65.loopexit.loopexit ], !pdg.inst.id !3469
RAW (must)
SCCDAGNormalizer:  Unknown SCC with external loop carried dependence edge!
From:	  %.lcssa1 = phi i32 [ %1084, %.preheader68 ], !pdg.inst.id !3524
To:	  %.ph21 = phi i32 [ %.lcssa9, %..loopexit65.loopexit20_crit_edge ], [ %.lcssa1, %.loopexit65.loopexit20.loopexit ], !pdg.inst.id !4016
RAW (must)
Parallelizer:  Loop hotness = 2.053386e-09
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.901524e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.901524e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 8.704571e-10
Parallelizer:  Loop hotness = 6.084262e-02
Parallelizer:  Loop hotness = 2.120344e-09
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.901524e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.901524e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 8.704571e-10
Parallelizer:  Loop hotness = 5.996254e-02
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 3.078056e-03
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 1.664778e-02
Parallelizer:  Loop hotness = 2.901524e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.901524e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 9.989829e-03
Parallelizer:  Loop hotness = 2.615336e-02
Parallelizer:  Loop hotness = 1.160609e-09
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.901524e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 2.901524e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 5.803047e-10
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 1.127521e-02
get PDG through getFunctionPDG(): suspend_impl
Parallelizer:  Loop hotness = 1.897150e-09
Parallelizer:  Loop hotness = 5.334340e-09
Parallelizer:  Loop hotness = 4.530841e-09
Parallelizer:  Loop hotness = 1.445353e-03
Parallelizer:  Loop hotness = 3.861258e-09
Parallelizer:  Loop hotness = 5.356659e-09
Parallelizer:  Loop hotness = 4.508521e-09
Parallelizer:  Loop hotness = 1.078168e-04
Parallelizer:  Loop hotness = 8.662453e-04
get PDG through getFunctionPDG(): switch_arcs
Parallelizer:  Loop hotness = 3.183112e-04
Parallelizer:  Loop hotness = 3.183104e-04
Parallelizer:  Loop hotness = 1.562359e-09
get PDG through getFunctionPDG(): update_tree
Parallelizer:  Loop hotness = 2.236644e-03
Parallelizer:  Loop hotness = 8.130519e-04
Parallelizer:  Loop hotness = 1.274251e-04
Parallelizer:  Loop hotness = 1.191637e-04
Parallelizer:  Loop hotness = 1.695054e-04
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  Loop hotness = 0.000000e+00
Parallelizer:  There are 135 loops to parallelize
Parallelizer:    Function: "dual_feasible"
Parallelizer:    Loop: "  %11 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 1, !pdg.inst.id !69"
Parallelizer:      Hotness = 1.548110e-01 %
Parallelizer:    Function: "flow_cost"
Parallelizer:    Loop: "  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92"
Parallelizer:      Hotness = 6.678278e-02 %
Parallelizer:    Function: "flow_cost"
Parallelizer:    Loop: "  %46 = getelementptr inbounds %struct.node, %struct.node* %39, i64 %45, i32 10, !pdg.inst.id !174"
Parallelizer:      Hotness = 3.526824e-03 %
Parallelizer:    Function: "flow_cost"
Parallelizer:    Loop: "  %57 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %54, i32 7, !pdg.inst.id !144"
Parallelizer:      Hotness = 9.066171e-02 %
Parallelizer:    Function: "global_opt"
Parallelizer:    Loop: "  %3 = icmp eq i64 %2, 0, !pdg.inst.id !34"
Parallelizer:      Hotness = 7.722517e-07 %
Parallelizer:    Function: "markBaskets"
Parallelizer:    Loop: "  %59 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !88"
Parallelizer:      Hotness = 1.520639e-01 %
Parallelizer:    Function: "markBaskets"
Parallelizer:    Loop: "  %13 = load %struct.basket**, %struct.basket*** %10, align 8, !tbaa !724, !pdg.inst.id !96"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "markBaskets"
Parallelizer:    Loop: "  %32 = getelementptr inbounds %struct.basket**, %struct.basket*** %29, i64 %31, !pdg.inst.id !139"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "master"
Parallelizer:    Loop: "  %41 = add <2 x i64> %40, <i64 2, i64 2>, !pdg.inst.id !225"
Parallelizer:      Hotness = 3.055081e-04 %
Parallelizer:    Function: "master"
Parallelizer:    Loop: "  %75 = getelementptr inbounds %struct.basket, %struct.basket* %31, i64 %74, !pdg.inst.id !194"
Parallelizer:      Hotness = 6.919018e-07 %
Parallelizer:    Function: "master"
Parallelizer:    Loop: "  %81 = load i64, i64* %18, align 8, !tbaa !2360, !pdg.inst.id !144"
Parallelizer:      Hotness = 1.442142e-02 %
Parallelizer:    Function: "master"
Parallelizer:    Loop: "  %90 = load %struct.basket**, %struct.basket*** @opt_basket, align 8, !tbaa !2359, !pdg.inst.id !325"
Parallelizer:      Hotness = 3.328184e-03 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %71 = add <2 x i64> %69, <i64 2, i64 2>, !pdg.inst.id !520"
Parallelizer:      Hotness = 2.595136e-01 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %132 = getelementptr inbounds %struct.arc, %struct.arc* %52, i64 %131, !pdg.inst.id !448"
Parallelizer:      Hotness = 4.642438e-07 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %141 = getelementptr inbounds %struct.arc, %struct.arc* %140, i64 1, i32 4, !pdg.inst.id !674"
Parallelizer:      Hotness = 1.339165e-07 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %175 = icmp ne i16 %169, 0, !pdg.inst.id !750"
Parallelizer:      Hotness = 1.743137e+01 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  br label %240, !pdg.inst.id !27748"
Parallelizer:      Hotness = 1.742121e+01 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %243 = getelementptr inbounds %struct.list_elem, %struct.list_elem* %241, i64 0, i32 0, !pdg.inst.id !971"
Parallelizer:      Hotness = 5.873090e+00 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %325 = add nsw i64 %323, -1, !pdg.inst.id !1172"
Parallelizer:      Hotness = 7.273401e-01 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %282 = sdiv i64 %281, 2, !pdg.inst.id !1084"
Parallelizer:      Hotness = 2.967033e-01 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %407 = tail call i64 @switch_arcs(%struct.network* undef, i64* %5, %struct.arc** %7, %struct.arc* %52, i32 0, i64 %49, i64 %50, i64 1), !pdg.inst.id !148"
Parallelizer:      Hotness = 1.562359e-08 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %411 = getelementptr inbounds %struct.list_elem, %struct.list_elem* %410, i64 0, i32 1, !pdg.inst.id !1368"
Parallelizer:      Hotness = 1.068631e-03 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %504 = load %struct.arc*, %struct.arc** %501, align 8, !tbaa !28568, !pdg.inst.id !1617"
Parallelizer:      Hotness = 6.549996e-02 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %464 = add nsw <2 x i64> %459, <i64 -4, i64 -4>, !pdg.inst.id !1501"
Parallelizer:      Hotness = 2.455135e-07 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %484 = add nsw <2 x i64> %479, <i64 -1, i64 -1>, !pdg.inst.id !1565"
Parallelizer:      Hotness = 5.334340e-07 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %517 = add nsw i64 %516, %430, !pdg.inst.id !1428"
Parallelizer:      Hotness = 4.820993e-07 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %529 = getelementptr inbounds %struct.arc, %struct.arc* %528, i64 0, i32 7, !pdg.inst.id !1686"
Parallelizer:      Hotness = 9.694161e-02 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %545 = getelementptr inbounds %struct.arc, %struct.arc* %544, i64 0, i32 7, !pdg.inst.id !1733"
Parallelizer:      Hotness = 4.217789e-04 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %588 = load %struct.node*, %struct.node** %585, align 8, !tbaa !28649, !pdg.inst.id !1816"
Parallelizer:      Hotness = 1.202281e-02 %
Parallelizer:    Function: "price_out_impl"
Parallelizer:    Loop: "  %632 = getelementptr inbounds %struct.arc, %struct.arc* %630, i64 %631, !pdg.inst.id !227"
Parallelizer:      Hotness = 4.483463e-02 %
Parallelizer:    Function: "primal_bea_mpp"
Parallelizer:    Loop: "  %16 = load i64, i64* %12, align 8, !tbaa !4334, !pdg.inst.id !150"
Parallelizer:      Hotness = 4.688939e-01 %
Parallelizer:    Function: "primal_bea_mpp"
Parallelizer:    Loop: "  %240 = getelementptr inbounds %struct.arc, %struct.arc* %239, i64 %7, !pdg.inst.id !105"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "primal_bea_mpp"
Parallelizer:    Loop: "  %248 = getelementptr inbounds %struct.arc, %struct.arc* %247, i64 0, i32 4, !pdg.inst.id !698"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "primal_bea_mpp"
Parallelizer:    Loop: "  %83 = getelementptr inbounds %struct.arc, %struct.arc* %82, i64 %7, !pdg.inst.id !103"
Parallelizer:      Hotness = 2.139927e+01 %
Parallelizer:    Function: "primal_bea_mpp"
Parallelizer:    Loop: "  %191 = getelementptr inbounds %struct.arc, %struct.arc* %190, i64 0, i32 4, !pdg.inst.id !571"
Parallelizer:      Hotness = 2.139316e+01 %
Parallelizer:    Function: "primal_bea_mpp"
Parallelizer:    Loop: "  %103 = getelementptr inbounds i64, i64* %3, i64 %97, !pdg.inst.id !63"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "primal_bea_mpp"
Parallelizer:    Loop: "  %184 = getelementptr inbounds i64, i64* %3, i64 %183, !pdg.inst.id !65"
Parallelizer:      Hotness = 1.392678e-03 %
Parallelizer:    Function: "primal_feasible"
Parallelizer:    Loop: "  %17 = getelementptr inbounds %struct.node, %struct.node* %16, i64 1, i32 6, !pdg.inst.id !82"
Parallelizer:      Hotness = 5.343519e-03 %
Parallelizer:    Function: "primal_iminus"
Parallelizer:    Loop: "  %10 = getelementptr inbounds %struct.node, %struct.node* %8, i64 0, i32 11, !pdg.inst.id !97"
Parallelizer:      Hotness = 9.709528e-02 %
Parallelizer:    Function: "primal_start_artificial"
Parallelizer:    Loop: "  %30 = getelementptr inbounds %struct.arc, %struct.arc* %18, i64 %28, i32 4, !pdg.inst.id !121"
Parallelizer:      Hotness = 2.171317e-03 %
Parallelizer:    Function: "primal_start_artificial"
Parallelizer:    Loop: "  %51 = getelementptr inbounds %struct.arc, %struct.arc* %48, i64 %50, !pdg.inst.id !191"
Parallelizer:      Hotness = 9.885848e-04 %
Parallelizer:    Function: "primal_update_flow"
Parallelizer:    Loop: "  %7 = getelementptr inbounds %struct.node, %struct.node* %6, i64 0, i32 1, !pdg.inst.id !62"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "primal_update_flow"
Parallelizer:    Loop: "  %16 = getelementptr inbounds %struct.node, %struct.node* %15, i64 0, i32 1, !pdg.inst.id !83"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "read_min"
Parallelizer:    Loop: "  %65 = add nsw <2 x i64> %60, <i64 -4, i64 -4>, !pdg.inst.id !329"
Parallelizer:      Hotness = 2.678329e-08 %
Parallelizer:    Function: "read_min"
Parallelizer:    Loop: "  %85 = add nsw <2 x i64> %80, <i64 -1, i64 -1>, !pdg.inst.id !393"
Parallelizer:      Hotness = 8.481377e-08 %
Parallelizer:    Function: "read_min"
Parallelizer:    Loop: "  %108 = add nsw i64 %107, %33, !pdg.inst.id !262"
Parallelizer:      Hotness = 7.588600e-08 %
Parallelizer:    Function: "read_min"
Parallelizer:    Loop: "  %174 = call i8* @fgets_unlocked(i8* nonnull %6, i32 200, %struct._IO_FILE* nonnull %12), !pdg.inst.id !135"
Parallelizer:      Hotness = 1.843427e-03 %
Parallelizer:    Function: "read_min"
Parallelizer:    Loop: "  %287 = call i8* @fgets_unlocked(i8* nonnull %6, i32 200, %struct._IO_FILE* nonnull %12), !pdg.inst.id !133"
Parallelizer:      Hotness = 9.046968e-03 %
Parallelizer:    Function: "read_min"
Parallelizer:    Loop: "  %330 = load %struct.arc*, %struct.arc** %143, align 8, !tbaa !13136, !pdg.inst.id !535"
Parallelizer:      Hotness = 2.404448e-04 %
Parallelizer:    Function: "refreshPositions"
Parallelizer:    Loop: "  %13 = load %struct.node*, %struct.node** %10, align 8, !tbaa !800, !pdg.inst.id !120"
Parallelizer:      Hotness = 1.202222e-03 %
Parallelizer:    Function: "refreshPositions"
Parallelizer:    Loop: "  %58 = getelementptr inbounds %struct.arc, %struct.arc* %56, i64 %57, !pdg.inst.id !86"
Parallelizer:      Hotness = 4.342592e-03 %
Parallelizer:    Function: "refresh_neighbour_lists"
Parallelizer:    Loop: "  %9 = getelementptr inbounds %struct.node, %struct.node* %8, i64 0, i32 7, !pdg.inst.id !68"
Parallelizer:      Hotness = 2.351388e-03 %
Parallelizer:    Function: "refresh_neighbour_lists"
Parallelizer:    Loop: "  %39 = getelementptr inbounds %struct.arc, %struct.arc* %38, i64 %36, !pdg.inst.id !150"
Parallelizer:      Hotness = 7.518242e-02 %
Parallelizer:    Function: "resize_prob"
Parallelizer:    Loop: "  %38 = getelementptr inbounds %struct.node, %struct.node* %37, i64 1, i32 6, !pdg.inst.id !141"
Parallelizer:      Hotness = 1.014998e-03 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %697 = lshr i64 %696, 1, !pdg.inst.id !2513"
Parallelizer:      Hotness = 2.540796e+01 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %902 = getelementptr i8, i8* %695, i64 %900, !pdg.inst.id !2444"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1044 = load i8, i8* %1042, align 1, !tbaa !461618, !pdg.inst.id !3315"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %971 = getelementptr i32, i32* %958, i64 %969, !pdg.inst.id !3116"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1034 = load i32, i32* %1032, align 4, !tbaa !461608, !pdg.inst.id !3292"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %816 = getelementptr i64, i64* %804, i64 %814, !pdg.inst.id !2768"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %879 = load i64, i64* %877, align 8, !tbaa !461603, !pdg.inst.id !2939"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1061 = icmp ugt i8* %1059, %1058, !pdg.inst.id !3390"
Parallelizer:      Hotness = 2.185283e+01 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1085 = mul i64 %1081, %2, !pdg.inst.id !269"
Parallelizer:      Hotness = 2.053386e-07 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1206 = getelementptr i8, i8* %1082, i64 %1204, !pdg.inst.id !160"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1347 = load i8, i8* %1345, align 1, !tbaa !461618, !pdg.inst.id !3985"
Parallelizer:      Hotness = 2.901524e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1274 = getelementptr i32, i32* %1262, i64 %1272, !pdg.inst.id !3787"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1337 = load i32, i32* %1335, align 4, !tbaa !461608, !pdg.inst.id !3962"
Parallelizer:      Hotness = 2.901524e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1121 = getelementptr i64, i64* %1110, i64 %1119, !pdg.inst.id !3574"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1184 = load i64, i64* %1182, align 8, !tbaa !461603, !pdg.inst.id !118"
Parallelizer:      Hotness = 8.704571e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1066 = tail call i32 %3(i8* %1064, i8* %695) #39, !prof !461690, !pdg.inst.id !355"
Parallelizer:      Hotness = 6.084262e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1387 = mul i64 %1383, %2, !pdg.inst.id !263"
Parallelizer:      Hotness = 2.120344e-07 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1511 = getelementptr i8, i8* %1384, i64 %1509, !pdg.inst.id !4146"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1652 = load i8, i8* %1650, align 1, !tbaa !461618, !pdg.inst.id !4789"
Parallelizer:      Hotness = 2.901524e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1579 = getelementptr i32, i32* %1567, i64 %1577, !pdg.inst.id !4591"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1642 = load i32, i32* %1640, align 4, !tbaa !461608, !pdg.inst.id !4766"
Parallelizer:      Hotness = 2.901524e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1426 = getelementptr i64, i64* %1415, i64 %1424, !pdg.inst.id !4245"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1489 = load i64, i64* %1487, align 8, !tbaa !461603, !pdg.inst.id !4415"
Parallelizer:      Hotness = 8.704571e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1368 = tail call i32 %3(i8* %1365, i8* %695) #39, !prof !461717, !pdg.inst.id !353"
Parallelizer:      Hotness = 5.996254e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1779 = getelementptr i8, i8* %1361, i64 %1777, !pdg.inst.id !4054"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1921 = load i8, i8* %1919, align 1, !tbaa !461618, !pdg.inst.id !5436"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1848 = getelementptr i32, i32* %1835, i64 %1846, !pdg.inst.id !5237"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1911 = load i32, i32* %1909, align 4, !tbaa !461608, !pdg.inst.id !5413"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1693 = getelementptr i64, i64* %1681, i64 %1691, !pdg.inst.id !4889"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %1756 = load i64, i64* %1754, align 8, !tbaa !461603, !pdg.inst.id !5060"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2495 = getelementptr i8, i8* %695, i64 %2493, !pdg.inst.id !2435"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2663 = load i8, i8* %2661, align 1, !tbaa !461618, !pdg.inst.id !7365"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2588 = getelementptr i32, i32* %2554, i64 %2586, !pdg.inst.id !7112"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2653 = load i32, i32* %2651, align 4, !tbaa !461608, !pdg.inst.id !7342"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2382 = getelementptr i64, i64* %2349, i64 %2380, !pdg.inst.id !6635"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2447 = load i64, i64* %2445, align 8, !tbaa !461603, !pdg.inst.id !6859"
Parallelizer:      Hotness = 3.078056e-01 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2834 = getelementptr i8, i8* %1929, i64 %2832, !pdg.inst.id !5485"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %3003 = load i8, i8* %3001, align 1, !tbaa !461618, !pdg.inst.id !8212"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2928 = getelementptr i32, i32* %2893, i64 %2926, !pdg.inst.id !7958"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2993 = load i32, i32* %2991, align 4, !tbaa !461608, !pdg.inst.id !8189"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2720 = getelementptr i64, i64* %2686, i64 %2718, !pdg.inst.id !7479"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2785 = load i64, i64* %2783, align 8, !tbaa !461603, !pdg.inst.id !7704"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2018 = mul i64 %2016, %2, !pdg.inst.id !231"
Parallelizer:      Hotness = 1.664778e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2055 = mul i64 %2053, %2, !pdg.inst.id !213"
Parallelizer:      Hotness = 2.901524e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2182 = getelementptr i8, i8* %2054, i64 %2180, !pdg.inst.id !5891"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2322 = load i8, i8* %2320, align 1, !tbaa !461618, !pdg.inst.id !6518"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2249 = getelementptr i32, i32* %2238, i64 %2247, !pdg.inst.id !6321"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2312 = load i32, i32* %2310, align 4, !tbaa !461608, !pdg.inst.id !6495"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2098 = getelementptr i64, i64* %2088, i64 %2096, !pdg.inst.id !5977"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2161 = load i64, i64* %2159, align 8, !tbaa !461603, !pdg.inst.id !6146"
Parallelizer:      Hotness = 2.901524e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2044 = getelementptr inbounds i8, i8* %2043, i64 %5, !pdg.inst.id !416"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %2033 = getelementptr inbounds i8, i8* %2032, i64 %5, !pdg.inst.id !414"
Parallelizer:      Hotness = 9.989829e-01 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %374 = mul i64 %372, %2, !pdg.inst.id !247"
Parallelizer:      Hotness = 2.615336e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %411 = mul i64 %409, %2, !pdg.inst.id !241"
Parallelizer:      Hotness = 1.160609e-07 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %538 = getelementptr i8, i8* %410, i64 %536, !pdg.inst.id !1735"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %678 = load i8, i8* %676, align 1, !tbaa !461618, !pdg.inst.id !2362"
Parallelizer:      Hotness = 2.901524e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %605 = getelementptr i32, i32* %594, i64 %603, !pdg.inst.id !2165"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %668 = load i32, i32* %666, align 4, !tbaa !461608, !pdg.inst.id !2339"
Parallelizer:      Hotness = 2.901524e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %454 = getelementptr i64, i64* %444, i64 %452, !pdg.inst.id !1821"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %517 = load i64, i64* %515, align 8, !tbaa !461603, !pdg.inst.id !1990"
Parallelizer:      Hotness = 5.803047e-08 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %400 = getelementptr inbounds i8, i8* %399, i64 %5, !pdg.inst.id !410"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "spec_qsort"
Parallelizer:    Loop: "  %389 = getelementptr inbounds i8, i8* %388, i64 %5, !pdg.inst.id !408"
Parallelizer:      Hotness = 1.127521e+00 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %39 = add nsw <2 x i64> %34, <i64 -4, i64 -4>, !pdg.inst.id !675"
Parallelizer:      Hotness = 1.897150e-07 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %59 = add nsw <2 x i64> %54, <i64 -1, i64 -1>, !pdg.inst.id !331"
Parallelizer:      Hotness = 5.334340e-07 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %82 = add nsw i64 %81, %9, !pdg.inst.id !201"
Parallelizer:      Hotness = 4.530841e-07 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %100 = load %struct.arc*, %struct.arc** %95, align 8, !tbaa !2773, !pdg.inst.id !748"
Parallelizer:      Hotness = 1.445353e-01 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %185 = add nsw <2 x i64> %180, <i64 -4, i64 -4>, !pdg.inst.id !604"
Parallelizer:      Hotness = 3.861258e-07 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %205 = add nsw <2 x i64> %200, <i64 -1, i64 -1>, !pdg.inst.id !719"
Parallelizer:      Hotness = 5.356659e-07 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %228 = add nsw i64 %227, %154, !pdg.inst.id !220"
Parallelizer:      Hotness = 4.508521e-07 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %243 = load %struct.node*, %struct.node** %240, align 8, !tbaa !2799, !pdg.inst.id !241"
Parallelizer:      Hotness = 1.078168e-02 %
Parallelizer:    Function: "suspend_impl"
Parallelizer:    Loop: "  %288 = getelementptr inbounds %struct.arc, %struct.arc* %286, i64 %287, !pdg.inst.id !106"
Parallelizer:      Hotness = 8.662453e-02 %
Parallelizer:    Function: "switch_arcs"
Parallelizer:    Loop: "  %27 = getelementptr inbounds i64, i64* %1, i64 %25, !pdg.inst.id !42"
Parallelizer:      Hotness = 3.183112e-02 %
Parallelizer:    Function: "switch_arcs"
Parallelizer:    Loop: "  %37 = load %struct.arc*, %struct.arc** %33, align 8, !tbaa !1160, !pdg.inst.id !164"
Parallelizer:      Hotness = 3.183104e-02 %
Parallelizer:    Function: "switch_arcs"
Parallelizer:    Loop: "  %76 = add nsw i64 %74, -1, !pdg.inst.id !276"
Parallelizer:      Hotness = 1.562359e-07 %
Parallelizer:    Function: "update_tree"
Parallelizer:    Loop: "  %32 = getelementptr inbounds %struct.node, %struct.node* %31, i64 0, i32 0, !pdg.inst.id !163"
Parallelizer:      Hotness = 2.236644e-01 %
Parallelizer:    Function: "update_tree"
Parallelizer:    Loop: "  %42 = getelementptr inbounds %struct.node, %struct.node* %41, i64 0, i32 4, !pdg.inst.id !186"
Parallelizer:      Hotness = 8.130519e-02 %
Parallelizer:    Function: "update_tree"
Parallelizer:    Loop: "  %61 = getelementptr inbounds %struct.node, %struct.node* %55, i64 0, i32 3, !pdg.inst.id !240"
Parallelizer:      Hotness = 1.274251e-02 %
Parallelizer:    Function: "update_tree"
Parallelizer:    Loop: "  %147 = getelementptr inbounds %struct.node, %struct.node* %146, i64 0, i32 11, !pdg.inst.id !420"
Parallelizer:      Hotness = 1.191637e-02 %
Parallelizer:    Function: "update_tree"
Parallelizer:    Loop: "  %154 = getelementptr inbounds %struct.node, %struct.node* %153, i64 0, i32 11, !pdg.inst.id !436"
Parallelizer:      Hotness = 1.695054e-02 %
Parallelizer:    Function: "update_tree"
Parallelizer:    Loop: "  %114 = getelementptr inbounds %struct.node, %struct.node* %113, i64 0, i32 11, !pdg.inst.id !355"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:    Function: "update_tree"
Parallelizer:    Loop: "  %130 = getelementptr inbounds %struct.node, %struct.node* %129, i64 0, i32 1, !pdg.inst.id !387"
Parallelizer:      Hotness = 0.000000e+00 %
Parallelizer:  Parallelize all 135 loops, one at a time
Parallelizer: Start
Parallelizer:  Function = "dual_feasible"
Parallelizer:  Loop 0 = "  %11 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 1, !pdg.inst.id !69"
Parallelizer:  Nesting level = 1
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 1
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %22 = add nsw i64 %21, %17, !pdg.inst.id !82
DSWP:       %21 = load i64, i64* %20, align 8, !tbaa !282, !pdg.inst.id !88
DSWP:       %20 = getelementptr inbounds %struct.node, %struct.node* %19, i64 0, i32 0, !pdg.inst.id !86
DSWP:       %19 = load %struct.node*, %struct.node** %18, align 8, !tbaa !284, !pdg.inst.id !84
DSWP:       %10 = phi %struct.arc* [ %5, %7 ], [ %34, %33 ], !pdg.inst.id !52
DSWP:       %18 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 3, !pdg.inst.id !65
DSWP:       %17 = sub nsw i64 %12, %16, !pdg.inst.id !73
DSWP:       %27 = load i64, i64* %8, align 8, !tbaa !287, !pdg.inst.id !57
DSWP:       %25 = sext i16 %24 to i32, !pdg.inst.id !97
DSWP:       %16 = load i64, i64* %15, align 8, !tbaa !282, !pdg.inst.id !79
DSWP:       %35 = icmp ult %struct.arc* %34, %3, !pdg.inst.id !48
DSWP:       %24 = load i16, i16* %23, align 8, !tbaa !285, !pdg.inst.id !95
DSWP:       br i1 %29, label %.loopexit1, label %33, !prof !288, !pdg.inst.id !104
DSWP:       %29 = icmp slt i64 %22, %28, !pdg.inst.id !91
DSWP:       %13 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 2, !pdg.inst.id !67
DSWP:       %11 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 1, !pdg.inst.id !69
DSWP:       %34 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 1, !pdg.inst.id !61
DSWP:       %28 = sub nsw i64 0, %27, !pdg.inst.id !101
DSWP:       br label %33, !pdg.inst.id !233
DSWP:       br i1 %32, label %._crit_edge3, label %33, !prof !289, !pdg.inst.id !107
DSWP:       %32 = icmp sgt i64 %22, %31, !pdg.inst.id !93
DSWP:       br label %26, !pdg.inst.id !231
DSWP:       %23 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 4, !pdg.inst.id !63
DSWP:       %31 = load i64, i64* %8, align 8, !tbaa !287, !pdg.inst.id !59
DSWP:       br label %26, !pdg.inst.id !229
DSWP:       br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:       switch i32 %25, label %._crit_edge [
    i32 0, label %._crit_edge1
    i32 1, label %._crit_edge2
    i32 2, label %30
  ], !prof !286, !pdg.inst.id !99
DSWP:       %15 = getelementptr inbounds %struct.node, %struct.node* %14, i64 0, i32 0, !pdg.inst.id !77
DSWP:       %14 = load %struct.node*, %struct.node** %13, align 8, !tbaa !281, !pdg.inst.id !75
DSWP:       %12 = load i64, i64* %11, align 8, !tbaa !277, !pdg.inst.id !71
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  Final number of partitions: 1
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %22 = add nsw i64 %21, %17, !pdg.inst.id !82
DSWP:       %21 = load i64, i64* %20, align 8, !tbaa !282, !pdg.inst.id !88
DSWP:       %20 = getelementptr inbounds %struct.node, %struct.node* %19, i64 0, i32 0, !pdg.inst.id !86
DSWP:       %19 = load %struct.node*, %struct.node** %18, align 8, !tbaa !284, !pdg.inst.id !84
DSWP:       %10 = phi %struct.arc* [ %5, %7 ], [ %34, %33 ], !pdg.inst.id !52
DSWP:       %18 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 3, !pdg.inst.id !65
DSWP:       %17 = sub nsw i64 %12, %16, !pdg.inst.id !73
DSWP:       %27 = load i64, i64* %8, align 8, !tbaa !287, !pdg.inst.id !57
DSWP:       %25 = sext i16 %24 to i32, !pdg.inst.id !97
DSWP:       %16 = load i64, i64* %15, align 8, !tbaa !282, !pdg.inst.id !79
DSWP:       %35 = icmp ult %struct.arc* %34, %3, !pdg.inst.id !48
DSWP:       %24 = load i16, i16* %23, align 8, !tbaa !285, !pdg.inst.id !95
DSWP:       br i1 %29, label %.loopexit1, label %33, !prof !288, !pdg.inst.id !104
DSWP:       %29 = icmp slt i64 %22, %28, !pdg.inst.id !91
DSWP:       %13 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 2, !pdg.inst.id !67
DSWP:       %11 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 1, !pdg.inst.id !69
DSWP:       %34 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 1, !pdg.inst.id !61
DSWP:       %28 = sub nsw i64 0, %27, !pdg.inst.id !101
DSWP:       br label %33, !pdg.inst.id !233
DSWP:       br i1 %32, label %._crit_edge3, label %33, !prof !289, !pdg.inst.id !107
DSWP:       %32 = icmp sgt i64 %22, %31, !pdg.inst.id !93
DSWP:       br label %26, !pdg.inst.id !231
DSWP:       %23 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 4, !pdg.inst.id !63
DSWP:       %31 = load i64, i64* %8, align 8, !tbaa !287, !pdg.inst.id !59
DSWP:       br label %26, !pdg.inst.id !229
DSWP:       br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:       switch i32 %25, label %._crit_edge [
    i32 0, label %._crit_edge1
    i32 1, label %._crit_edge2
    i32 2, label %30
  ], !prof !286, !pdg.inst.id !99
DSWP:       %15 = getelementptr inbounds %struct.node, %struct.node* %14, i64 0, i32 0, !pdg.inst.id !77
DSWP:       %14 = load %struct.node*, %struct.node** %13, align 8, !tbaa !281, !pdg.inst.id !75
DSWP:       %12 = load i64, i64* %11, align 8, !tbaa !277, !pdg.inst.id !71
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  There are 1 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 30
DSWP:     	  %22 = add nsw i64 %21, %17, !pdg.inst.id !82
DSWP:     	  %21 = load i64, i64* %20, align 8, !tbaa !282, !pdg.inst.id !88
DSWP:     	  %20 = getelementptr inbounds %struct.node, %struct.node* %19, i64 0, i32 0, !pdg.inst.id !86
DSWP:     	  %19 = load %struct.node*, %struct.node** %18, align 8, !tbaa !284, !pdg.inst.id !84
DSWP:     	  %10 = phi %struct.arc* [ %5, %7 ], [ %34, %33 ], !pdg.inst.id !52
DSWP:     	  %18 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 3, !pdg.inst.id !65
DSWP:     	  %17 = sub nsw i64 %12, %16, !pdg.inst.id !73
DSWP:     	  %27 = load i64, i64* %8, align 8, !tbaa !287, !pdg.inst.id !57
DSWP:     	  %25 = sext i16 %24 to i32, !pdg.inst.id !97
DSWP:     	  %16 = load i64, i64* %15, align 8, !tbaa !282, !pdg.inst.id !79
DSWP:     	  %35 = icmp ult %struct.arc* %34, %3, !pdg.inst.id !48
DSWP:     	  %24 = load i16, i16* %23, align 8, !tbaa !285, !pdg.inst.id !95
DSWP:     	  br i1 %29, label %.loopexit1, label %33, !prof !288, !pdg.inst.id !104
DSWP:     	  %29 = icmp slt i64 %22, %28, !pdg.inst.id !91
DSWP:     	  %13 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 2, !pdg.inst.id !67
DSWP:     	  %11 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 1, !pdg.inst.id !69
DSWP:     	  %34 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 1, !pdg.inst.id !61
DSWP:     	  %28 = sub nsw i64 0, %27, !pdg.inst.id !101
DSWP:     	  br label %33, !pdg.inst.id !233
DSWP:     	  br i1 %32, label %._crit_edge3, label %33, !prof !289, !pdg.inst.id !107
DSWP:     	  %32 = icmp sgt i64 %22, %31, !pdg.inst.id !93
DSWP:     	  br label %26, !pdg.inst.id !231
DSWP:     	  %23 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 4, !pdg.inst.id !63
DSWP:     	  %31 = load i64, i64* %8, align 8, !tbaa !287, !pdg.inst.id !59
DSWP:     	  br label %26, !pdg.inst.id !229
DSWP:     	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	  switch i32 %25, label %._crit_edge [
    i32 0, label %._crit_edge1
    i32 1, label %._crit_edge2
    i32 2, label %30
  ], !prof !286, !pdg.inst.id !99
DSWP:     	  %15 = getelementptr inbounds %struct.node, %struct.node* %14, i64 0, i32 0, !pdg.inst.id !77
DSWP:     	  %14 = load %struct.node*, %struct.node** %13, align 8, !tbaa !281, !pdg.inst.id !75
DSWP:     	  %12 = load i64, i64* %11, align 8, !tbaa !277, !pdg.inst.id !71
DSWP:     External nodes: 0
DSWP:     Edges: 69
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %13 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 2, !pdg.inst.id !67
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %10 = phi %struct.arc* [ %5, %7 ], [ %34, %33 ], !pdg.inst.id !52
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  switch i32 %25, label %._crit_edge [
    i32 0, label %._crit_edge1
    i32 1, label %._crit_edge2
    i32 2, label %30
  ], !prof !286, !pdg.inst.id !99
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %16 = load i64, i64* %15, align 8, !tbaa !282, !pdg.inst.id !79
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %17 = sub nsw i64 %12, %16, !pdg.inst.id !73
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %23 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 4, !pdg.inst.id !63
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %24 = load i16, i16* %23, align 8, !tbaa !285, !pdg.inst.id !95
DSWP:     	CTRL
DSWP:     	From:	  %34 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 1, !pdg.inst.id !61
DSWP:     	To:	  %35 = icmp ult %struct.arc* %34, %3, !pdg.inst.id !48
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %11 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 0, i32 1, !pdg.inst.id !69
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %14 = load %struct.node*, %struct.node** %13, align 8, !tbaa !281, !pdg.inst.id !75
DSWP:     	CTRL
DSWP:     	From:	  br i1 %29, label %.loopexit1, label %33, !prof !288, !pdg.inst.id !104
DSWP:     	To:	  %34 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 1, !pdg.inst.id !61
DSWP:     	CTRL
DSWP:     	From:	  %34 = getelementptr inbounds %struct.arc, %struct.arc* %10, i64 1, !pdg.inst.id !61
DSWP:     	To:	  %10 = phi %struct.arc* [ %5, %7 ], [ %34, %33 ], !pdg.inst.id !52
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %15 = getelementptr inbounds %struct.node, %struct.node* %14, i64 0, i32 0, !pdg.inst.id !77
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %12 = load i64, i64* %11, align 8, !tbaa !277, !pdg.inst.id !71
DSWP:     	CTRL
DSWP:     	From:	  br i1 %35, label %9, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111
DSWP:     	To:	  %25 = sext i16 %24 to i32, !pdg.inst.id !97
DSWP:     	CTRL
DSWP:     	....
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 
DSWP:      Pop value queues: 
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %3 = load %struct.arc*, %struct.arc** %2, align 8, !tbaa !268, !pdg.inst.id !44
DSWP:    Pre loop env 2, producer:	  %8 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 16, !pdg.inst.id !42
DSWP:    Pre loop env 3, producer:	  %5 = load %struct.arc*, %struct.arc** %4, align 8, !tbaa !275, !pdg.inst.id !50
DSWP:  Create 1 pipeline stages
Pipeline stage 0:

define void @0(i8*, i8*) {
  %3 = bitcast i8* %0 to [32 x i64]*
  %4 = bitcast i8* %1 to [0 x i8*]*
  %5 = getelementptr inbounds [32 x i64], [32 x i64]* %3, i64 0, i64 0
  %6 = bitcast i64* %5 to %struct.arc**
  %7 = load %struct.arc*, %struct.arc** %6
  %8 = getelementptr inbounds [32 x i64], [32 x i64]* %3, i64 0, i64 8
  %9 = bitcast i64* %8 to i64**
  %10 = load i64*, i64** %9
  %11 = getelementptr inbounds [32 x i64], [32 x i64]* %3, i64 0, i64 16
  %12 = bitcast i64* %11 to %struct.arc**
  %13 = load %struct.arc*, %struct.arc** %12
  %14 = getelementptr inbounds [32 x i64], [32 x i64]* %3, i64 0, i64 24
  %15 = bitcast i64* %14 to i32*
  br label %20

16:                                               ; preds = %19, %18, %17
  ret void

17:                                               ; preds = %44
  store i32 0, i32* %15
  br label %16

18:                                               ; preds = %40
  store i32 1, i32* %15
  br label %16

19:                                               ; preds = %47
  store i32 2, i32* %15
  br label %16

20:                                               ; preds = %2, %47
  %21 = phi %struct.arc* [ %13, %2 ], [ %48, %47 ], !pdg.inst.id !30
  %22 = getelementptr inbounds %struct.arc, %struct.arc* %21, i64 0, i32 1, !pdg.inst.id !31
  %23 = load i64, i64* %22, align 8, !tbaa !32, !pdg.inst.id !40
  %24 = getelementptr inbounds %struct.arc, %struct.arc* %21, i64 0, i32 2, !pdg.inst.id !41
  %25 = load %struct.node*, %struct.node** %24, align 8, !tbaa !42, !pdg.inst.id !43
  %26 = getelementptr inbounds %struct.node, %struct.node* %25, i64 0, i32 0, !pdg.inst.id !44
  %27 = load i64, i64* %26, align 8, !tbaa !45, !pdg.inst.id !47
  %28 = sub nsw i64 %23, %27, !pdg.inst.id !48
  %29 = getelementptr inbounds %struct.arc, %struct.arc* %21, i64 0, i32 3, !pdg.inst.id !49
  %30 = load %struct.node*, %struct.node** %29, align 8, !tbaa !50, !pdg.inst.id !51
  %31 = getelementptr inbounds %struct.node, %struct.node* %30, i64 0, i32 0, !pdg.inst.id !52
  %32 = load i64, i64* %31, align 8, !tbaa !45, !pdg.inst.id !53
  %33 = add nsw i64 %32, %28, !pdg.inst.id !54
  %34 = getelementptr inbounds %struct.arc, %struct.arc* %21, i64 0, i32 4, !pdg.inst.id !55
  %35 = load i16, i16* %34, align 8, !tbaa !56, !pdg.inst.id !57
  %36 = sext i16 %35 to i32, !pdg.inst.id !58
  switch i32 %36, label %39 [
    i32 0, label %38
    i32 1, label %37
    i32 2, label %44
  ], !prof !59, !pdg.inst.id !60

37:                                               ; preds = %20
  br label %40, !pdg.inst.id !61

38:                                               ; preds = %20
  br label %40, !pdg.inst.id !62

39:                                               ; preds = %20
  br label %47, !pdg.inst.id !63

40:                                               ; preds = %37, %38
  %41 = load i64, i64* %10, align 8, !tbaa !64, !pdg.inst.id !67
  %42 = sub nsw i64 0, %41, !pdg.inst.id !68
  %43 = icmp slt i64 %33, %42, !pdg.inst.id !69
  br i1 %43, label %18, label %47, !prof !70, !pdg.inst.id !71

44:                                               ; preds = %20
  %45 = load i64, i64* %10, align 8, !tbaa !64, !pdg.inst.id !72
  %46 = icmp sgt i64 %33, %45, !pdg.inst.id !73
  br i1 %46, label %17, label %47, !prof !74, !pdg.inst.id !75

47:                                               ; preds = %39, %40, %44
  %48 = getelementptr inbounds %struct.arc, %struct.arc* %21, i64 1, !pdg.inst.id !76
  %49 = icmp ult %struct.arc* %48, %7, !pdg.inst.id !77
  br i1 %49, label %20, label %19, !prof !78, !pdg.inst.id !79
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: nofree nounwind uwtable
define dso_local i64 @dual_feasible(%struct.network* nocapture readonly) local_unnamed_addr #14 !prof !30 !pdg.args.id !31 !pdg.edges !33 {
  %2 = alloca [32 x i64]
  %3 = bitcast [32 x i64]* %2 to i8*
  %4 = getelementptr inbounds [32 x i64], [32 x i64]* %2, i64 0, i64 0
  %5 = bitcast i64* %4 to %struct.arc**
  %6 = getelementptr inbounds [32 x i64], [32 x i64]* %2, i64 0, i64 8
  %7 = bitcast i64* %6 to i64**
  %8 = getelementptr inbounds [32 x i64], [32 x i64]* %2, i64 0, i64 16
  %9 = bitcast i64* %8 to %struct.arc**
  %10 = getelementptr inbounds [32 x i64], [32 x i64]* %2, i64 0, i64 24
  %11 = bitcast i64* %10 to i32*
  %12 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 24, !pdg.inst.id !35
  %13 = load %struct.arc*, %struct.arc** %12, align 8, !tbaa !268, !pdg.inst.id !44
  %14 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 23, !pdg.inst.id !40
  %15 = load %struct.arc*, %struct.arc** %14, align 8, !tbaa !275, !pdg.inst.id !50
  %16 = icmp ult %struct.arc* %15, %13, !pdg.inst.id !46
  br i1 %16, label %17, label %.loopexit, !prof !276, !pdg.inst.id !55

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 16, !pdg.inst.id !42
  %19 = load i32, i32* @0
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %56, label %21

21:                                               ; preds = %17, %45
  %22 = phi %struct.arc* [ %15, %17 ], [ %46, %45 ], !pdg.inst.id !52
  %23 = getelementptr inbounds %struct.arc, %struct.arc* %22, i64 0, i32 1, !pdg.inst.id !69
  %24 = load i64, i64* %23, align 8, !tbaa !277, !pdg.inst.id !71
  %25 = getelementptr inbounds %struct.arc, %struct.arc* %22, i64 0, i32 2, !pdg.inst.id !67
  %26 = load %struct.node*, %struct.node** %25, align 8, !tbaa !281, !pdg.inst.id !75
  %27 = getelementptr inbounds %struct.node, %struct.node* %26, i64 0, i32 0, !pdg.inst.id !77
  %28 = load i64, i64* %27, align 8, !tbaa !282, !pdg.inst.id !79
  %29 = sub nsw i64 %24, %28, !pdg.inst.id !73
  %30 = getelementptr inbounds %struct.arc, %struct.arc* %22, i64 0, i32 3, !pdg.inst.id !65
  %31 = load %struct.node*, %struct.node** %30, align 8, !tbaa !284, !pdg.inst.id !84
  %32 = getelementptr inbounds %struct.node, %struct.node* %31, i64 0, i32 0, !pdg.inst.id !86
  %33 = load i64, i64* %32, align 8, !tbaa !282, !pdg.inst.id !88
  %34 = add nsw i64 %33, %29, !pdg.inst.id !82
  %35 = getelementptr inbounds %struct.arc, %struct.arc* %22, i64 0, i32 4, !pdg.inst.id !63
  %36 = load i16, i16* %35, align 8, !tbaa !285, !pdg.inst.id !95
  %37 = sext i16 %36 to i32, !pdg.inst.id !97
  switch i32 %37, label %._crit_edge [
    i32 0, label %._crit_edge1
    i32 1, label %._crit_edge2
    i32 2, label %42
  ], !prof !286, !pdg.inst.id !99

._crit_edge2:                                     ; preds = %21
  br label %38, !pdg.inst.id !229

._crit_edge1:                                     ; preds = %21
  br label %38, !pdg.inst.id !231

._crit_edge:                                      ; preds = %21
  br label %45, !pdg.inst.id !233

38:                                               ; preds = %._crit_edge2, %._crit_edge1
  %39 = load i64, i64* %18, align 8, !tbaa !287, !pdg.inst.id !57
  %40 = sub nsw i64 0, %39, !pdg.inst.id !101
  %41 = icmp slt i64 %34, %40, !pdg.inst.id !91
  br i1 %41, label %.loopexit1, label %45, !prof !288, !pdg.inst.id !104

42:                                               ; preds = %21
  %43 = load i64, i64* %18, align 8, !tbaa !287, !pdg.inst.id !59
  %44 = icmp sgt i64 %34, %43, !pdg.inst.id !93
  br i1 %44, label %._crit_edge3, label %45, !prof !289, !pdg.inst.id !107

._crit_edge3:                                     ; preds = %63, %42
  br label %48, !pdg.inst.id !245

45:                                               ; preds = %._crit_edge, %38, %42
  %46 = getelementptr inbounds %struct.arc, %struct.arc* %22, i64 1, !pdg.inst.id !61
  %47 = icmp ult %struct.arc* %46, %13, !pdg.inst.id !48
  br i1 %47, label %21, label %.loopexit.loopexit, !prof !290, !pdg.inst.id !111

.loopexit1:                                       ; preds = %63, %38
  br label %48, !pdg.inst.id !240

48:                                               ; preds = %.loopexit1, %._crit_edge3
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !291, !pdg.inst.id !113
  %50 = getelementptr [23 x i8], [23 x i8]* @.str.4.10, i64 0, i64 0, !pdg.inst.id !116
  %51 = tail call i64 @fwrite(i8* %50, i64 22, i64 1, %struct._IO_FILE* %49) #39, !pdg.inst.id !114
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !291, !pdg.inst.id !118
  %53 = getelementptr [23 x i8], [23 x i8]* @.str.5.11, i64 0, i64 0, !pdg.inst.id !121
  %54 = tail call i64 @fwrite(i8* %53, i64 22, i64 1, %struct._IO_FILE* %52) #39, !pdg.inst.id !119
  br label %.loopexit, !pdg.inst.id !168

.loopexit.loopexit:                               ; preds = %63, %45
  br label %.loopexit, !pdg.inst.id !267

.loopexit:                                        ; preds = %.loopexit.loopexit, %1, %48
  %55 = phi i64 [ 1, %48 ], [ 0, %1 ], [ 0, %.loopexit.loopexit ], !pdg.inst.id !123
  ret i64 %55, !pdg.inst.id !124

56:                                               ; preds = %17
  store i32 1, i32* @0
  store %struct.arc* %13, %struct.arc** %5
  store i64* %18, i64** %7
  store %struct.arc* %15, %struct.arc** %9
  %57 = alloca [1 x i8*]
  %58 = getelementptr inbounds [1 x i8*], [1 x i8*]* %57, i64 0, i64 0
  %59 = bitcast i8** %58 to void (i8*, i8*)**
  store void (i8*, i8*)* @1, void (i8*, i8*)** %59
  %60 = bitcast [1 x i8*]* %57 to i8*
  %61 = alloca [0 x i64]
  %62 = bitcast [0 x i64]* %61 to i64*
  call void @stageDispatcher(i8* %3, i64* %62, i8* %60, i64 1, i64 0)
  br label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds [32 x i64], [32 x i64]* %2, i64 0, i64 24
  %65 = load i64, i64* %64
  %66 = trunc i64 %65 to i32
  store i32 0, i32* @0
  switch i32 %66, label %._crit_edge3 [
    i32 1, label %.loopexit1
    i32 2, label %.loopexit.loopexit
  ]
}

Parallelizer: Exit
Parallelizer: Start
Parallelizer:  Function = "flow_cost"
Parallelizer:  Loop 1 = "  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92"
Parallelizer:  Nesting level = 1
DOALL: Checking if the loop is DOALL
DOALL:   Some post environment value is not reducable
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 6
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:       %26 = add nuw nsw i64 %13, 2, !pdg.inst.id !221
DSWP:   SCC: 1 Internal nodes:
DSWP:       %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:       %16 = load i16, i16* %15, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:   SCC: 2 Internal nodes:
DSWP:       store i64 %19, i64* %18, align 8, !tbaa !558, !pdg.inst.id !134
DSWP:       %19 = zext i1 %17 to i64, !pdg.inst.id !230
DSWP:       %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:   SCC: 3 Internal nodes:
DSWP:       %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:   SCC: 4 Internal nodes:
DSWP:       %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:       %22 = load i16, i16* %21, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:   SCC: 5 Internal nodes:
DSWP:       store i64 %25, i64* %24, align 8, !tbaa !558, !pdg.inst.id !166
DSWP:       %25 = zext i1 %23 to i64, !pdg.inst.id !90
DSWP:       %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:   Set:  0
DSWP:    Children: Set:  1; Set:  2; Set:  3; 
DSWP:    Parents: 
DSWP:   Set:  1
DSWP:    Children: Set:  2; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  2
DSWP:    Children: 
DSWP:    Parents: Set:  1; Set:  0; 
DSWP:   Set:  3
DSWP:    Children: Set:  5; Set:  4; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  4
DSWP:    Children: Set:  5; 
DSWP:    Parents: Set:  3; 
DSWP:   Set:  5
DSWP:    Children: 
DSWP:    Parents: Set:  3; Set:  4; 
DSWP:  Final number of partitions: 6
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:       %26 = add nuw nsw i64 %13, 2, !pdg.inst.id !221
DSWP:   SCC: 1 Internal nodes:
DSWP:       %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:       %16 = load i16, i16* %15, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:   SCC: 2 Internal nodes:
DSWP:       store i64 %19, i64* %18, align 8, !tbaa !558, !pdg.inst.id !134
DSWP:       %19 = zext i1 %17 to i64, !pdg.inst.id !230
DSWP:       %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:   SCC: 3 Internal nodes:
DSWP:       %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:   SCC: 4 Internal nodes:
DSWP:       %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:       %22 = load i16, i16* %21, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:   SCC: 5 Internal nodes:
DSWP:       store i64 %25, i64* %24, align 8, !tbaa !558, !pdg.inst.id !166
DSWP:       %25 = zext i1 %23 to i64, !pdg.inst.id !90
DSWP:       %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:   Set:  0
DSWP:    Children: Set:  1; Set:  2; Set:  3; 
DSWP:    Parents: 
DSWP:   Set:  1
DSWP:    Children: Set:  2; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  2
DSWP:    Children: 
DSWP:    Parents: Set:  1; Set:  0; 
DSWP:   Set:  3
DSWP:    Children: Set:  5; Set:  4; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  4
DSWP:    Children: Set:  5; 
DSWP:    Parents: Set:  3; 
DSWP:   Set:  5
DSWP:    Children: 
DSWP:    Parents: Set:  3; Set:  4; 
DSWP:  There are 6 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 2
DSWP:     	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	  %26 = add nuw nsw i64 %13, 2, !pdg.inst.id !221
DSWP:     External nodes: 4
DSWP:     	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:     	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	  %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:     Edges: 7
DSWP:     	From:	  %26 = add nuw nsw i64 %13, 2, !pdg.inst.id !221
DSWP:     	To:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	RAW (must)
DSWP:     	From:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	To:	  %26 = add nuw nsw i64 %13, 2, !pdg.inst.id !221
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %26 = add nuw nsw i64 %13, 2, !pdg.inst.id !221
DSWP:     	CTRL
DSWP:     	From:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	To:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	RAW (must)
DSWP:     	From:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	To:	  %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:     	RAW (must)
DSWP:     	From:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	To:	  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 1
DSWP:     Internal nodes: 2
DSWP:     	  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:     	  %16 = load i16, i16* %15, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     External nodes: 3
DSWP:     	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	  %17 = icmp eq i16 %16, 2, !pdg.inst.id !229
DSWP:     Edges: 5
DSWP:     	From:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	To:	  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %16 = load i16, i16* %15, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     	CTRL
DSWP:     	From:	  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:     	To:	  %16 = load i16, i16* %15, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     	RAW (must)
DSWP:     	From:	  %16 = load i16, i16* %15, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     	To:	  %17 = icmp eq i16 %16, 2, !pdg.inst.id !229
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 2
DSWP:     Internal nodes: 1
DSWP:     	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     External nodes: 4
DSWP:     	  %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:     	  %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:     	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     Edges: 4
DSWP:     	From:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	To:	  %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:     	RAW (must)
DSWP:     	From:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	To:	  %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:     	RAW (must)
DSWP:     	From:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	To:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 3
DSWP:     Internal nodes: 3
DSWP:     	  store i64 %19, i64* %18, align 8, !tbaa !558, !pdg.inst.id !134
DSWP:     	  %19 = zext i1 %17 to i64, !pdg.inst.id !230
DSWP:     	  %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:     External nodes: 3
DSWP:     	  %17 = icmp eq i16 %16, 2, !pdg.inst.id !229
DSWP:     	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     Edges: 7
DSWP:     	From:	  %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:     	To:	  store i64 %19, i64* %18, align 8, !tbaa !558, !pdg.inst.id !134
DSWP:     	RAW (must)
DSWP:     	From:	  %19 = zext i1 %17 to i64, !pdg.inst.id !230
DSWP:     	To:	  store i64 %19, i64* %18, align 8, !tbaa !558, !pdg.inst.id !134
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  store i64 %19, i64* %18, align 8, !tbaa !558, !pdg.inst.id !134
DSWP:     	CTRL
DSWP:     	From:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     	To:	  %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:     	CTRL
DSWP:     	From:	  %17 = icmp eq i16 %16, 2, !pdg.inst.id !229
DSWP:     	To:	  %19 = zext i1 %17 to i64, !pdg.inst.id !230
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %19 = zext i1 %17 to i64, !pdg.inst.id !230
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 4
DSWP:     Internal nodes: 2
DSWP:     	  %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:     	  %22 = load i16, i16* %21, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     External nodes: 3
DSWP:     	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	  %23 = icmp eq i16 %22, 2, !pdg.inst.id !89
DSWP:     Edges: 5
DSWP:     	From:	  %22 = load i16, i16* %21, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     	To:	  %23 = icmp eq i16 %22, 2, !pdg.inst.id !89
DSWP:     	RAW (must)
DSWP:     	From:	  %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:     	To:	  %22 = load i16, i16* %21, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %22 = load i16, i16* %21, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     	CTRL
DSWP:     	From:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	To:	  %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 5
DSWP:     Internal nodes: 3
DSWP:     	  store i64 %25, i64* %24, align 8, !tbaa !558, !pdg.inst.id !166
DSWP:     	  %25 = zext i1 %23 to i64, !pdg.inst.id !90
DSWP:     	  %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:     External nodes: 3
DSWP:     	  %23 = icmp eq i16 %22, 2, !pdg.inst.id !89
DSWP:     	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     Edges: 7
DSWP:     	From:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     	To:	  %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  store i64 %25, i64* %24, align 8, !tbaa !558, !pdg.inst.id !166
DSWP:     	CTRL
DSWP:     	From:	  %25 = zext i1 %23 to i64, !pdg.inst.id !90
DSWP:     	To:	  store i64 %25, i64* %24, align 8, !tbaa !558, !pdg.inst.id !166
DSWP:     	RAW (must)
DSWP:     	From:	  %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:     	To:	  store i64 %25, i64* %24, align 8, !tbaa !558, !pdg.inst.id !166
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:     	CTRL
DSWP:     	From:	  %23 = icmp eq i16 %22, 2, !pdg.inst.id !89
DSWP:     	To:	  %25 = zext i1 %23 to i64, !pdg.inst.id !90
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %28, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232
DSWP:     	To:	  %25 = zext i1 %23 to i64, !pdg.inst.id !90
DSWP:     	CTRL
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 0 1 3 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 2 
DSWP:      Pop value queues: 0 
DSWP:    Stage: 2
DSWP:      Push value queues: 4 6 
DSWP:      Pop value queues: 1 
DSWP:    Stage: 3
DSWP:      Push value queues: 
DSWP:      Pop value queues: 2 3 
DSWP:    Stage: 4
DSWP:      Push value queues: 5 
DSWP:      Pop value queues: 4 
DSWP:    Stage: 5
DSWP:      Push value queues: 
DSWP:      Pop value queues: 5 6 
DSWP:    Queue: 0
DSWP:     Producer:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %15 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 4, !pdg.inst.id !92
DSWP:    Queue: 1
DSWP:     Producer:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:    Queue: 2
DSWP:     Producer:	  %16 = load i16, i16* %15, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     Consumer:	  %17 = icmp eq i16 %16, 2, !pdg.inst.id !229
DSWP:    Queue: 3
DSWP:     Producer:	  %13 = phi i64 [ 0, %10 ], [ %26, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %18 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %13, i32 7, !pdg.inst.id !133
DSWP:    Queue: 4
DSWP:     Producer:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %21 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 4, !pdg.inst.id !61
DSWP:    Queue: 5
DSWP:     Producer:	  %22 = load i16, i16* %21, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     Consumer:	  %23 = icmp eq i16 %22, 2, !pdg.inst.id !89
DSWP:    Queue: 6
DSWP:     Producer:	  %20 = or i64 %13, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %24 = getelementptr inbounds %struct.arc, %struct.arc* %3, i64 %20, i32 7, !pdg.inst.id !59
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %11 = sub i64 %5, %8, !pdg.inst.id !110
DSWP:    Pre loop env 2, producer:	  %3 = load %struct.arc*, %struct.arc** %2, align 8, !tbaa !544, !pdg.inst.id !127
DSWP:    Post loop env 3, producer:	  %26 = add nuw nsw i64 %13, 2, !pdg.inst.id !221
DSWP:  Create 6 pipeline stages
Pipeline stage 0:

define void @2(i8*, i8*) {
  %3 = bitcast i8* %0 to [24 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 0
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.54"**
  %7 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %6
  %8 = alloca i64
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 1
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.54"**
  %11 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 3
  %14 = bitcast i8** %13 to %"class.MARC::ThreadSafeQueue.54"**
  %15 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %14
  %16 = alloca i64
  %17 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 8
  %18 = load i64, i64* %17
  %19 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 0
  br label %22

20:                                               ; preds = %21
  ret void

21:                                               ; preds = %22
  store i64 %40, i64* %19
  br label %20

22:                                               ; preds = %2, %43
  %23 = phi i64 [ 0, %2 ], [ %40, %43 ], !pdg.inst.id !30
  %24 = phi i64 [ %18, %2 ], [ %41, %43 ], !pdg.inst.id !31
  store i64 %23, i64* %16
  %25 = load i64, i64* %16, align 8, !tbaa !32, !pdg.inst.id !36
  %26 = bitcast %"class.MARC::ThreadSafeQueue.54"* %15 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !37
  %27 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %26, align 8, !tbaa !38, !pdg.inst.id !40
  %28 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %27, i64 3, !pdg.inst.id !41
  %29 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %28, align 8, !pdg.inst.id !42
  call void %29(%"class.MARC::ThreadSafeQueue.54"* %15, i64 %25), !pdg.inst.id !43
  store i64 %23, i64* %12
  %30 = load i64, i64* %12, align 8, !tbaa !32, !pdg.inst.id !36
  %31 = bitcast %"class.MARC::ThreadSafeQueue.54"* %11 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !37
  %32 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %31, align 8, !tbaa !38, !pdg.inst.id !40
  %33 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %32, i64 3, !pdg.inst.id !41
  %34 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %33, align 8, !pdg.inst.id !42
  call void %34(%"class.MARC::ThreadSafeQueue.54"* %11, i64 %30), !pdg.inst.id !43
  store i64 %23, i64* %8
  %35 = load i64, i64* %8, align 8, !tbaa !32, !pdg.inst.id !36
  %36 = bitcast %"class.MARC::ThreadSafeQueue.54"* %7 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !37
  %37 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %36, align 8, !tbaa !38, !pdg.inst.id !40
  %38 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %37, i64 3, !pdg.inst.id !41
  %39 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %38, align 8, !pdg.inst.id !42
  call void %39(%"class.MARC::ThreadSafeQueue.54"* %7, i64 %35), !pdg.inst.id !43
  %40 = add nuw nsw i64 %23, 2, !pdg.inst.id !44
  %41 = add i64 %24, -2, !pdg.inst.id !45
  %42 = icmp eq i64 %41, 0, !pdg.inst.id !46
  br i1 %42, label %21, label %43, !prof !47, !pdg.inst.id !48

43:                                               ; preds = %22
  br label %22, !pdg.inst.id !49
}

Pipeline stage 1:

define void @3(i8*, i8*) {
  %3 = bitcast i8* %0 to [24 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 2
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.36"**
  %7 = load %"class.MARC::ThreadSafeQueue.36"*, %"class.MARC::ThreadSafeQueue.36"** %6
  %8 = alloca i16
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 0
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.54"**
  %11 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 8
  %14 = load i64, i64* %13
  %15 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 16
  %16 = bitcast i64* %15 to %struct.arc**
  %17 = load %struct.arc*, %struct.arc** %16
  br label %20

18:                                               ; preds = %19
  ret void

19:                                               ; preds = %20
  br label %18

20:                                               ; preds = %2, %37
  %21 = phi i64 [ %14, %2 ], [ %35, %37 ], !pdg.inst.id !30
  %22 = bitcast %"class.MARC::ThreadSafeQueue.54"* %11 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %23 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %22, align 8, !tbaa !32, !pdg.inst.id !35
  %24 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %23, i64 1, !pdg.inst.id !36
  %25 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %24, align 8, !pdg.inst.id !37
  %26 = call zeroext i1 %25(%"class.MARC::ThreadSafeQueue.54"* %11, i64* dereferenceable(8) %12), !pdg.inst.id !38
  %27 = load i64, i64* %12
  %28 = getelementptr inbounds %struct.arc, %struct.arc* %17, i64 %27, i32 4, !pdg.inst.id !39
  %29 = load i16, i16* %28, align 8, !tbaa !40, !pdg.inst.id !48
  store i16 %29, i16* %8
  %30 = load i16, i16* %8, align 2, !tbaa !49, !pdg.inst.id !52
  %31 = bitcast %"class.MARC::ThreadSafeQueue.36"* %7 to void (%"class.MARC::ThreadSafeQueue.36"*, i16)***, !pdg.inst.id !53
  %32 = load void (%"class.MARC::ThreadSafeQueue.36"*, i16)**, void (%"class.MARC::ThreadSafeQueue.36"*, i16)*** %31, align 8, !tbaa !32, !pdg.inst.id !54
  %33 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.36"*, i16)*, void (%"class.MARC::ThreadSafeQueue.36"*, i16)** %32, i64 3, !pdg.inst.id !55
  %34 = load void (%"class.MARC::ThreadSafeQueue.36"*, i16)*, void (%"class.MARC::ThreadSafeQueue.36"*, i16)** %33, align 8, !pdg.inst.id !56
  call void %34(%"class.MARC::ThreadSafeQueue.36"* %7, i16 signext %30), !pdg.inst.id !57
  %35 = add i64 %21, -2, !pdg.inst.id !58
  %36 = icmp eq i64 %35, 0, !pdg.inst.id !59
  br i1 %36, label %19, label %37, !prof !60, !pdg.inst.id !61

37:                                               ; preds = %20
  br label %20, !pdg.inst.id !62
}

Pipeline stage 2:

define void @4(i8*, i8*) {
  %3 = bitcast i8* %0 to [24 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 4
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.54"**
  %7 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %6
  %8 = alloca i64
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 6
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.54"**
  %11 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 1
  %14 = bitcast i8** %13 to %"class.MARC::ThreadSafeQueue.54"**
  %15 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %14
  %16 = alloca i64
  %17 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 8
  %18 = load i64, i64* %17
  br label %21

19:                                               ; preds = %20
  ret void

20:                                               ; preds = %21
  br label %19

21:                                               ; preds = %2, %42
  %22 = phi i64 [ %18, %2 ], [ %40, %42 ], !pdg.inst.id !30
  %23 = bitcast %"class.MARC::ThreadSafeQueue.54"* %15 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %24 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %23, align 8, !tbaa !32, !pdg.inst.id !35
  %25 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %24, i64 1, !pdg.inst.id !36
  %26 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %25, align 8, !pdg.inst.id !37
  %27 = call zeroext i1 %26(%"class.MARC::ThreadSafeQueue.54"* %15, i64* dereferenceable(8) %16), !pdg.inst.id !38
  %28 = load i64, i64* %16
  %29 = or i64 %28, 1, !pdg.inst.id !39
  store i64 %29, i64* %12
  %30 = load i64, i64* %12, align 8, !tbaa !40, !pdg.inst.id !43
  %31 = bitcast %"class.MARC::ThreadSafeQueue.54"* %11 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !44
  %32 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %31, align 8, !tbaa !32, !pdg.inst.id !45
  %33 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %32, i64 3, !pdg.inst.id !46
  %34 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %33, align 8, !pdg.inst.id !47
  call void %34(%"class.MARC::ThreadSafeQueue.54"* %11, i64 %30), !pdg.inst.id !48
  store i64 %29, i64* %8
  %35 = load i64, i64* %8, align 8, !tbaa !40, !pdg.inst.id !43
  %36 = bitcast %"class.MARC::ThreadSafeQueue.54"* %7 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !44
  %37 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %36, align 8, !tbaa !32, !pdg.inst.id !45
  %38 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %37, i64 3, !pdg.inst.id !46
  %39 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %38, align 8, !pdg.inst.id !47
  call void %39(%"class.MARC::ThreadSafeQueue.54"* %7, i64 %35), !pdg.inst.id !48
  %40 = add i64 %22, -2, !pdg.inst.id !49
  %41 = icmp eq i64 %40, 0, !pdg.inst.id !50
  br i1 %41, label %20, label %42, !prof !51, !pdg.inst.id !52

42:                                               ; preds = %21
  br label %21, !pdg.inst.id !53
}

Pipeline stage 3:

define void @5(i8*, i8*) {
  %3 = bitcast i8* %0 to [24 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 2
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.36"**
  %7 = load %"class.MARC::ThreadSafeQueue.36"*, %"class.MARC::ThreadSafeQueue.36"** %6
  %8 = alloca i16
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 3
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.54"**
  %11 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 8
  %14 = load i64, i64* %13
  %15 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 16
  %16 = bitcast i64* %15 to %struct.arc**
  %17 = load %struct.arc*, %struct.arc** %16
  br label %20

18:                                               ; preds = %19
  ret void

19:                                               ; preds = %20
  br label %18

20:                                               ; preds = %2, %39
  %21 = phi i64 [ %14, %2 ], [ %37, %39 ], !pdg.inst.id !30
  %22 = bitcast %"class.MARC::ThreadSafeQueue.36"* %7 to i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)***, !pdg.inst.id !31
  %23 = load i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)**, i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)*** %22, align 8, !tbaa !32, !pdg.inst.id !35
  %24 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)*, i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)** %23, i64 1, !pdg.inst.id !36
  %25 = load i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)*, i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)** %24, align 8, !pdg.inst.id !37
  %26 = call zeroext i1 %25(%"class.MARC::ThreadSafeQueue.36"* %7, i16* dereferenceable(2) %8), !pdg.inst.id !38
  %27 = bitcast %"class.MARC::ThreadSafeQueue.54"* %11 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !39
  %28 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %27, align 8, !tbaa !32, !pdg.inst.id !40
  %29 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %28, i64 1, !pdg.inst.id !41
  %30 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %29, align 8, !pdg.inst.id !42
  %31 = call zeroext i1 %30(%"class.MARC::ThreadSafeQueue.54"* %11, i64* dereferenceable(8) %12), !pdg.inst.id !43
  %32 = load i64, i64* %12
  %33 = load i16, i16* %8
  %34 = icmp eq i16 %33, 2, !pdg.inst.id !44
  %35 = getelementptr inbounds %struct.arc, %struct.arc* %17, i64 %32, i32 7, !pdg.inst.id !45
  %36 = zext i1 %34 to i64, !pdg.inst.id !46
  store i64 %36, i64* %35, align 8, !tbaa !47, !pdg.inst.id !55
  %37 = add i64 %21, -2, !pdg.inst.id !56
  %38 = icmp eq i64 %37, 0, !pdg.inst.id !57
  br i1 %38, label %19, label %39, !prof !58, !pdg.inst.id !59

39:                                               ; preds = %20
  br label %20, !pdg.inst.id !60
}

Pipeline stage 4:

define void @6(i8*, i8*) {
  %3 = bitcast i8* %0 to [24 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 5
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.36"**
  %7 = load %"class.MARC::ThreadSafeQueue.36"*, %"class.MARC::ThreadSafeQueue.36"** %6
  %8 = alloca i16
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 4
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.54"**
  %11 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 8
  %14 = load i64, i64* %13
  %15 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 16
  %16 = bitcast i64* %15 to %struct.arc**
  %17 = load %struct.arc*, %struct.arc** %16
  br label %20

18:                                               ; preds = %19
  ret void

19:                                               ; preds = %20
  br label %18

20:                                               ; preds = %2, %37
  %21 = phi i64 [ %14, %2 ], [ %35, %37 ], !pdg.inst.id !30
  %22 = bitcast %"class.MARC::ThreadSafeQueue.54"* %11 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %23 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %22, align 8, !tbaa !32, !pdg.inst.id !35
  %24 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %23, i64 1, !pdg.inst.id !36
  %25 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %24, align 8, !pdg.inst.id !37
  %26 = call zeroext i1 %25(%"class.MARC::ThreadSafeQueue.54"* %11, i64* dereferenceable(8) %12), !pdg.inst.id !38
  %27 = load i64, i64* %12
  %28 = getelementptr inbounds %struct.arc, %struct.arc* %17, i64 %27, i32 4, !pdg.inst.id !39
  %29 = load i16, i16* %28, align 8, !tbaa !40, !pdg.inst.id !48
  store i16 %29, i16* %8
  %30 = load i16, i16* %8, align 2, !tbaa !49, !pdg.inst.id !52
  %31 = bitcast %"class.MARC::ThreadSafeQueue.36"* %7 to void (%"class.MARC::ThreadSafeQueue.36"*, i16)***, !pdg.inst.id !53
  %32 = load void (%"class.MARC::ThreadSafeQueue.36"*, i16)**, void (%"class.MARC::ThreadSafeQueue.36"*, i16)*** %31, align 8, !tbaa !32, !pdg.inst.id !54
  %33 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.36"*, i16)*, void (%"class.MARC::ThreadSafeQueue.36"*, i16)** %32, i64 3, !pdg.inst.id !55
  %34 = load void (%"class.MARC::ThreadSafeQueue.36"*, i16)*, void (%"class.MARC::ThreadSafeQueue.36"*, i16)** %33, align 8, !pdg.inst.id !56
  call void %34(%"class.MARC::ThreadSafeQueue.36"* %7, i16 signext %30), !pdg.inst.id !57
  %35 = add i64 %21, -2, !pdg.inst.id !58
  %36 = icmp eq i64 %35, 0, !pdg.inst.id !59
  br i1 %36, label %19, label %37, !prof !60, !pdg.inst.id !61

37:                                               ; preds = %20
  br label %20, !pdg.inst.id !62
}

Pipeline stage 5:

define void @7(i8*, i8*) {
  %3 = bitcast i8* %0 to [24 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 5
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.36"**
  %7 = load %"class.MARC::ThreadSafeQueue.36"*, %"class.MARC::ThreadSafeQueue.36"** %6
  %8 = alloca i16
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 6
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.54"**
  %11 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 8
  %14 = load i64, i64* %13
  %15 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 16
  %16 = bitcast i64* %15 to %struct.arc**
  %17 = load %struct.arc*, %struct.arc** %16
  br label %20

18:                                               ; preds = %19
  ret void

19:                                               ; preds = %20
  br label %18

20:                                               ; preds = %2, %39
  %21 = phi i64 [ %14, %2 ], [ %37, %39 ], !pdg.inst.id !30
  %22 = bitcast %"class.MARC::ThreadSafeQueue.36"* %7 to i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)***, !pdg.inst.id !31
  %23 = load i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)**, i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)*** %22, align 8, !tbaa !32, !pdg.inst.id !35
  %24 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)*, i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)** %23, i64 1, !pdg.inst.id !36
  %25 = load i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)*, i1 (%"class.MARC::ThreadSafeQueue.36"*, i16*)** %24, align 8, !pdg.inst.id !37
  %26 = call zeroext i1 %25(%"class.MARC::ThreadSafeQueue.36"* %7, i16* dereferenceable(2) %8), !pdg.inst.id !38
  %27 = bitcast %"class.MARC::ThreadSafeQueue.54"* %11 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !39
  %28 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %27, align 8, !tbaa !32, !pdg.inst.id !40
  %29 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %28, i64 1, !pdg.inst.id !41
  %30 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %29, align 8, !pdg.inst.id !42
  %31 = call zeroext i1 %30(%"class.MARC::ThreadSafeQueue.54"* %11, i64* dereferenceable(8) %12), !pdg.inst.id !43
  %32 = load i64, i64* %12
  %33 = load i16, i16* %8
  %34 = icmp eq i16 %33, 2, !pdg.inst.id !44
  %35 = getelementptr inbounds %struct.arc, %struct.arc* %17, i64 %32, i32 7, !pdg.inst.id !45
  %36 = zext i1 %34 to i64, !pdg.inst.id !46
  store i64 %36, i64* %35, align 8, !tbaa !47, !pdg.inst.id !55
  %37 = add i64 %21, -2, !pdg.inst.id !56
  %38 = icmp eq i64 %37, 0, !pdg.inst.id !57
  br i1 %38, label %19, label %39, !prof !58, !pdg.inst.id !59

39:                                               ; preds = %20
  br label %20, !pdg.inst.id !60
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local double @flow_cost(%struct.network* nocapture readonly) local_unnamed_addr #2 !prof !30 !pdg.args.id !31 !pdg.edges !33 {
  %2 = alloca [24 x i64]
  %3 = bitcast [24 x i64]* %2 to i8*
  %4 = getelementptr inbounds [24 x i64], [24 x i64]* %2, i64 0, i64 0
  %5 = getelementptr inbounds [24 x i64], [24 x i64]* %2, i64 0, i64 8
  %6 = getelementptr inbounds [24 x i64], [24 x i64]* %2, i64 0, i64 16
  %7 = bitcast i64* %6 to %struct.arc**
  %8 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 23, !pdg.inst.id !75
  %9 = load %struct.arc*, %struct.arc** %8, align 8, !tbaa !544, !pdg.inst.id !127
  %10 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 5, !pdg.inst.id !77
  %11 = load i64, i64* %10, align 8, !tbaa !551, !pdg.inst.id !108
  %12 = icmp sgt i64 %11, 0, !pdg.inst.id !116
  br i1 %12, label %13, label %45, !prof !552, !pdg.inst.id !211

13:                                               ; preds = %1
  %14 = and i64 %11, 1, !pdg.inst.id !112
  %15 = icmp eq i64 %11, 1, !pdg.inst.id !97
  br i1 %15, label %.loopexit2, label %16, !prof !553, !pdg.inst.id !98

16:                                               ; preds = %13
  %17 = sub i64 %11, %14, !pdg.inst.id !110
  %18 = load i32, i32* @1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %109, label %20

20:                                               ; preds = %16, %._crit_edge
  %21 = phi i64 [ 0, %16 ], [ %34, %._crit_edge ], !pdg.inst.id !223
  %22 = phi i64 [ %17, %16 ], [ %35, %._crit_edge ], !pdg.inst.id !131
  %23 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %21, i32 4, !pdg.inst.id !92
  %24 = load i16, i16* %23, align 8, !tbaa !554, !pdg.inst.id !93
  %25 = icmp eq i16 %24, 2, !pdg.inst.id !229
  %26 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %21, i32 7, !pdg.inst.id !133
  %27 = zext i1 %25 to i64, !pdg.inst.id !230
  store i64 %27, i64* %26, align 8, !tbaa !558, !pdg.inst.id !134
  %28 = or i64 %21, 1, !pdg.inst.id !58
  %29 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %28, i32 4, !pdg.inst.id !61
  %30 = load i16, i16* %29, align 8, !tbaa !554, !pdg.inst.id !163
  %31 = icmp eq i16 %30, 2, !pdg.inst.id !89
  %32 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %28, i32 7, !pdg.inst.id !59
  %33 = zext i1 %31 to i64, !pdg.inst.id !90
  store i64 %33, i64* %32, align 8, !tbaa !558, !pdg.inst.id !166
  %34 = add nuw nsw i64 %21, 2, !pdg.inst.id !221
  %35 = add i64 %22, -2, !pdg.inst.id !168
  %36 = icmp eq i64 %35, 0, !pdg.inst.id !169
  br i1 %36, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232

._crit_edge:                                      ; preds = %20
  br label %20, !pdg.inst.id !439

.loopexit2.loopexit:                              ; preds = %134, %20
  %.lcssa6 = phi i64 [ %34, %20 ], [ %133, %134 ], !pdg.inst.id !49
  br label %.loopexit2, !pdg.inst.id !442

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %13
  %37 = phi i64 [ 0, %13 ], [ %.lcssa6, %.loopexit2.loopexit ], !pdg.inst.id !50
  %38 = icmp eq i64 %14, 0, !pdg.inst.id !100
  br i1 %38, label %45, label %39, !prof !560, !pdg.inst.id !101

39:                                               ; preds = %.loopexit2
  %40 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %37, i32 4, !pdg.inst.id !118
  %41 = load i16, i16* %40, align 8, !tbaa !554, !pdg.inst.id !227
  %42 = icmp eq i16 %41, 2, !pdg.inst.id !122
  %43 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %37, i32 7, !pdg.inst.id !120
  %44 = zext i1 %42 to i64, !pdg.inst.id !55
  store i64 %44, i64* %43, align 8, !tbaa !558, !pdg.inst.id !56
  br label %45, !pdg.inst.id !340

45:                                               ; preds = %39, %.loopexit2, %1
  %46 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 21, !pdg.inst.id !79
  %47 = load %struct.node*, %struct.node** %46, align 8, !tbaa !561, !pdg.inst.id !191
  %48 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 2, !pdg.inst.id !81
  %49 = load i64, i64* %48, align 8, !tbaa !562, !pdg.inst.id !178
  %50 = icmp slt i64 %49, 1, !pdg.inst.id !181
  br i1 %50, label %.loopexit1, label %.preheader.preheader, !prof !553, !pdg.inst.id !193

.preheader.preheader:                             ; preds = %45
  br label %.preheader, !pdg.inst.id !453

.loopexit1.loopexit:                              ; preds = %.preheader
  br label %.loopexit1, !pdg.inst.id !455

.loopexit1:                                       ; preds = %.loopexit1.loopexit, %45
  br i1 %12, label %51, label %.loopexit, !prof !552, !pdg.inst.id !209

51:                                               ; preds = %.loopexit1
  %52 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 18, !pdg.inst.id !83
  br label %61, !pdg.inst.id !458

.preheader:                                       ; preds = %.preheader..preheader_crit_edge, %.preheader.preheader
  %53 = phi i64 [ %59, %.preheader..preheader_crit_edge ], [ 1, %.preheader.preheader ], !pdg.inst.id !172
  %54 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 10, !pdg.inst.id !174
  %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
  %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160
  %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
  %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214
  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
  %59 = add nuw i64 %53, 1, !pdg.inst.id !176
  %60 = icmp slt i64 %49, %59, !pdg.inst.id !63
  br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64

.preheader..preheader_crit_edge:                  ; preds = %.preheader
  br label %.preheader, !pdg.inst.id !480

61:                                               ; preds = %95, %51
  %62 = phi i64 [ 0, %51 ], [ %98, %95 ], !pdg.inst.id !136
  %63 = phi i64 [ 0, %51 ], [ %97, %95 ], !pdg.inst.id !186
  %64 = phi i64 [ 0, %51 ], [ %96, %95 ], !pdg.inst.id !202
  %65 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %62, i32 7, !pdg.inst.id !144
  %66 = load i64, i64* %65, align 8, !tbaa !558, !pdg.inst.id !43
  %67 = icmp eq i64 %66, 0, !pdg.inst.id !44
  br i1 %67, label %._crit_edge1, label %68, !prof !567, !pdg.inst.id !274

._crit_edge1:                                     ; preds = %61
  br label %95, !pdg.inst.id !498

68:                                               ; preds = %61
  %69 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %62, i32 2, !pdg.inst.id !142
  %70 = load %struct.node*, %struct.node** %69, align 8, !tbaa !568, !pdg.inst.id !150
  %71 = getelementptr inbounds %struct.node, %struct.node* %70, i64 0, i32 12, !pdg.inst.id !148
  %72 = load i32, i32* %71, align 8, !tbaa !569, !pdg.inst.id !103
  %73 = icmp slt i32 %72, 0, !pdg.inst.id !106
  br i1 %73, label %74, label %83, !prof !570, !pdg.inst.id !198

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %62, i32 3, !pdg.inst.id !138
  %76 = load %struct.node*, %struct.node** %75, align 8, !tbaa !571, !pdg.inst.id !218
  %77 = getelementptr inbounds %struct.node, %struct.node* %76, i64 0, i32 12, !pdg.inst.id !52
  %78 = load i32, i32* %77, align 8, !tbaa !569, !pdg.inst.id !53
  %79 = icmp sgt i32 %78, 0, !pdg.inst.id !237
  br i1 %79, label %95, label %80, !prof !572, !pdg.inst.id !246

80:                                               ; preds = %74
  %81 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %62, i32 1, !pdg.inst.id !124
  %82 = load i64, i64* %81, align 8, !tbaa !573, !pdg.inst.id !125
  br label %92, !pdg.inst.id !514

83:                                               ; preds = %68
  %84 = icmp eq i32 %72, 0, !pdg.inst.id !104
  %85 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %62, i32 1, !pdg.inst.id !140
  %86 = load i64, i64* %85, align 8, !tbaa !573, !pdg.inst.id !188
  br i1 %84, label %87, label %92, !prof !574, !pdg.inst.id !243

87:                                               ; preds = %83
  %88 = load i64, i64* %52, align 8, !tbaa !575, !pdg.inst.id !95
  %89 = add i64 %86, %63, !pdg.inst.id !69
  %90 = sub i64 %89, %88, !pdg.inst.id !70
  %91 = add nsw i64 %64, 1, !pdg.inst.id !205
  br label %95, !pdg.inst.id !524

92:                                               ; preds = %80, %83
  %93 = phi i64 [ %82, %80 ], [ %86, %83 ], !pdg.inst.id !156
  %94 = add nsw i64 %93, %63, !pdg.inst.id !72
  br label %95, !pdg.inst.id !528

95:                                               ; preds = %._crit_edge1, %87, %92, %74
  %96 = phi i64 [ %64, %74 ], [ %64, %92 ], [ %91, %87 ], [ %64, %._crit_edge1 ], !pdg.inst.id !203
  %97 = phi i64 [ %63, %74 ], [ %94, %92 ], [ %90, %87 ], [ %63, %._crit_edge1 ], !pdg.inst.id !73
  %98 = add nuw nsw i64 %62, 1, !pdg.inst.id !146
  %99 = icmp eq i64 %98, %11, !pdg.inst.id !114
  br i1 %99, label %.loopexit.loopexit, label %61, !prof !576, !pdg.inst.id !129

.loopexit.loopexit:                               ; preds = %95
  %.lcssa5 = phi i64 [ %96, %95 ], !pdg.inst.id !240
  %.lcssa = phi i64 [ %97, %95 ], !pdg.inst.id !46
  br label %.loopexit, !pdg.inst.id !493

.loopexit:                                        ; preds = %.loopexit.loopexit, %.loopexit1
  %100 = phi i64 [ 0, %.loopexit1 ], [ %.lcssa5, %.loopexit.loopexit ], !pdg.inst.id !200
  %101 = phi i64 [ 0, %.loopexit1 ], [ %.lcssa, %.loopexit.loopexit ], !pdg.inst.id !47
  %102 = sitofp i64 %100 to double, !pdg.inst.id !87
  %103 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 18, !pdg.inst.id !85
  %104 = load i64, i64* %103, align 8, !tbaa !575, !pdg.inst.id !41
  %105 = sitofp i64 %104 to double, !pdg.inst.id !35
  %106 = fmul fast double %105, %102, !pdg.inst.id !36
  %107 = sitofp i64 %101 to double, !pdg.inst.id !152
  %108 = fadd fast double %106, %107, !pdg.inst.id !153
  ret double %108, !pdg.inst.id !207

109:                                              ; preds = %16
  store i32 1, i32* @1
  store i64 %17, i64* %5
  store %struct.arc* %9, %struct.arc** %7
  %110 = alloca [6 x i8*]
  %111 = getelementptr inbounds [6 x i8*], [6 x i8*]* %110, i64 0, i64 0
  %112 = bitcast i8** %111 to void (i8*, i8*)**
  store void (i8*, i8*)* @3, void (i8*, i8*)** %112
  %113 = getelementptr inbounds [6 x i8*], [6 x i8*]* %110, i64 0, i64 1
  %114 = bitcast i8** %113 to void (i8*, i8*)**
  store void (i8*, i8*)* @4, void (i8*, i8*)** %114
  %115 = getelementptr inbounds [6 x i8*], [6 x i8*]* %110, i64 0, i64 2
  %116 = bitcast i8** %115 to void (i8*, i8*)**
  store void (i8*, i8*)* @5, void (i8*, i8*)** %116
  %117 = getelementptr inbounds [6 x i8*], [6 x i8*]* %110, i64 0, i64 3
  %118 = bitcast i8** %117 to void (i8*, i8*)**
  store void (i8*, i8*)* @6, void (i8*, i8*)** %118
  %119 = getelementptr inbounds [6 x i8*], [6 x i8*]* %110, i64 0, i64 4
  %120 = bitcast i8** %119 to void (i8*, i8*)**
  store void (i8*, i8*)* @7, void (i8*, i8*)** %120
  %121 = getelementptr inbounds [6 x i8*], [6 x i8*]* %110, i64 0, i64 5
  %122 = bitcast i8** %121 to void (i8*, i8*)**
  store void (i8*, i8*)* @8, void (i8*, i8*)** %122
  %123 = bitcast [6 x i8*]* %110 to i8*
  %124 = alloca [7 x i64]
  %125 = getelementptr inbounds [7 x i64], [7 x i64]* %124, i64 0, i64 0
  store i64 64, i64* %125
  %126 = getelementptr inbounds [7 x i64], [7 x i64]* %124, i64 0, i64 1
  store i64 64, i64* %126
  %127 = getelementptr inbounds [7 x i64], [7 x i64]* %124, i64 0, i64 2
  store i64 16, i64* %127
  %128 = getelementptr inbounds [7 x i64], [7 x i64]* %124, i64 0, i64 3
  store i64 64, i64* %128
  %129 = getelementptr inbounds [7 x i64], [7 x i64]* %124, i64 0, i64 4
  store i64 64, i64* %129
  %130 = getelementptr inbounds [7 x i64], [7 x i64]* %124, i64 0, i64 5
  store i64 16, i64* %130
  %131 = getelementptr inbounds [7 x i64], [7 x i64]* %124, i64 0, i64 6
  store i64 64, i64* %131
  %132 = bitcast [7 x i64]* %124 to i64*
  call void @stageDispatcher(i8* %3, i64* %132, i8* %123, i64 6, i64 7)
  %133 = load i64, i64* %4
  br label %134

134:                                              ; preds = %109
  store i32 0, i32* @1
  br label %.loopexit2.loopexit
}

Parallelizer: Exit
Parallelizer: Start
Parallelizer:  Function = "flow_cost"
Parallelizer:  Loop 2 = "  %54 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 10, !pdg.inst.id !174"
Parallelizer:  Nesting level = 1
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of type 0 of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 6
DOALL:     	  %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214
DOALL:     	  %54 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 10, !pdg.inst.id !174
DOALL:     	  %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DOALL:     	  %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160
DOALL:     	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DOALL:     	  %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DOALL:     External nodes: 2
DOALL:     	  %53 = phi i64 [ %59, %.preheader..preheader_crit_edge ], [ 1, %.preheader.preheader ], !pdg.inst.id !172
DOALL:     	  br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64
DOALL:     Edges: 17
DOALL:     Loop-carried data dependences
DOALL:         br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64 --->   %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214 via variable
DOALL:         br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64 --->   %54 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 10, !pdg.inst.id !174 via variable
DOALL:         store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67 --->   %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66 via memory
DOALL:         br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64 --->   %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66 via variable
DOALL:         br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64 --->   %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160 via variable
DOALL:         br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64 --->   store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67 via variable
DOALL:         store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67 --->   %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161 via memory
DOALL:         br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64 --->   %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161 via variable
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 1
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214
DSWP:       %54 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 10, !pdg.inst.id !174
DSWP:       %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DSWP:       %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160
DSWP:       store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:       %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  Final number of partitions: 1
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214
DSWP:       %54 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 10, !pdg.inst.id !174
DSWP:       %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DSWP:       %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160
DSWP:       store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:       %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  There are 1 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 6
DSWP:     	  %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214
DSWP:     	  %54 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 10, !pdg.inst.id !174
DSWP:     	  %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DSWP:     	  %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160
DSWP:     	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:     	  %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DSWP:     External nodes: 2
DSWP:     	  %53 = phi i64 [ %59, %.preheader..preheader_crit_edge ], [ 1, %.preheader.preheader ], !pdg.inst.id !172
DSWP:     	  br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64
DSWP:     Edges: 17
DSWP:     	From:	  %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DSWP:     	To:	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:     	RAW (must)
DSWP:     	From:	  %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DSWP:     	To:	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:     	WAR (may) from memory 
DSWP:     	From:	  %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DSWP:     	To:	  %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214
DSWP:     	RAW (must)
DSWP:     	From:	  %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DSWP:     	To:	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:     	WAR (may) from memory 
DSWP:     	From:	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:     	To:	  %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DSWP:     	RAW (may) from memory 
DSWP:     	From:	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:     	To:	  %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DSWP:     	RAW (may) from memory 
DSWP:     	From:	  %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214
DSWP:     	To:	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:     	RAW (must)
DSWP:     	From:	  %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160
DSWP:     	To:	  %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DSWP:     	RAW (must)
DSWP:     	From:	  %54 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 10, !pdg.inst.id !174
DSWP:     	To:	  %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64
DSWP:     	To:	  %55 = load i64, i64* %54, align 8, !tbaa !563, !pdg.inst.id !66
DSWP:     	CTRL
DSWP:     	From:	  br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64
DSWP:     	To:	  %57 = load %struct.arc*, %struct.arc** %56, align 8, !tbaa !565, !pdg.inst.id !161
DSWP:     	CTRL
DSWP:     	From:	  br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64
DSWP:     	To:	  store i64 %55, i64* %58, align 8, !tbaa !558, !pdg.inst.id !67
DSWP:     	CTRL
DSWP:     	From:	  br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64
DSWP:     	To:	  %58 = getelementptr inbounds %struct.arc, %struct.arc* %57, i64 0, i32 7, !pdg.inst.id !214
DSWP:     	CTRL
DSWP:     	From:	  %53 = phi i64 [ %59, %.preheader..preheader_crit_edge ], [ 1, %.preheader.preheader ], !pdg.inst.id !172
DSWP:     	To:	  %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %60, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64
DSWP:     	To:	  %56 = getelementptr inbounds %struct.node, %struct.node* %47, i64 %53, i32 6, !pdg.inst.id !160
DSWP:     	CTRL
DSWP:     	....
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 
DSWP:      Pop value queues: 
DSWP:    Queue: 0
DSWP:     Producer:	  %21 = phi i64 [ 0, %16 ], [ %34, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %23 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %21, i32 4, !pdg.inst.id !92
DSWP:    Queue: 1
DSWP:     Producer:	  %21 = phi i64 [ 0, %16 ], [ %34, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %28 = or i64 %21, 1, !pdg.inst.id !58
DSWP:    Queue: 2
DSWP:     Producer:	  %24 = load i16, i16* %23, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     Consumer:	  %25 = icmp eq i16 %24, 2, !pdg.inst.id !229
DSWP:    Queue: 3
DSWP:     Producer:	  %21 = phi i64 [ 0, %16 ], [ %34, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %26 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %21, i32 7, !pdg.inst.id !133
DSWP:    Queue: 4
DSWP:     Producer:	  %28 = or i64 %21, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %29 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %28, i32 4, !pdg.inst.id !61
DSWP:    Queue: 5
DSWP:     Producer:	  %30 = load i16, i16* %29, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     Consumer:	  %31 = icmp eq i16 %30, 2, !pdg.inst.id !89
DSWP:    Queue: 6
DSWP:     Producer:	  %28 = or i64 %21, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %32 = getelementptr inbounds %struct.arc, %struct.arc* %9, i64 %28, i32 7, !pdg.inst.id !59
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %49 = load i64, i64* %48, align 8, !tbaa !562, !pdg.inst.id !178
DSWP:    Pre loop env 2, producer:	  %47 = load %struct.node*, %struct.node** %46, align 8, !tbaa !561, !pdg.inst.id !191
DSWP:  Create 1 pipeline stages
Pipeline stage 0:

define void @9(i8*, i8*) {
  %3 = bitcast i8* %0 to [16 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 0
  %6 = load i64, i64* %5
  %7 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 8
  %8 = bitcast i64* %7 to %struct.node**
  %9 = load %struct.node*, %struct.node** %8
  br label %12

10:                                               ; preds = %11
  ret void

11:                                               ; preds = %12
  br label %10

12:                                               ; preds = %2, %21
  %13 = phi i64 [ %19, %21 ], [ 1, %2 ], !pdg.inst.id !30
  %14 = getelementptr inbounds %struct.node, %struct.node* %9, i64 %13, i32 10, !pdg.inst.id !31
  %15 = load i64, i64* %14, align 8, !tbaa !32, !pdg.inst.id !39
  %16 = getelementptr inbounds %struct.node, %struct.node* %9, i64 %13, i32 6, !pdg.inst.id !40
  %17 = load %struct.arc*, %struct.arc** %16, align 8, !tbaa !41, !pdg.inst.id !42
  %18 = getelementptr inbounds %struct.arc, %struct.arc* %17, i64 0, i32 7, !pdg.inst.id !43
  store i64 %15, i64* %18, align 8, !tbaa !44, !pdg.inst.id !47
  %19 = add nuw i64 %13, 1, !pdg.inst.id !48
  %20 = icmp slt i64 %6, %19, !pdg.inst.id !49
  br i1 %20, label %11, label %21, !prof !50, !pdg.inst.id !51

21:                                               ; preds = %12
  br label %12, !pdg.inst.id !52
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local double @flow_cost(%struct.network* nocapture readonly) local_unnamed_addr #2 !prof !30 !pdg.args.id !31 !pdg.edges !33 {
  %2 = alloca [16 x i64]
  %3 = bitcast [16 x i64]* %2 to i8*
  %4 = getelementptr inbounds [16 x i64], [16 x i64]* %2, i64 0, i64 0
  %5 = getelementptr inbounds [16 x i64], [16 x i64]* %2, i64 0, i64 8
  %6 = bitcast i64* %5 to %struct.node**
  %7 = alloca [24 x i64]
  %8 = bitcast [24 x i64]* %7 to i8*
  %9 = getelementptr inbounds [24 x i64], [24 x i64]* %7, i64 0, i64 0
  %10 = getelementptr inbounds [24 x i64], [24 x i64]* %7, i64 0, i64 8
  %11 = getelementptr inbounds [24 x i64], [24 x i64]* %7, i64 0, i64 16
  %12 = bitcast i64* %11 to %struct.arc**
  %13 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 23, !pdg.inst.id !75
  %14 = load %struct.arc*, %struct.arc** %13, align 8, !tbaa !544, !pdg.inst.id !127
  %15 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 5, !pdg.inst.id !77
  %16 = load i64, i64* %15, align 8, !tbaa !551, !pdg.inst.id !108
  %17 = icmp sgt i64 %16, 0, !pdg.inst.id !116
  br i1 %17, label %18, label %50, !prof !552, !pdg.inst.id !211

18:                                               ; preds = %1
  %19 = and i64 %16, 1, !pdg.inst.id !112
  %20 = icmp eq i64 %16, 1, !pdg.inst.id !97
  br i1 %20, label %.loopexit2, label %21, !prof !553, !pdg.inst.id !98

21:                                               ; preds = %18
  %22 = sub i64 %16, %19, !pdg.inst.id !110
  %23 = load i32, i32* @1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %116, label %25

25:                                               ; preds = %21, %._crit_edge
  %26 = phi i64 [ 0, %21 ], [ %39, %._crit_edge ], !pdg.inst.id !223
  %27 = phi i64 [ %22, %21 ], [ %40, %._crit_edge ], !pdg.inst.id !131
  %28 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %26, i32 4, !pdg.inst.id !92
  %29 = load i16, i16* %28, align 8, !tbaa !554, !pdg.inst.id !93
  %30 = icmp eq i16 %29, 2, !pdg.inst.id !229
  %31 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %26, i32 7, !pdg.inst.id !133
  %32 = zext i1 %30 to i64, !pdg.inst.id !230
  store i64 %32, i64* %31, align 8, !tbaa !558, !pdg.inst.id !134
  %33 = or i64 %26, 1, !pdg.inst.id !58
  %34 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %33, i32 4, !pdg.inst.id !61
  %35 = load i16, i16* %34, align 8, !tbaa !554, !pdg.inst.id !163
  %36 = icmp eq i16 %35, 2, !pdg.inst.id !89
  %37 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %33, i32 7, !pdg.inst.id !59
  %38 = zext i1 %36 to i64, !pdg.inst.id !90
  store i64 %38, i64* %37, align 8, !tbaa !558, !pdg.inst.id !166
  %39 = add nuw nsw i64 %26, 2, !pdg.inst.id !221
  %40 = add i64 %27, -2, !pdg.inst.id !168
  %41 = icmp eq i64 %40, 0, !pdg.inst.id !169
  br i1 %41, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232

._crit_edge:                                      ; preds = %25
  br label %25, !pdg.inst.id !439

.loopexit2.loopexit:                              ; preds = %141, %25
  %.lcssa6 = phi i64 [ %39, %25 ], [ %140, %141 ], !pdg.inst.id !49
  br label %.loopexit2, !pdg.inst.id !442

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %18
  %42 = phi i64 [ 0, %18 ], [ %.lcssa6, %.loopexit2.loopexit ], !pdg.inst.id !50
  %43 = icmp eq i64 %19, 0, !pdg.inst.id !100
  br i1 %43, label %50, label %44, !prof !560, !pdg.inst.id !101

44:                                               ; preds = %.loopexit2
  %45 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %42, i32 4, !pdg.inst.id !118
  %46 = load i16, i16* %45, align 8, !tbaa !554, !pdg.inst.id !227
  %47 = icmp eq i16 %46, 2, !pdg.inst.id !122
  %48 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %42, i32 7, !pdg.inst.id !120
  %49 = zext i1 %47 to i64, !pdg.inst.id !55
  store i64 %49, i64* %48, align 8, !tbaa !558, !pdg.inst.id !56
  br label %50, !pdg.inst.id !340

50:                                               ; preds = %44, %.loopexit2, %1
  %51 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 21, !pdg.inst.id !79
  %52 = load %struct.node*, %struct.node** %51, align 8, !tbaa !561, !pdg.inst.id !191
  %53 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 2, !pdg.inst.id !81
  %54 = load i64, i64* %53, align 8, !tbaa !562, !pdg.inst.id !178
  %55 = icmp slt i64 %54, 1, !pdg.inst.id !181
  br i1 %55, label %.loopexit1, label %.preheader.preheader, !prof !553, !pdg.inst.id !193

.preheader.preheader:                             ; preds = %50
  %56 = load i32, i32* @2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %142, label %.preheader

.loopexit1.loopexit:                              ; preds = %156, %.preheader
  br label %.loopexit1, !pdg.inst.id !455

.loopexit1:                                       ; preds = %.loopexit1.loopexit, %50
  br i1 %17, label %58, label %.loopexit, !prof !552, !pdg.inst.id !209

58:                                               ; preds = %.loopexit1
  %59 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 18, !pdg.inst.id !83
  br label %68, !pdg.inst.id !458

.preheader:                                       ; preds = %.preheader.preheader, %.preheader..preheader_crit_edge
  %60 = phi i64 [ %66, %.preheader..preheader_crit_edge ], [ 1, %.preheader.preheader ], !pdg.inst.id !172
  %61 = getelementptr inbounds %struct.node, %struct.node* %52, i64 %60, i32 10, !pdg.inst.id !174
  %62 = load i64, i64* %61, align 8, !tbaa !563, !pdg.inst.id !66
  %63 = getelementptr inbounds %struct.node, %struct.node* %52, i64 %60, i32 6, !pdg.inst.id !160
  %64 = load %struct.arc*, %struct.arc** %63, align 8, !tbaa !565, !pdg.inst.id !161
  %65 = getelementptr inbounds %struct.arc, %struct.arc* %64, i64 0, i32 7, !pdg.inst.id !214
  store i64 %62, i64* %65, align 8, !tbaa !558, !pdg.inst.id !67
  %66 = add nuw i64 %60, 1, !pdg.inst.id !176
  %67 = icmp slt i64 %54, %66, !pdg.inst.id !63
  br i1 %67, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64

.preheader..preheader_crit_edge:                  ; preds = %.preheader
  br label %.preheader, !pdg.inst.id !480

68:                                               ; preds = %102, %58
  %69 = phi i64 [ 0, %58 ], [ %105, %102 ], !pdg.inst.id !136
  %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
  %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
  %72 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 7, !pdg.inst.id !144
  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
  br i1 %74, label %._crit_edge1, label %75, !prof !567, !pdg.inst.id !274

._crit_edge1:                                     ; preds = %68
  br label %102, !pdg.inst.id !498

75:                                               ; preds = %68
  %76 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 2, !pdg.inst.id !142
  %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
  %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
  %80 = icmp slt i32 %79, 0, !pdg.inst.id !106
  br i1 %80, label %81, label %90, !prof !570, !pdg.inst.id !198

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 3, !pdg.inst.id !138
  %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
  %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
  %85 = load i32, i32* %84, align 8, !tbaa !569, !pdg.inst.id !53
  %86 = icmp sgt i32 %85, 0, !pdg.inst.id !237
  br i1 %86, label %102, label %87, !prof !572, !pdg.inst.id !246

87:                                               ; preds = %81
  %88 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !124
  %89 = load i64, i64* %88, align 8, !tbaa !573, !pdg.inst.id !125
  br label %99, !pdg.inst.id !514

90:                                               ; preds = %75
  %91 = icmp eq i32 %79, 0, !pdg.inst.id !104
  %92 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !140
  %93 = load i64, i64* %92, align 8, !tbaa !573, !pdg.inst.id !188
  br i1 %91, label %94, label %99, !prof !574, !pdg.inst.id !243

94:                                               ; preds = %90
  %95 = load i64, i64* %59, align 8, !tbaa !575, !pdg.inst.id !95
  %96 = add i64 %93, %70, !pdg.inst.id !69
  %97 = sub i64 %96, %95, !pdg.inst.id !70
  %98 = add nsw i64 %71, 1, !pdg.inst.id !205
  br label %102, !pdg.inst.id !524

99:                                               ; preds = %87, %90
  %100 = phi i64 [ %89, %87 ], [ %93, %90 ], !pdg.inst.id !156
  %101 = add nsw i64 %100, %70, !pdg.inst.id !72
  br label %102, !pdg.inst.id !528

102:                                              ; preds = %._crit_edge1, %94, %99, %81
  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
  %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
  %105 = add nuw nsw i64 %69, 1, !pdg.inst.id !146
  %106 = icmp eq i64 %105, %16, !pdg.inst.id !114
  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129

.loopexit.loopexit:                               ; preds = %102
  %.lcssa5 = phi i64 [ %103, %102 ], !pdg.inst.id !240
  %.lcssa = phi i64 [ %104, %102 ], !pdg.inst.id !46
  br label %.loopexit, !pdg.inst.id !493

.loopexit:                                        ; preds = %.loopexit.loopexit, %.loopexit1
  %107 = phi i64 [ 0, %.loopexit1 ], [ %.lcssa5, %.loopexit.loopexit ], !pdg.inst.id !200
  %108 = phi i64 [ 0, %.loopexit1 ], [ %.lcssa, %.loopexit.loopexit ], !pdg.inst.id !47
  %109 = sitofp i64 %107 to double, !pdg.inst.id !87
  %110 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 18, !pdg.inst.id !85
  %111 = load i64, i64* %110, align 8, !tbaa !575, !pdg.inst.id !41
  %112 = sitofp i64 %111 to double, !pdg.inst.id !35
  %113 = fmul fast double %112, %109, !pdg.inst.id !36
  %114 = sitofp i64 %108 to double, !pdg.inst.id !152
  %115 = fadd fast double %113, %114, !pdg.inst.id !153
  ret double %115, !pdg.inst.id !207

116:                                              ; preds = %21
  store i32 1, i32* @1
  store i64 %22, i64* %10
  store %struct.arc* %14, %struct.arc** %12
  %117 = alloca [6 x i8*]
  %118 = getelementptr inbounds [6 x i8*], [6 x i8*]* %117, i64 0, i64 0
  %119 = bitcast i8** %118 to void (i8*, i8*)**
  store void (i8*, i8*)* @4, void (i8*, i8*)** %119
  %120 = getelementptr inbounds [6 x i8*], [6 x i8*]* %117, i64 0, i64 1
  %121 = bitcast i8** %120 to void (i8*, i8*)**
  store void (i8*, i8*)* @5, void (i8*, i8*)** %121
  %122 = getelementptr inbounds [6 x i8*], [6 x i8*]* %117, i64 0, i64 2
  %123 = bitcast i8** %122 to void (i8*, i8*)**
  store void (i8*, i8*)* @6, void (i8*, i8*)** %123
  %124 = getelementptr inbounds [6 x i8*], [6 x i8*]* %117, i64 0, i64 3
  %125 = bitcast i8** %124 to void (i8*, i8*)**
  store void (i8*, i8*)* @7, void (i8*, i8*)** %125
  %126 = getelementptr inbounds [6 x i8*], [6 x i8*]* %117, i64 0, i64 4
  %127 = bitcast i8** %126 to void (i8*, i8*)**
  store void (i8*, i8*)* @8, void (i8*, i8*)** %127
  %128 = getelementptr inbounds [6 x i8*], [6 x i8*]* %117, i64 0, i64 5
  %129 = bitcast i8** %128 to void (i8*, i8*)**
  store void (i8*, i8*)* @9, void (i8*, i8*)** %129
  %130 = bitcast [6 x i8*]* %117 to i8*
  %131 = alloca [7 x i64]
  %132 = getelementptr inbounds [7 x i64], [7 x i64]* %131, i64 0, i64 0
  store i64 64, i64* %132
  %133 = getelementptr inbounds [7 x i64], [7 x i64]* %131, i64 0, i64 1
  store i64 64, i64* %133
  %134 = getelementptr inbounds [7 x i64], [7 x i64]* %131, i64 0, i64 2
  store i64 16, i64* %134
  %135 = getelementptr inbounds [7 x i64], [7 x i64]* %131, i64 0, i64 3
  store i64 64, i64* %135
  %136 = getelementptr inbounds [7 x i64], [7 x i64]* %131, i64 0, i64 4
  store i64 64, i64* %136
  %137 = getelementptr inbounds [7 x i64], [7 x i64]* %131, i64 0, i64 5
  store i64 16, i64* %137
  %138 = getelementptr inbounds [7 x i64], [7 x i64]* %131, i64 0, i64 6
  store i64 64, i64* %138
  %139 = bitcast [7 x i64]* %131 to i64*
  call void @stageDispatcher(i8* %8, i64* %139, i8* %130, i64 6, i64 7)
  %140 = load i64, i64* %9
  br label %141

141:                                              ; preds = %116
  store i32 0, i32* @1
  br label %.loopexit2.loopexit

142:                                              ; preds = %.preheader.preheader
  store i32 1, i32* @2
  store i64 %54, i64* %4
  store %struct.node* %52, %struct.node** %6
  %143 = alloca [1 x i8*]
  %144 = getelementptr inbounds [1 x i8*], [1 x i8*]* %143, i64 0, i64 0
  %145 = bitcast i8** %144 to void (i8*, i8*)**
  store void (i8*, i8*)* @10, void (i8*, i8*)** %145
  %146 = bitcast [1 x i8*]* %143 to i8*
  %147 = alloca [7 x i64]
  %148 = getelementptr inbounds [7 x i64], [7 x i64]* %147, i64 0, i64 0
  store i64 64, i64* %148
  %149 = getelementptr inbounds [7 x i64], [7 x i64]* %147, i64 0, i64 1
  store i64 64, i64* %149
  %150 = getelementptr inbounds [7 x i64], [7 x i64]* %147, i64 0, i64 2
  store i64 16, i64* %150
  %151 = getelementptr inbounds [7 x i64], [7 x i64]* %147, i64 0, i64 3
  store i64 64, i64* %151
  %152 = getelementptr inbounds [7 x i64], [7 x i64]* %147, i64 0, i64 4
  store i64 64, i64* %152
  %153 = getelementptr inbounds [7 x i64], [7 x i64]* %147, i64 0, i64 5
  store i64 16, i64* %153
  %154 = getelementptr inbounds [7 x i64], [7 x i64]* %147, i64 0, i64 6
  store i64 64, i64* %154
  %155 = bitcast [7 x i64]* %147 to i64*
  call void @stageDispatcher(i8* %3, i64* %155, i8* %146, i64 1, i64 7)
  br label %156

156:                                              ; preds = %142
  store i32 0, i32* @2
  br label %.loopexit1.loopexit
}

Parallelizer: Exit
Parallelizer: Start
Parallelizer:  Function = "flow_cost"
Parallelizer:  Loop 3 = "  %72 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 7, !pdg.inst.id !144"
Parallelizer:  Nesting level = 1
DOALL: Checking if the loop is DOALL
DOALL:   Some post environment value is not reducable
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 8
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %100 = phi i64 [ %89, %87 ], [ %93, %90 ], !pdg.inst.id !156
DSWP:       %96 = add i64 %93, %70, !pdg.inst.id !69
DSWP:       %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:       %92 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !140
DSWP:       %101 = add nsw i64 %100, %70, !pdg.inst.id !72
DSWP:       %93 = load i64, i64* %92, align 8, !tbaa !573, !pdg.inst.id !188
DSWP:       %97 = sub i64 %96, %95, !pdg.inst.id !70
DSWP:       %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:       %88 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !124
DSWP:       %89 = load i64, i64* %88, align 8, !tbaa !573, !pdg.inst.id !125
DSWP:   SCC: 1 Internal nodes:
DSWP:       %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:       %98 = add nsw i64 %71, 1, !pdg.inst.id !205
DSWP:       %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:   SCC: 2 Internal nodes:
DSWP:       %72 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 7, !pdg.inst.id !144
DSWP:       %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:   SCC: 3 Internal nodes:
DSWP:       %76 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 2, !pdg.inst.id !142
DSWP:       %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:   SCC: 4 Internal nodes:
DSWP:       %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:       %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:   SCC: 5 Internal nodes:
DSWP:       %95 = load i64, i64* %59, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:   SCC: 6 Internal nodes:
DSWP:       %82 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 3, !pdg.inst.id !138
DSWP:       %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:   SCC: 7 Internal nodes:
DSWP:       %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:       %85 = load i32, i32* %84, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: Set:  7; Set:  2; Set:  4; Set:  5; 
DSWP:   Set:  1
DSWP:    Children: 
DSWP:    Parents: Set:  2; Set:  4; 
DSWP:   Set:  2
DSWP:    Children: Set:  6; Set:  7; Set:  0; Set:  4; Set:  1; Set:  5; Set:  3; 
DSWP:    Parents: 
DSWP:   Set:  3
DSWP:    Children: Set:  4; 
DSWP:    Parents: Set:  2; 
DSWP:   Set:  4
DSWP:    Children: Set:  6; Set:  7; Set:  0; Set:  1; Set:  5; 
DSWP:    Parents: Set:  2; Set:  3; 
DSWP:   Set:  5
DSWP:    Children: Set:  0; 
DSWP:    Parents: Set:  2; Set:  4; 
DSWP:   Set:  6
DSWP:    Children: Set:  7; 
DSWP:    Parents: Set:  2; Set:  4; 
DSWP:   Set:  7
DSWP:    Children: Set:  0; 
DSWP:    Parents: Set:  6; Set:  2; Set:  4; 
DSWP:  Final number of partitions: 8
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %100 = phi i64 [ %89, %87 ], [ %93, %90 ], !pdg.inst.id !156
DSWP:       %96 = add i64 %93, %70, !pdg.inst.id !69
DSWP:       %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:       %92 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !140
DSWP:       %101 = add nsw i64 %100, %70, !pdg.inst.id !72
DSWP:       %93 = load i64, i64* %92, align 8, !tbaa !573, !pdg.inst.id !188
DSWP:       %97 = sub i64 %96, %95, !pdg.inst.id !70
DSWP:       %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:       %88 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !124
DSWP:       %89 = load i64, i64* %88, align 8, !tbaa !573, !pdg.inst.id !125
DSWP:   SCC: 1 Internal nodes:
DSWP:       %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:       %98 = add nsw i64 %71, 1, !pdg.inst.id !205
DSWP:       %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:   SCC: 2 Internal nodes:
DSWP:       %72 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 7, !pdg.inst.id !144
DSWP:       %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:   SCC: 3 Internal nodes:
DSWP:       %76 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 2, !pdg.inst.id !142
DSWP:       %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:   SCC: 4 Internal nodes:
DSWP:       %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:       %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:   SCC: 5 Internal nodes:
DSWP:       %95 = load i64, i64* %59, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:   SCC: 6 Internal nodes:
DSWP:       %82 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 3, !pdg.inst.id !138
DSWP:       %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:   SCC: 7 Internal nodes:
DSWP:       %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:       %85 = load i32, i32* %84, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: Set:  7; Set:  2; Set:  4; Set:  5; 
DSWP:   Set:  1
DSWP:    Children: 
DSWP:    Parents: Set:  2; Set:  4; 
DSWP:   Set:  2
DSWP:    Children: Set:  6; Set:  7; Set:  0; Set:  4; Set:  1; Set:  5; Set:  3; 
DSWP:    Parents: 
DSWP:   Set:  3
DSWP:    Children: Set:  4; 
DSWP:    Parents: Set:  2; 
DSWP:   Set:  4
DSWP:    Children: Set:  6; Set:  7; Set:  0; Set:  1; Set:  5; 
DSWP:    Parents: Set:  2; Set:  3; 
DSWP:   Set:  5
DSWP:    Children: Set:  0; 
DSWP:    Parents: Set:  2; Set:  4; 
DSWP:   Set:  6
DSWP:    Children: Set:  7; 
DSWP:    Parents: Set:  2; Set:  4; 
DSWP:   Set:  7
DSWP:    Children: Set:  0; 
DSWP:    Parents: Set:  6; Set:  2; Set:  4; 
DSWP:  There are 8 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 2
DSWP:     	  %72 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 7, !pdg.inst.id !144
DSWP:     	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     External nodes: 3
DSWP:     	  %69 = phi i64 [ 0, %58 ], [ %105, %102 ], !pdg.inst.id !136
DSWP:     	  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129
DSWP:     	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:     Edges: 5
DSWP:     	From:	  %72 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 7, !pdg.inst.id !144
DSWP:     	To:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     	RAW (must)
DSWP:     	From:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     	To:	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129
DSWP:     	To:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     	CTRL
DSWP:     	From:	  %69 = phi i64 [ 0, %58 ], [ %105, %102 ], !pdg.inst.id !136
DSWP:     	To:	  %72 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 7, !pdg.inst.id !144
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129
DSWP:     	To:	  %72 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 7, !pdg.inst.id !144
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 1
DSWP:     Internal nodes: 2
DSWP:     	  %76 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 2, !pdg.inst.id !142
DSWP:     	  %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     External nodes: 3
DSWP:     	  %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:     	  %69 = phi i64 [ 0, %58 ], [ %105, %102 ], !pdg.inst.id !136
DSWP:     	  br i1 %74, label %._crit_edge1, label %75, !prof !567, !pdg.inst.id !274
DSWP:     Edges: 5
DSWP:     	From:	  %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     	To:	  %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:     	RAW (must)
DSWP:     	From:	  %76 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 2, !pdg.inst.id !142
DSWP:     	To:	  %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %74, label %._crit_edge1, label %75, !prof !567, !pdg.inst.id !274
DSWP:     	To:	  %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     	CTRL
DSWP:     	From:	  %69 = phi i64 [ 0, %58 ], [ %105, %102 ], !pdg.inst.id !136
DSWP:     	To:	  %76 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 2, !pdg.inst.id !142
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %74, label %._crit_edge1, label %75, !prof !567, !pdg.inst.id !274
DSWP:     	To:	  %76 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 2, !pdg.inst.id !142
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 2
DSWP:     Internal nodes: 2
DSWP:     	  %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:     	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     External nodes: 4
DSWP:     	  %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     	  %91 = icmp eq i32 %79, 0, !pdg.inst.id !104
DSWP:     	  %80 = icmp slt i32 %79, 0, !pdg.inst.id !106
DSWP:     	  br i1 %74, label %._crit_edge1, label %75, !prof !567, !pdg.inst.id !274
DSWP:     Edges: 6
DSWP:     	From:	  %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:     	To:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     	RAW (must)
DSWP:     	From:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     	To:	  %91 = icmp eq i32 %79, 0, !pdg.inst.id !104
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %74, label %._crit_edge1, label %75, !prof !567, !pdg.inst.id !274
DSWP:     	To:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     	CTRL
DSWP:     	From:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     	To:	  %80 = icmp slt i32 %79, 0, !pdg.inst.id !106
DSWP:     	RAW (must)
DSWP:     	From:	  %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     	To:	  %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %74, label %._crit_edge1, label %75, !prof !567, !pdg.inst.id !274
DSWP:     	To:	  %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 3
DSWP:     Internal nodes: 2
DSWP:     	  %82 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 3, !pdg.inst.id !138
DSWP:     	  %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     External nodes: 3
DSWP:     	  %69 = phi i64 [ 0, %58 ], [ %105, %102 ], !pdg.inst.id !136
DSWP:     	  br i1 %80, label %81, label %90, !prof !570, !pdg.inst.id !198
DSWP:     	  %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:     Edges: 5
DSWP:     	From:	  %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     	To:	  %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:     	RAW (must)
DSWP:     	From:	  %82 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 3, !pdg.inst.id !138
DSWP:     	To:	  %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %80, label %81, label %90, !prof !570, !pdg.inst.id !198
DSWP:     	To:	  %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     	CTRL
DSWP:     	From:	  %69 = phi i64 [ 0, %58 ], [ %105, %102 ], !pdg.inst.id !136
DSWP:     	To:	  %82 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 3, !pdg.inst.id !138
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %80, label %81, label %90, !prof !570, !pdg.inst.id !198
DSWP:     	To:	  %82 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 3, !pdg.inst.id !138
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 4
DSWP:     Internal nodes: 3
DSWP:     	  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:     	  %98 = add nsw i64 %71, 1, !pdg.inst.id !205
DSWP:     	  %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:     External nodes: 2
DSWP:     	  br i1 %91, label %94, label %99, !prof !574, !pdg.inst.id !243
DSWP:     	  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129
DSWP:     Edges: 9
DSWP:     	From:	  %98 = add nsw i64 %71, 1, !pdg.inst.id !205
DSWP:     	To:	  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:     	RAW (must)
DSWP:     	From:	  %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:     	To:	  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:     	RAW (must)
DSWP:     	From:	  %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:     	To:	  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:     	RAW (must)
DSWP:     	From:	  %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:     	To:	  %98 = add nsw i64 %71, 1, !pdg.inst.id !205
DSWP:     	RAW (must)
DSWP:     	From:	  %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:     	To:	  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:     	RAW (must)
DSWP:     	From:	  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:     	To:	  %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %91, label %94, label %99, !prof !574, !pdg.inst.id !243
DSWP:     	To:	  %98 = add nsw i64 %71, 1, !pdg.inst.id !205
DSWP:     	CTRL
DSWP:     	From:	  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129
DSWP:     	To:	  %71 = phi i64 [ 0, %58 ], [ %103, %102 ], !pdg.inst.id !202
DSWP:     	CTRL
DSWP:     	From:	  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129
DSWP:     	To:	  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 5
DSWP:     Internal nodes: 1
DSWP:     	  %95 = load i64, i64* %59, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     External nodes: 2
DSWP:     	  br i1 %91, label %94, label %99, !prof !574, !pdg.inst.id !243
DSWP:     	  %97 = sub i64 %96, %95, !pdg.inst.id !70
DSWP:     Edges: 2
DSWP:     	From:	  %95 = load i64, i64* %59, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     	To:	  %97 = sub i64 %96, %95, !pdg.inst.id !70
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %91, label %94, label %99, !prof !574, !pdg.inst.id !243
DSWP:     	To:	  %95 = load i64, i64* %59, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 6
DSWP:     Internal nodes: 2
DSWP:     	  %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:     	  %85 = load i32, i32* %84, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     External nodes: 3
DSWP:     	  %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     	  br i1 %80, label %81, label %90, !prof !570, !pdg.inst.id !198
DSWP:     	  %86 = icmp sgt i32 %85, 0, !pdg.inst.id !237
DSWP:     Edges: 5
DSWP:     	From:	  %85 = load i32, i32* %84, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     	To:	  %86 = icmp sgt i32 %85, 0, !pdg.inst.id !237
DSWP:     	RAW (must)
DSWP:     	From:	  %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:     	To:	  %85 = load i32, i32* %84, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %80, label %81, label %90, !prof !570, !pdg.inst.id !198
DSWP:     	To:	  %85 = load i32, i32* %84, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     	CTRL
DSWP:     	From:	  %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     	To:	  %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %80, label %81, label %90, !prof !570, !pdg.inst.id !198
DSWP:     	To:	  %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:     	CTRL
DSWP:    
DSWP:    Stage: 7
DSWP:     Internal nodes: 10
DSWP:     	  %100 = phi i64 [ %89, %87 ], [ %93, %90 ], !pdg.inst.id !156
DSWP:     	  %96 = add i64 %93, %70, !pdg.inst.id !69
DSWP:     	  %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:     	  %92 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !140
DSWP:     	  %101 = add nsw i64 %100, %70, !pdg.inst.id !72
DSWP:     	  %93 = load i64, i64* %92, align 8, !tbaa !573, !pdg.inst.id !188
DSWP:     	  %97 = sub i64 %96, %95, !pdg.inst.id !70
DSWP:     	  %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:     	  %88 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !124
DSWP:     	  %89 = load i64, i64* %88, align 8, !tbaa !573, !pdg.inst.id !125
DSWP:     External nodes: 6
DSWP:     	  br i1 %80, label %81, label %90, !prof !570, !pdg.inst.id !198
DSWP:     	  br i1 %91, label %94, label %99, !prof !574, !pdg.inst.id !243
DSWP:     	  %95 = load i64, i64* %59, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     	  %69 = phi i64 [ 0, %58 ], [ %105, %102 ], !pdg.inst.id !136
DSWP:     	  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129
DSWP:     	  br i1 %86, label %102, label %87, !prof !572, !pdg.inst.id !246
DSWP:     Edges: 29
DSWP:     	From:	  %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:     	To:	  %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:     	RAW (must)
DSWP:     	From:	  %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:     	To:	  %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:     	RAW (must)
DSWP:     	From:	  %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:     	To:	  %96 = add i64 %93, %70, !pdg.inst.id !69
DSWP:     	RAW (must)
DSWP:     	From:	  %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:     	To:	  %101 = add nsw i64 %100, %70, !pdg.inst.id !72
DSWP:     	RAW (must)
DSWP:     	From:	  %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:     	To:	  %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:     	RAW (must)
DSWP:     	From:	  %88 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !124
DSWP:     	To:	  %89 = load i64, i64* %88, align 8, !tbaa !573, !pdg.inst.id !125
DSWP:     	RAW (must)
DSWP:     	From:	  %89 = load i64, i64* %88, align 8, !tbaa !573, !pdg.inst.id !125
DSWP:     	To:	  %100 = phi i64 [ %89, %87 ], [ %93, %90 ], !pdg.inst.id !156
DSWP:     	RAW (must)
DSWP:     	From:	  %92 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %69, i32 1, !pdg.inst.id !140
DSWP:     	To:	  %93 = load i64, i64* %92, align 8, !tbaa !573, !pdg.inst.id !188
DSWP:     	RAW (must)
DSWP:     	From:	  %93 = load i64, i64* %92, align 8, !tbaa !573, !pdg.inst.id !188
DSWP:     	To:	  %96 = add i64 %93, %70, !pdg.inst.id !69
DSWP:     	RAW (must)
DSWP:     	From:	  %93 = load i64, i64* %92, align 8, !tbaa !573, !pdg.inst.id !188
DSWP:     	To:	  %100 = phi i64 [ %89, %87 ], [ %93, %90 ], !pdg.inst.id !156
DSWP:     	RAW (must)
DSWP:     	From:	  %97 = sub i64 %96, %95, !pdg.inst.id !70
DSWP:     	To:	  %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:     	RAW (must)
DSWP:     	From:	  %96 = add i64 %93, %70, !pdg.inst.id !69
DSWP:     	To:	  %97 = sub i64 %96, %95, !pdg.inst.id !70
DSWP:     	RAW (must)
DSWP:     	From:	  %101 = add nsw i64 %100, %70, !pdg.inst.id !72
DSWP:     	To:	  %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:     	RAW (must)
DSWP:     	From:	  %100 = phi i64 [ %89, %87 ], [ %93, %90 ], !pdg.inst.id !156
DSWP:     	To:	  %101 = add nsw i64 %100, %70, !pdg.inst.id !72
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %106, label %.loopexit.loopexit, label %68, !prof !576, !pdg.inst.id !129
DSWP:     	To:	  %70 = phi i64 [ 0, %58 ], [ %104, %102 ], !pdg.inst.id !186
DSWP:     	CTRL
DSWP:     	....
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 7 8 11 13 15 17 21 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 9 
DSWP:      Pop value queues: 7 
DSWP:    Stage: 2
DSWP:      Push value queues: 10 12 14 16 20 
DSWP:      Pop value queues: 8 9 
DSWP:    Stage: 3
DSWP:      Push value queues: 18 
DSWP:      Pop value queues: 10 11 
DSWP:    Stage: 4
DSWP:      Push value queues: 
DSWP:      Pop value queues: 12 13 
DSWP:    Stage: 5
DSWP:      Push value queues: 22 
DSWP:      Pop value queues: 14 15 
DSWP:    Stage: 6
DSWP:      Push value queues: 19 
DSWP:      Pop value queues: 16 17 18 
DSWP:    Stage: 7
DSWP:      Push value queues: 
DSWP:      Pop value queues: 19 20 21 22 
DSWP:    Queue: 0
DSWP:     Producer:	  %26 = phi i64 [ 0, %21 ], [ %39, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %28 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %26, i32 4, !pdg.inst.id !92
DSWP:    Queue: 1
DSWP:     Producer:	  %26 = phi i64 [ 0, %21 ], [ %39, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %33 = or i64 %26, 1, !pdg.inst.id !58
DSWP:    Queue: 2
DSWP:     Producer:	  %29 = load i16, i16* %28, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     Consumer:	  %30 = icmp eq i16 %29, 2, !pdg.inst.id !229
DSWP:    Queue: 3
DSWP:     Producer:	  %26 = phi i64 [ 0, %21 ], [ %39, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %31 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %26, i32 7, !pdg.inst.id !133
DSWP:    Queue: 4
DSWP:     Producer:	  %33 = or i64 %26, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %34 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %33, i32 4, !pdg.inst.id !61
DSWP:    Queue: 5
DSWP:     Producer:	  %35 = load i16, i16* %34, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     Consumer:	  %36 = icmp eq i16 %35, 2, !pdg.inst.id !89
DSWP:    Queue: 6
DSWP:     Producer:	  %33 = or i64 %26, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %37 = getelementptr inbounds %struct.arc, %struct.arc* %14, i64 %33, i32 7, !pdg.inst.id !59
DSWP:    Queue: 7
DSWP:     Producer:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:    Queue: 8
DSWP:     Producer:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:    Queue: 9
DSWP:     Producer:	  %77 = load %struct.node*, %struct.node** %76, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     Consumer:	  %78 = getelementptr inbounds %struct.node, %struct.node* %77, i64 0, i32 12, !pdg.inst.id !148
DSWP:    Queue: 10
DSWP:     Producer:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %80 = icmp slt i32 %79, 0, !pdg.inst.id !106
DSWP:    Queue: 11
DSWP:     Producer:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:    Queue: 12
DSWP:     Producer:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %80 = icmp slt i32 %79, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %91 = icmp eq i32 %79, 0, !pdg.inst.id !104
DSWP:    Queue: 13
DSWP:     Producer:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:    Queue: 14
DSWP:     Producer:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %80 = icmp slt i32 %79, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %91 = icmp eq i32 %79, 0, !pdg.inst.id !104
DSWP:    Queue: 15
DSWP:     Producer:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:    Queue: 16
DSWP:     Producer:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %80 = icmp slt i32 %79, 0, !pdg.inst.id !106
DSWP:    Queue: 17
DSWP:     Producer:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:    Queue: 18
DSWP:     Producer:	  %83 = load %struct.node*, %struct.node** %82, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     Consumer:	  %84 = getelementptr inbounds %struct.node, %struct.node* %83, i64 0, i32 12, !pdg.inst.id !52
DSWP:    Queue: 19
DSWP:     Producer:	  %85 = load i32, i32* %84, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     Consumer:	  %86 = icmp sgt i32 %85, 0, !pdg.inst.id !237
DSWP:    Queue: 20
DSWP:     Producer:	  %79 = load i32, i32* %78, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %80 = icmp slt i32 %79, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %91 = icmp eq i32 %79, 0, !pdg.inst.id !104
DSWP:    Queue: 21
DSWP:     Producer:	  %73 = load i64, i64* %72, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %74 = icmp eq i64 %73, 0, !pdg.inst.id !44
DSWP:    Queue: 22
DSWP:     Producer:	  %95 = load i64, i64* %59, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     Consumer:	  %97 = sub i64 %96, %95, !pdg.inst.id !70
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %59 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 18, !pdg.inst.id !83
DSWP:    Pre loop env 2, producer:	  %14 = load %struct.arc*, %struct.arc** %13, align 8, !tbaa !544, !pdg.inst.id !127
DSWP:    Pre loop env 3, producer:	  %16 = load i64, i64* %15, align 8, !tbaa !551, !pdg.inst.id !108
DSWP:    Post loop env 4, producer:	  %104 = phi i64 [ %70, %81 ], [ %101, %99 ], [ %97, %94 ], [ %70, %._crit_edge1 ], !pdg.inst.id !73
DSWP:    Post loop env 5, producer:	  %103 = phi i64 [ %71, %81 ], [ %71, %99 ], [ %98, %94 ], [ %71, %._crit_edge1 ], !pdg.inst.id !203
DSWP:  Create 8 pipeline stages
Pipeline stage 0:

define void @11(i8*, i8*) {
  %3 = bitcast i8* %0 to [40 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 7
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.54"**
  %7 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %6
  %8 = alloca i64
  %9 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 8
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.54"**
  %11 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 11
  %14 = bitcast i8** %13 to %"class.MARC::ThreadSafeQueue.54"**
  %15 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %14
  %16 = alloca i64
  %17 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 13
  %18 = bitcast i8** %17 to %"class.MARC::ThreadSafeQueue.54"**
  %19 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %18
  %20 = alloca i64
  %21 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 15
  %22 = bitcast i8** %21 to %"class.MARC::ThreadSafeQueue.54"**
  %23 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %22
  %24 = alloca i64
  %25 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 17
  %26 = bitcast i8** %25 to %"class.MARC::ThreadSafeQueue.54"**
  %27 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %26
  %28 = alloca i64
  %29 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 21
  %30 = bitcast i8** %29 to %"class.MARC::ThreadSafeQueue.54"**
  %31 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %30
  %32 = alloca i64
  %33 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 16
  %34 = bitcast i64* %33 to %struct.arc**
  %35 = load %struct.arc*, %struct.arc** %34
  %36 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 24
  %37 = load i64, i64* %36
  br label %40

38:                                               ; preds = %39
  ret void

39:                                               ; preds = %79
  br label %38

40:                                               ; preds = %2, %79
  %41 = phi i64 [ 0, %2 ], [ %80, %79 ], !pdg.inst.id !30
  %42 = getelementptr inbounds %struct.arc, %struct.arc* %35, i64 %41, i32 7, !pdg.inst.id !31
  %43 = load i64, i64* %42, align 8, !tbaa !32, !pdg.inst.id !40
  store i64 %43, i64* %32
  %44 = load i64, i64* %32, align 8, !tbaa !41, !pdg.inst.id !45
  %45 = bitcast %"class.MARC::ThreadSafeQueue.54"* %31 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !46
  %46 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %45, align 8, !tbaa !47, !pdg.inst.id !49
  %47 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %46, i64 3, !pdg.inst.id !50
  %48 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %47, align 8, !pdg.inst.id !51
  call void %48(%"class.MARC::ThreadSafeQueue.54"* %31, i64 %44), !pdg.inst.id !52
  store i64 %43, i64* %28
  %49 = load i64, i64* %28, align 8, !tbaa !41, !pdg.inst.id !45
  %50 = bitcast %"class.MARC::ThreadSafeQueue.54"* %27 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !46
  %51 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %50, align 8, !tbaa !47, !pdg.inst.id !49
  %52 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %51, i64 3, !pdg.inst.id !50
  %53 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %52, align 8, !pdg.inst.id !51
  call void %53(%"class.MARC::ThreadSafeQueue.54"* %27, i64 %49), !pdg.inst.id !52
  store i64 %43, i64* %24
  %54 = load i64, i64* %24, align 8, !tbaa !41, !pdg.inst.id !45
  %55 = bitcast %"class.MARC::ThreadSafeQueue.54"* %23 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !46
  %56 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %55, align 8, !tbaa !47, !pdg.inst.id !49
  %57 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %56, i64 3, !pdg.inst.id !50
  %58 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %57, align 8, !pdg.inst.id !51
  call void %58(%"class.MARC::ThreadSafeQueue.54"* %23, i64 %54), !pdg.inst.id !52
  store i64 %43, i64* %20
  %59 = load i64, i64* %20, align 8, !tbaa !41, !pdg.inst.id !45
  %60 = bitcast %"class.MARC::ThreadSafeQueue.54"* %19 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !46
  %61 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %60, align 8, !tbaa !47, !pdg.inst.id !49
  %62 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %61, i64 3, !pdg.inst.id !50
  %63 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %62, align 8, !pdg.inst.id !51
  call void %63(%"class.MARC::ThreadSafeQueue.54"* %19, i64 %59), !pdg.inst.id !52
  store i64 %43, i64* %16
  %64 = load i64, i64* %16, align 8, !tbaa !41, !pdg.inst.id !45
  %65 = bitcast %"class.MARC::ThreadSafeQueue.54"* %15 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !46
  %66 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %65, align 8, !tbaa !47, !pdg.inst.id !49
  %67 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %66, i64 3, !pdg.inst.id !50
  %68 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %67, align 8, !pdg.inst.id !51
  call void %68(%"class.MARC::ThreadSafeQueue.54"* %15, i64 %64), !pdg.inst.id !52
  store i64 %43, i64* %12
  %69 = load i64, i64* %12, align 8, !tbaa !41, !pdg.inst.id !45
  %70 = bitcast %"class.MARC::ThreadSafeQueue.54"* %11 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !46
  %71 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %70, align 8, !tbaa !47, !pdg.inst.id !49
  %72 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %71, i64 3, !pdg.inst.id !50
  %73 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %72, align 8, !pdg.inst.id !51
  call void %73(%"class.MARC::ThreadSafeQueue.54"* %11, i64 %69), !pdg.inst.id !52
  store i64 %43, i64* %8
  %74 = load i64, i64* %8, align 8, !tbaa !41, !pdg.inst.id !45
  %75 = bitcast %"class.MARC::ThreadSafeQueue.54"* %7 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !46
  %76 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %75, align 8, !tbaa !47, !pdg.inst.id !49
  %77 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %76, i64 3, !pdg.inst.id !50
  %78 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %77, align 8, !pdg.inst.id !51
  call void %78(%"class.MARC::ThreadSafeQueue.54"* %7, i64 %74), !pdg.inst.id !52
  br label %79

79:                                               ; preds = %40
  %80 = add nuw nsw i64 %41, 1, !pdg.inst.id !53
  %81 = icmp eq i64 %80, %37, !pdg.inst.id !54
  br i1 %81, label %39, label %40, !prof !55, !pdg.inst.id !56
}

Pipeline stage 1:

define void @12(i8*, i8*) {
  %3 = bitcast i8* %0 to [40 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 9
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.54"**
  %7 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %6
  %8 = alloca %struct.node*
  %9 = bitcast %struct.node** %8 to i64*
  %10 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 7
  %11 = bitcast i8** %10 to %"class.MARC::ThreadSafeQueue.54"**
  %12 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %11
  %13 = alloca i64
  %14 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 16
  %15 = bitcast i64* %14 to %struct.arc**
  %16 = load %struct.arc*, %struct.arc** %15
  %17 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 24
  %18 = load i64, i64* %17
  br label %21

19:                                               ; preds = %20
  ret void

20:                                               ; preds = %39
  br label %19

21:                                               ; preds = %2, %39
  %22 = phi i64 [ 0, %2 ], [ %40, %39 ], !pdg.inst.id !30
  %23 = bitcast %"class.MARC::ThreadSafeQueue.54"* %12 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %24 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %23, align 8, !tbaa !32, !pdg.inst.id !35
  %25 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %24, i64 1, !pdg.inst.id !36
  %26 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %25, align 8, !pdg.inst.id !37
  %27 = call zeroext i1 %26(%"class.MARC::ThreadSafeQueue.54"* %12, i64* dereferenceable(8) %13), !pdg.inst.id !38
  %28 = load i64, i64* %13
  %29 = icmp eq i64 %28, 0, !pdg.inst.id !39
  br i1 %29, label %30, label %31, !prof !40, !pdg.inst.id !41

30:                                               ; preds = %21
  br label %39, !pdg.inst.id !42

31:                                               ; preds = %21
  %32 = getelementptr inbounds %struct.arc, %struct.arc* %16, i64 %22, i32 2, !pdg.inst.id !43
  %33 = load %struct.node*, %struct.node** %32, align 8, !tbaa !44, !pdg.inst.id !52
  store %struct.node* %33, %struct.node** %8
  %34 = load i64, i64* %9, align 8, !tbaa !53, !pdg.inst.id !56
  %35 = bitcast %"class.MARC::ThreadSafeQueue.54"* %7 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !57
  %36 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %35, align 8, !tbaa !32, !pdg.inst.id !58
  %37 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %36, i64 3, !pdg.inst.id !59
  %38 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %37, align 8, !pdg.inst.id !60
  call void %38(%"class.MARC::ThreadSafeQueue.54"* %7, i64 %34), !pdg.inst.id !61
  br label %39

39:                                               ; preds = %30, %31
  %40 = add nuw nsw i64 %22, 1, !pdg.inst.id !62
  %41 = icmp eq i64 %40, %18, !pdg.inst.id !63
  br i1 %41, label %20, label %21, !prof !64, !pdg.inst.id !65
}

Pipeline stage 2:

define void @13(i8*, i8*) {
  %3 = bitcast i8* %0 to [40 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 10
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.45"**
  %7 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 12
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.45"**
  %11 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 14
  %14 = bitcast i8** %13 to %"class.MARC::ThreadSafeQueue.45"**
  %15 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %14
  %16 = alloca i32
  %17 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 16
  %18 = bitcast i8** %17 to %"class.MARC::ThreadSafeQueue.45"**
  %19 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %18
  %20 = alloca i32
  %21 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 20
  %22 = bitcast i8** %21 to %"class.MARC::ThreadSafeQueue.45"**
  %23 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %22
  %24 = alloca i32
  %25 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 8
  %26 = bitcast i8** %25 to %"class.MARC::ThreadSafeQueue.54"**
  %27 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %26
  %28 = alloca i64
  %29 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 9
  %30 = bitcast i8** %29 to %"class.MARC::ThreadSafeQueue.54"**
  %31 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %30
  %32 = alloca %struct.node*
  %33 = bitcast %struct.node** %32 to i64*
  %34 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 24
  %35 = load i64, i64* %34
  br label %38

36:                                               ; preds = %37
  ret void

37:                                               ; preds = %82
  br label %36

38:                                               ; preds = %2, %82
  %39 = phi i64 [ 0, %2 ], [ %83, %82 ], !pdg.inst.id !30
  %40 = bitcast %"class.MARC::ThreadSafeQueue.54"* %27 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %41 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %40, align 8, !tbaa !32, !pdg.inst.id !35
  %42 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %41, i64 1, !pdg.inst.id !36
  %43 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %42, align 8, !pdg.inst.id !37
  %44 = call zeroext i1 %43(%"class.MARC::ThreadSafeQueue.54"* %27, i64* dereferenceable(8) %28), !pdg.inst.id !38
  %45 = load i64, i64* %28
  %46 = icmp eq i64 %45, 0, !pdg.inst.id !39
  br i1 %46, label %47, label %48, !prof !40, !pdg.inst.id !41

47:                                               ; preds = %38
  br label %82, !pdg.inst.id !42

48:                                               ; preds = %38
  %49 = bitcast %"class.MARC::ThreadSafeQueue.54"* %31 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %50 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %49, align 8, !tbaa !32, !pdg.inst.id !35
  %51 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %50, i64 1, !pdg.inst.id !36
  %52 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %51, align 8, !pdg.inst.id !37
  %53 = call zeroext i1 %52(%"class.MARC::ThreadSafeQueue.54"* %31, i64* dereferenceable(8) %33), !pdg.inst.id !38
  %54 = load %struct.node*, %struct.node** %32
  %55 = getelementptr inbounds %struct.node, %struct.node* %54, i64 0, i32 12, !pdg.inst.id !43
  %56 = load i32, i32* %55, align 8, !tbaa !44, !pdg.inst.id !51
  store i32 %56, i32* %24
  %57 = load i32, i32* %24, align 4, !tbaa !52, !pdg.inst.id !55
  %58 = bitcast %"class.MARC::ThreadSafeQueue.45"* %23 to void (%"class.MARC::ThreadSafeQueue.45"*, i32)***, !pdg.inst.id !56
  %59 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)**, void (%"class.MARC::ThreadSafeQueue.45"*, i32)*** %58, align 8, !tbaa !32, !pdg.inst.id !57
  %60 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %59, i64 3, !pdg.inst.id !58
  %61 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %60, align 8, !pdg.inst.id !59
  call void %61(%"class.MARC::ThreadSafeQueue.45"* %23, i32 %57), !pdg.inst.id !60
  store i32 %56, i32* %20
  %62 = load i32, i32* %20, align 4, !tbaa !52, !pdg.inst.id !55
  %63 = bitcast %"class.MARC::ThreadSafeQueue.45"* %19 to void (%"class.MARC::ThreadSafeQueue.45"*, i32)***, !pdg.inst.id !56
  %64 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)**, void (%"class.MARC::ThreadSafeQueue.45"*, i32)*** %63, align 8, !tbaa !32, !pdg.inst.id !57
  %65 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %64, i64 3, !pdg.inst.id !58
  %66 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %65, align 8, !pdg.inst.id !59
  call void %66(%"class.MARC::ThreadSafeQueue.45"* %19, i32 %62), !pdg.inst.id !60
  store i32 %56, i32* %16
  %67 = load i32, i32* %16, align 4, !tbaa !52, !pdg.inst.id !55
  %68 = bitcast %"class.MARC::ThreadSafeQueue.45"* %15 to void (%"class.MARC::ThreadSafeQueue.45"*, i32)***, !pdg.inst.id !56
  %69 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)**, void (%"class.MARC::ThreadSafeQueue.45"*, i32)*** %68, align 8, !tbaa !32, !pdg.inst.id !57
  %70 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %69, i64 3, !pdg.inst.id !58
  %71 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %70, align 8, !pdg.inst.id !59
  call void %71(%"class.MARC::ThreadSafeQueue.45"* %15, i32 %67), !pdg.inst.id !60
  store i32 %56, i32* %12
  %72 = load i32, i32* %12, align 4, !tbaa !52, !pdg.inst.id !55
  %73 = bitcast %"class.MARC::ThreadSafeQueue.45"* %11 to void (%"class.MARC::ThreadSafeQueue.45"*, i32)***, !pdg.inst.id !56
  %74 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)**, void (%"class.MARC::ThreadSafeQueue.45"*, i32)*** %73, align 8, !tbaa !32, !pdg.inst.id !57
  %75 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %74, i64 3, !pdg.inst.id !58
  %76 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %75, align 8, !pdg.inst.id !59
  call void %76(%"class.MARC::ThreadSafeQueue.45"* %11, i32 %72), !pdg.inst.id !60
  store i32 %56, i32* %8
  %77 = load i32, i32* %8, align 4, !tbaa !52, !pdg.inst.id !55
  %78 = bitcast %"class.MARC::ThreadSafeQueue.45"* %7 to void (%"class.MARC::ThreadSafeQueue.45"*, i32)***, !pdg.inst.id !56
  %79 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)**, void (%"class.MARC::ThreadSafeQueue.45"*, i32)*** %78, align 8, !tbaa !32, !pdg.inst.id !57
  %80 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %79, i64 3, !pdg.inst.id !58
  %81 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %80, align 8, !pdg.inst.id !59
  call void %81(%"class.MARC::ThreadSafeQueue.45"* %7, i32 %77), !pdg.inst.id !60
  br label %82

82:                                               ; preds = %47, %48
  %83 = add nuw nsw i64 %39, 1, !pdg.inst.id !61
  %84 = icmp eq i64 %83, %35, !pdg.inst.id !62
  br i1 %84, label %37, label %38, !prof !63, !pdg.inst.id !64
}

Pipeline stage 3:

define void @14(i8*, i8*) {
  %3 = bitcast i8* %0 to [40 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 18
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.54"**
  %7 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %6
  %8 = alloca %struct.node*
  %9 = bitcast %struct.node** %8 to i64*
  %10 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 10
  %11 = bitcast i8** %10 to %"class.MARC::ThreadSafeQueue.45"**
  %12 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %11
  %13 = alloca i32
  %14 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 11
  %15 = bitcast i8** %14 to %"class.MARC::ThreadSafeQueue.54"**
  %16 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %15
  %17 = alloca i64
  %18 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 16
  %19 = bitcast i64* %18 to %struct.arc**
  %20 = load %struct.arc*, %struct.arc** %19
  %21 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 24
  %22 = load i64, i64* %21
  br label %25

23:                                               ; preds = %24
  ret void

24:                                               ; preds = %51
  br label %23

25:                                               ; preds = %2, %51
  %26 = phi i64 [ 0, %2 ], [ %52, %51 ], !pdg.inst.id !30
  %27 = bitcast %"class.MARC::ThreadSafeQueue.54"* %16 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %28 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %27, align 8, !tbaa !32, !pdg.inst.id !35
  %29 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %28, i64 1, !pdg.inst.id !36
  %30 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %29, align 8, !pdg.inst.id !37
  %31 = call zeroext i1 %30(%"class.MARC::ThreadSafeQueue.54"* %16, i64* dereferenceable(8) %17), !pdg.inst.id !38
  %32 = load i64, i64* %17
  %33 = icmp eq i64 %32, 0, !pdg.inst.id !39
  br i1 %33, label %34, label %35, !prof !40, !pdg.inst.id !41

34:                                               ; preds = %25
  br label %51, !pdg.inst.id !42

35:                                               ; preds = %25
  %36 = bitcast %"class.MARC::ThreadSafeQueue.45"* %12 to i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)***, !pdg.inst.id !43
  %37 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*** %36, align 8, !tbaa !32, !pdg.inst.id !44
  %38 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %37, i64 1, !pdg.inst.id !45
  %39 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %38, align 8, !pdg.inst.id !46
  %40 = call zeroext i1 %39(%"class.MARC::ThreadSafeQueue.45"* %12, i32* dereferenceable(4) %13), !pdg.inst.id !47
  %41 = load i32, i32* %13
  %42 = icmp slt i32 %41, 0, !pdg.inst.id !48
  br i1 %42, label %43, label %54, !prof !49, !pdg.inst.id !50

43:                                               ; preds = %35
  %44 = getelementptr inbounds %struct.arc, %struct.arc* %20, i64 %26, i32 3, !pdg.inst.id !51
  %45 = load %struct.node*, %struct.node** %44, align 8, !tbaa !52, !pdg.inst.id !60
  store %struct.node* %45, %struct.node** %8
  %46 = load i64, i64* %9, align 8, !tbaa !61, !pdg.inst.id !64
  %47 = bitcast %"class.MARC::ThreadSafeQueue.54"* %7 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !65
  %48 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %47, align 8, !tbaa !32, !pdg.inst.id !66
  %49 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %48, i64 3, !pdg.inst.id !67
  %50 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %49, align 8, !pdg.inst.id !68
  call void %50(%"class.MARC::ThreadSafeQueue.54"* %7, i64 %46), !pdg.inst.id !69
  br label %51

51:                                               ; preds = %34, %54, %43
  %52 = add nuw nsw i64 %26, 1, !pdg.inst.id !70
  %53 = icmp eq i64 %52, %22, !pdg.inst.id !71
  br i1 %53, label %24, label %25, !prof !72, !pdg.inst.id !73

54:                                               ; preds = %35
  br label %51
}

Pipeline stage 4:

define void @15(i8*, i8*) {
  %3 = bitcast i8* %0 to [40 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 12
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.45"**
  %7 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 13
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.54"**
  %11 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 24
  %14 = load i64, i64* %13
  %15 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 32
  br label %18

16:                                               ; preds = %17
  ret void

17:                                               ; preds = %41
  br label %16

18:                                               ; preds = %2, %41
  %19 = phi i64 [ 0, %2 ], [ %43, %41 ], !pdg.inst.id !30
  %20 = phi i64 [ 0, %2 ], [ %42, %41 ], !pdg.inst.id !31
  %21 = bitcast %"class.MARC::ThreadSafeQueue.54"* %11 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !32
  %22 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %21, align 8, !tbaa !33, !pdg.inst.id !36
  %23 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %22, i64 1, !pdg.inst.id !37
  %24 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %23, align 8, !pdg.inst.id !38
  %25 = call zeroext i1 %24(%"class.MARC::ThreadSafeQueue.54"* %11, i64* dereferenceable(8) %12), !pdg.inst.id !39
  %26 = load i64, i64* %12
  %27 = icmp eq i64 %26, 0, !pdg.inst.id !40
  br i1 %27, label %28, label %29, !prof !41, !pdg.inst.id !42

28:                                               ; preds = %18
  br label %41, !pdg.inst.id !43

29:                                               ; preds = %18
  %30 = bitcast %"class.MARC::ThreadSafeQueue.45"* %7 to i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)***, !pdg.inst.id !44
  %31 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*** %30, align 8, !tbaa !33, !pdg.inst.id !45
  %32 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %31, i64 1, !pdg.inst.id !46
  %33 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %32, align 8, !pdg.inst.id !47
  %34 = call zeroext i1 %33(%"class.MARC::ThreadSafeQueue.45"* %7, i32* dereferenceable(4) %8), !pdg.inst.id !48
  %35 = load i32, i32* %8
  %36 = icmp slt i32 %35, 0, !pdg.inst.id !49
  br i1 %36, label %45, label %37, !prof !50, !pdg.inst.id !51

37:                                               ; preds = %29
  %38 = icmp eq i32 %35, 0, !pdg.inst.id !52
  br i1 %38, label %39, label %46, !prof !53, !pdg.inst.id !54

39:                                               ; preds = %37
  %40 = add nsw i64 %20, 1, !pdg.inst.id !55
  br label %41, !pdg.inst.id !56

41:                                               ; preds = %39, %28, %46, %45
  %42 = phi i64 [ %20, %45 ], [ %20, %46 ], [ %40, %39 ], [ %20, %28 ], !pdg.inst.id !57
  %43 = add nuw nsw i64 %19, 1, !pdg.inst.id !58
  %44 = icmp eq i64 %43, %14, !pdg.inst.id !59
  store i64 %42, i64* %15
  br i1 %44, label %17, label %18, !prof !60, !pdg.inst.id !61

45:                                               ; preds = %29
  br label %41

46:                                               ; preds = %37
  br label %41
}

Pipeline stage 5:

define void @16(i8*, i8*) {
  %3 = bitcast i8* %0 to [40 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 22
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.54"**
  %7 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %6
  %8 = alloca i64
  %9 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 14
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.45"**
  %11 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 15
  %14 = bitcast i8** %13 to %"class.MARC::ThreadSafeQueue.54"**
  %15 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %14
  %16 = alloca i64
  %17 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 0
  %18 = bitcast i64* %17 to i64**
  %19 = load i64*, i64** %18
  %20 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 24
  %21 = load i64, i64* %20
  br label %24

22:                                               ; preds = %23
  ret void

23:                                               ; preds = %51
  br label %22

24:                                               ; preds = %2, %51
  %25 = phi i64 [ 0, %2 ], [ %52, %51 ], !pdg.inst.id !30
  %26 = bitcast %"class.MARC::ThreadSafeQueue.54"* %15 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %27 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %26, align 8, !tbaa !32, !pdg.inst.id !35
  %28 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %27, i64 1, !pdg.inst.id !36
  %29 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %28, align 8, !pdg.inst.id !37
  %30 = call zeroext i1 %29(%"class.MARC::ThreadSafeQueue.54"* %15, i64* dereferenceable(8) %16), !pdg.inst.id !38
  %31 = load i64, i64* %16
  %32 = icmp eq i64 %31, 0, !pdg.inst.id !39
  br i1 %32, label %33, label %34, !prof !40, !pdg.inst.id !41

33:                                               ; preds = %24
  br label %51, !pdg.inst.id !42

34:                                               ; preds = %24
  %35 = bitcast %"class.MARC::ThreadSafeQueue.45"* %11 to i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)***, !pdg.inst.id !43
  %36 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*** %35, align 8, !tbaa !32, !pdg.inst.id !44
  %37 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %36, i64 1, !pdg.inst.id !45
  %38 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %37, align 8, !pdg.inst.id !46
  %39 = call zeroext i1 %38(%"class.MARC::ThreadSafeQueue.45"* %11, i32* dereferenceable(4) %12), !pdg.inst.id !47
  %40 = load i32, i32* %12
  %41 = icmp slt i32 %40, 0, !pdg.inst.id !48
  br i1 %41, label %54, label %42, !prof !49, !pdg.inst.id !50

42:                                               ; preds = %34
  %43 = icmp eq i32 %40, 0, !pdg.inst.id !51
  br i1 %43, label %44, label %55, !prof !52, !pdg.inst.id !53

44:                                               ; preds = %42
  %45 = load i64, i64* %19, align 8, !tbaa !54, !pdg.inst.id !61
  store i64 %45, i64* %8
  %46 = load i64, i64* %8, align 8, !tbaa !62, !pdg.inst.id !65
  %47 = bitcast %"class.MARC::ThreadSafeQueue.54"* %7 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !66
  %48 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %47, align 8, !tbaa !32, !pdg.inst.id !67
  %49 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %48, i64 3, !pdg.inst.id !68
  %50 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %49, align 8, !pdg.inst.id !69
  call void %50(%"class.MARC::ThreadSafeQueue.54"* %7, i64 %46), !pdg.inst.id !70
  br label %51, !pdg.inst.id !71

51:                                               ; preds = %33, %44, %55, %54
  %52 = add nuw nsw i64 %25, 1, !pdg.inst.id !72
  %53 = icmp eq i64 %52, %21, !pdg.inst.id !73
  br i1 %53, label %23, label %24, !prof !74, !pdg.inst.id !75

54:                                               ; preds = %34
  br label %51

55:                                               ; preds = %42
  br label %51
}

Pipeline stage 6:

define void @17(i8*, i8*) {
  %3 = bitcast i8* %0 to [40 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 19
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.45"**
  %7 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 16
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.45"**
  %11 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 17
  %14 = bitcast i8** %13 to %"class.MARC::ThreadSafeQueue.54"**
  %15 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %14
  %16 = alloca i64
  %17 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 18
  %18 = bitcast i8** %17 to %"class.MARC::ThreadSafeQueue.54"**
  %19 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %18
  %20 = alloca %struct.node*
  %21 = bitcast %struct.node** %20 to i64*
  %22 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 24
  %23 = load i64, i64* %22
  br label %26

24:                                               ; preds = %25
  ret void

25:                                               ; preds = %58
  br label %24

26:                                               ; preds = %2, %58
  %27 = phi i64 [ 0, %2 ], [ %59, %58 ], !pdg.inst.id !30
  %28 = bitcast %"class.MARC::ThreadSafeQueue.54"* %15 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %29 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %28, align 8, !tbaa !32, !pdg.inst.id !35
  %30 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %29, i64 1, !pdg.inst.id !36
  %31 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %30, align 8, !pdg.inst.id !37
  %32 = call zeroext i1 %31(%"class.MARC::ThreadSafeQueue.54"* %15, i64* dereferenceable(8) %16), !pdg.inst.id !38
  %33 = load i64, i64* %16
  %34 = icmp eq i64 %33, 0, !pdg.inst.id !39
  br i1 %34, label %35, label %36, !prof !40, !pdg.inst.id !41

35:                                               ; preds = %26
  br label %58, !pdg.inst.id !42

36:                                               ; preds = %26
  %37 = bitcast %"class.MARC::ThreadSafeQueue.45"* %11 to i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)***, !pdg.inst.id !43
  %38 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*** %37, align 8, !tbaa !32, !pdg.inst.id !44
  %39 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %38, i64 1, !pdg.inst.id !45
  %40 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %39, align 8, !pdg.inst.id !46
  %41 = call zeroext i1 %40(%"class.MARC::ThreadSafeQueue.45"* %11, i32* dereferenceable(4) %12), !pdg.inst.id !47
  %42 = load i32, i32* %12
  %43 = icmp slt i32 %42, 0, !pdg.inst.id !48
  br i1 %43, label %44, label %61, !prof !49, !pdg.inst.id !50

44:                                               ; preds = %36
  %45 = bitcast %"class.MARC::ThreadSafeQueue.54"* %19 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !31
  %46 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %45, align 8, !tbaa !32, !pdg.inst.id !35
  %47 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %46, i64 1, !pdg.inst.id !36
  %48 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %47, align 8, !pdg.inst.id !37
  %49 = call zeroext i1 %48(%"class.MARC::ThreadSafeQueue.54"* %19, i64* dereferenceable(8) %21), !pdg.inst.id !38
  %50 = load %struct.node*, %struct.node** %20
  %51 = getelementptr inbounds %struct.node, %struct.node* %50, i64 0, i32 12, !pdg.inst.id !51
  %52 = load i32, i32* %51, align 8, !tbaa !52, !pdg.inst.id !59
  store i32 %52, i32* %8
  %53 = load i32, i32* %8, align 4, !tbaa !60, !pdg.inst.id !63
  %54 = bitcast %"class.MARC::ThreadSafeQueue.45"* %7 to void (%"class.MARC::ThreadSafeQueue.45"*, i32)***, !pdg.inst.id !64
  %55 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)**, void (%"class.MARC::ThreadSafeQueue.45"*, i32)*** %54, align 8, !tbaa !32, !pdg.inst.id !65
  %56 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %55, i64 3, !pdg.inst.id !66
  %57 = load void (%"class.MARC::ThreadSafeQueue.45"*, i32)*, void (%"class.MARC::ThreadSafeQueue.45"*, i32)** %56, align 8, !pdg.inst.id !67
  call void %57(%"class.MARC::ThreadSafeQueue.45"* %7, i32 %53), !pdg.inst.id !68
  br label %58

58:                                               ; preds = %35, %61, %44
  %59 = add nuw nsw i64 %27, 1, !pdg.inst.id !69
  %60 = icmp eq i64 %59, %23, !pdg.inst.id !70
  br i1 %60, label %25, label %26, !prof !71, !pdg.inst.id !72

61:                                               ; preds = %36
  br label %58
}

Pipeline stage 7:

define void @18(i8*, i8*) {
  %3 = bitcast i8* %0 to [40 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 19
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.45"**
  %7 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 20
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.45"**
  %11 = load %"class.MARC::ThreadSafeQueue.45"*, %"class.MARC::ThreadSafeQueue.45"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 21
  %14 = bitcast i8** %13 to %"class.MARC::ThreadSafeQueue.54"**
  %15 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %14
  %16 = alloca i64
  %17 = getelementptr inbounds [23 x i8*], [23 x i8*]* %4, i64 0, i64 22
  %18 = bitcast i8** %17 to %"class.MARC::ThreadSafeQueue.54"**
  %19 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %18
  %20 = alloca i64
  %21 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 16
  %22 = bitcast i64* %21 to %struct.arc**
  %23 = load %struct.arc*, %struct.arc** %22
  %24 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 24
  %25 = load i64, i64* %24
  %26 = getelementptr inbounds [40 x i64], [40 x i64]* %3, i64 0, i64 8
  br label %29

27:                                               ; preds = %28
  ret void

28:                                               ; preds = %75
  br label %27

29:                                               ; preds = %2, %75
  %30 = phi i64 [ 0, %2 ], [ %77, %75 ], !pdg.inst.id !30
  %31 = phi i64 [ 0, %2 ], [ %76, %75 ], !pdg.inst.id !31
  %32 = bitcast %"class.MARC::ThreadSafeQueue.54"* %15 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !32
  %33 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %32, align 8, !tbaa !33, !pdg.inst.id !36
  %34 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %33, i64 1, !pdg.inst.id !37
  %35 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %34, align 8, !pdg.inst.id !38
  %36 = call zeroext i1 %35(%"class.MARC::ThreadSafeQueue.54"* %15, i64* dereferenceable(8) %16), !pdg.inst.id !39
  %37 = load i64, i64* %16
  %38 = icmp eq i64 %37, 0, !pdg.inst.id !40
  br i1 %38, label %39, label %40, !prof !41, !pdg.inst.id !42

39:                                               ; preds = %29
  br label %75, !pdg.inst.id !43

40:                                               ; preds = %29
  %41 = bitcast %"class.MARC::ThreadSafeQueue.45"* %11 to i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)***, !pdg.inst.id !44
  %42 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*** %41, align 8, !tbaa !33, !pdg.inst.id !45
  %43 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %42, i64 1, !pdg.inst.id !46
  %44 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %43, align 8, !pdg.inst.id !47
  %45 = call zeroext i1 %44(%"class.MARC::ThreadSafeQueue.45"* %11, i32* dereferenceable(4) %12), !pdg.inst.id !48
  %46 = load i32, i32* %12
  %47 = icmp slt i32 %46, 0, !pdg.inst.id !49
  br i1 %47, label %48, label %59, !prof !50, !pdg.inst.id !51

48:                                               ; preds = %40
  %49 = bitcast %"class.MARC::ThreadSafeQueue.45"* %7 to i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)***, !pdg.inst.id !44
  %50 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*** %49, align 8, !tbaa !33, !pdg.inst.id !45
  %51 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %50, i64 1, !pdg.inst.id !46
  %52 = load i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.45"*, i32*)** %51, align 8, !pdg.inst.id !47
  %53 = call zeroext i1 %52(%"class.MARC::ThreadSafeQueue.45"* %7, i32* dereferenceable(4) %8), !pdg.inst.id !48
  %54 = load i32, i32* %8
  %55 = icmp sgt i32 %54, 0, !pdg.inst.id !52
  br i1 %55, label %75, label %56, !prof !53, !pdg.inst.id !54

56:                                               ; preds = %48
  %57 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %30, i32 1, !pdg.inst.id !55
  %58 = load i64, i64* %57, align 8, !tbaa !56, !pdg.inst.id !64
  br label %72, !pdg.inst.id !65

59:                                               ; preds = %40
  %60 = icmp eq i32 %46, 0, !pdg.inst.id !66
  %61 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %30, i32 1, !pdg.inst.id !67
  %62 = load i64, i64* %61, align 8, !tbaa !56, !pdg.inst.id !68
  br i1 %60, label %63, label %72, !prof !69, !pdg.inst.id !70

63:                                               ; preds = %59
  %64 = bitcast %"class.MARC::ThreadSafeQueue.54"* %19 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !32
  %65 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %64, align 8, !tbaa !33, !pdg.inst.id !36
  %66 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %65, i64 1, !pdg.inst.id !37
  %67 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %66, align 8, !pdg.inst.id !38
  %68 = call zeroext i1 %67(%"class.MARC::ThreadSafeQueue.54"* %19, i64* dereferenceable(8) %20), !pdg.inst.id !39
  %69 = load i64, i64* %20
  %70 = add i64 %62, %31, !pdg.inst.id !71
  %71 = sub i64 %70, %69, !pdg.inst.id !72
  br label %75, !pdg.inst.id !73

72:                                               ; preds = %56, %59
  %73 = phi i64 [ %58, %56 ], [ %62, %59 ], !pdg.inst.id !74
  %74 = add nsw i64 %73, %31, !pdg.inst.id !75
  br label %75, !pdg.inst.id !76

75:                                               ; preds = %72, %48, %39, %63
  %76 = phi i64 [ %31, %48 ], [ %74, %72 ], [ %71, %63 ], [ %31, %39 ], !pdg.inst.id !77
  %77 = add nuw nsw i64 %30, 1, !pdg.inst.id !78
  %78 = icmp eq i64 %77, %25, !pdg.inst.id !79
  store i64 %76, i64* %26
  br i1 %78, label %28, label %29, !prof !80, !pdg.inst.id !81
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local double @flow_cost(%struct.network* nocapture readonly) local_unnamed_addr #2 !prof !30 !pdg.args.id !31 !pdg.edges !33 {
  %2 = alloca [40 x i64]
  %3 = bitcast [40 x i64]* %2 to i8*
  %4 = getelementptr inbounds [40 x i64], [40 x i64]* %2, i64 0, i64 0
  %5 = bitcast i64* %4 to i64**
  %6 = getelementptr inbounds [40 x i64], [40 x i64]* %2, i64 0, i64 8
  %7 = getelementptr inbounds [40 x i64], [40 x i64]* %2, i64 0, i64 16
  %8 = bitcast i64* %7 to %struct.arc**
  %9 = getelementptr inbounds [40 x i64], [40 x i64]* %2, i64 0, i64 24
  %10 = getelementptr inbounds [40 x i64], [40 x i64]* %2, i64 0, i64 32
  %11 = alloca [16 x i64]
  %12 = bitcast [16 x i64]* %11 to i8*
  %13 = getelementptr inbounds [16 x i64], [16 x i64]* %11, i64 0, i64 0
  %14 = getelementptr inbounds [16 x i64], [16 x i64]* %11, i64 0, i64 8
  %15 = bitcast i64* %14 to %struct.node**
  %16 = alloca [24 x i64]
  %17 = bitcast [24 x i64]* %16 to i8*
  %18 = getelementptr inbounds [24 x i64], [24 x i64]* %16, i64 0, i64 0
  %19 = getelementptr inbounds [24 x i64], [24 x i64]* %16, i64 0, i64 8
  %20 = getelementptr inbounds [24 x i64], [24 x i64]* %16, i64 0, i64 16
  %21 = bitcast i64* %20 to %struct.arc**
  %22 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 23, !pdg.inst.id !75
  %23 = load %struct.arc*, %struct.arc** %22, align 8, !tbaa !544, !pdg.inst.id !127
  %24 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 5, !pdg.inst.id !77
  %25 = load i64, i64* %24, align 8, !tbaa !551, !pdg.inst.id !108
  %26 = icmp sgt i64 %25, 0, !pdg.inst.id !116
  br i1 %26, label %27, label %59, !prof !552, !pdg.inst.id !211

27:                                               ; preds = %1
  %28 = and i64 %25, 1, !pdg.inst.id !112
  %29 = icmp eq i64 %25, 1, !pdg.inst.id !97
  br i1 %29, label %.loopexit2, label %30, !prof !553, !pdg.inst.id !98

30:                                               ; preds = %27
  %31 = sub i64 %25, %28, !pdg.inst.id !110
  %32 = load i32, i32* @1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %127, label %34

34:                                               ; preds = %30, %._crit_edge
  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
  %36 = phi i64 [ %31, %30 ], [ %49, %._crit_edge ], !pdg.inst.id !131
  %37 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 4, !pdg.inst.id !92
  %38 = load i16, i16* %37, align 8, !tbaa !554, !pdg.inst.id !93
  %39 = icmp eq i16 %38, 2, !pdg.inst.id !229
  %40 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 7, !pdg.inst.id !133
  %41 = zext i1 %39 to i64, !pdg.inst.id !230
  store i64 %41, i64* %40, align 8, !tbaa !558, !pdg.inst.id !134
  %42 = or i64 %35, 1, !pdg.inst.id !58
  %43 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 4, !pdg.inst.id !61
  %44 = load i16, i16* %43, align 8, !tbaa !554, !pdg.inst.id !163
  %45 = icmp eq i16 %44, 2, !pdg.inst.id !89
  %46 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 7, !pdg.inst.id !59
  %47 = zext i1 %45 to i64, !pdg.inst.id !90
  store i64 %47, i64* %46, align 8, !tbaa !558, !pdg.inst.id !166
  %48 = add nuw nsw i64 %35, 2, !pdg.inst.id !221
  %49 = add i64 %36, -2, !pdg.inst.id !168
  %50 = icmp eq i64 %49, 0, !pdg.inst.id !169
  br i1 %50, label %.loopexit2.loopexit, label %._crit_edge, !prof !559, !pdg.inst.id !232

._crit_edge:                                      ; preds = %34
  br label %34, !pdg.inst.id !439

.loopexit2.loopexit:                              ; preds = %152, %34
  %.lcssa6 = phi i64 [ %48, %34 ], [ %151, %152 ], !pdg.inst.id !49
  br label %.loopexit2, !pdg.inst.id !442

.loopexit2:                                       ; preds = %.loopexit2.loopexit, %27
  %51 = phi i64 [ 0, %27 ], [ %.lcssa6, %.loopexit2.loopexit ], !pdg.inst.id !50
  %52 = icmp eq i64 %28, 0, !pdg.inst.id !100
  br i1 %52, label %59, label %53, !prof !560, !pdg.inst.id !101

53:                                               ; preds = %.loopexit2
  %54 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %51, i32 4, !pdg.inst.id !118
  %55 = load i16, i16* %54, align 8, !tbaa !554, !pdg.inst.id !227
  %56 = icmp eq i16 %55, 2, !pdg.inst.id !122
  %57 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %51, i32 7, !pdg.inst.id !120
  %58 = zext i1 %56 to i64, !pdg.inst.id !55
  store i64 %58, i64* %57, align 8, !tbaa !558, !pdg.inst.id !56
  br label %59, !pdg.inst.id !340

59:                                               ; preds = %53, %.loopexit2, %1
  %60 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 21, !pdg.inst.id !79
  %61 = load %struct.node*, %struct.node** %60, align 8, !tbaa !561, !pdg.inst.id !191
  %62 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 2, !pdg.inst.id !81
  %63 = load i64, i64* %62, align 8, !tbaa !562, !pdg.inst.id !178
  %64 = icmp slt i64 %63, 1, !pdg.inst.id !181
  br i1 %64, label %.loopexit1, label %.preheader.preheader, !prof !553, !pdg.inst.id !193

.preheader.preheader:                             ; preds = %59
  %65 = load i32, i32* @2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %153, label %.preheader

.loopexit1.loopexit:                              ; preds = %167, %.preheader
  br label %.loopexit1, !pdg.inst.id !455

.loopexit1:                                       ; preds = %.loopexit1.loopexit, %59
  br i1 %26, label %67, label %.loopexit, !prof !552, !pdg.inst.id !209

67:                                               ; preds = %.loopexit1
  %68 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 18, !pdg.inst.id !83
  %69 = load i32, i32* @3
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %168, label %79

.preheader:                                       ; preds = %.preheader.preheader, %.preheader..preheader_crit_edge
  %71 = phi i64 [ %77, %.preheader..preheader_crit_edge ], [ 1, %.preheader.preheader ], !pdg.inst.id !172
  %72 = getelementptr inbounds %struct.node, %struct.node* %61, i64 %71, i32 10, !pdg.inst.id !174
  %73 = load i64, i64* %72, align 8, !tbaa !563, !pdg.inst.id !66
  %74 = getelementptr inbounds %struct.node, %struct.node* %61, i64 %71, i32 6, !pdg.inst.id !160
  %75 = load %struct.arc*, %struct.arc** %74, align 8, !tbaa !565, !pdg.inst.id !161
  %76 = getelementptr inbounds %struct.arc, %struct.arc* %75, i64 0, i32 7, !pdg.inst.id !214
  store i64 %73, i64* %76, align 8, !tbaa !558, !pdg.inst.id !67
  %77 = add nuw i64 %71, 1, !pdg.inst.id !176
  %78 = icmp slt i64 %63, %77, !pdg.inst.id !63
  br i1 %78, label %.loopexit1.loopexit, label %.preheader..preheader_crit_edge, !prof !566, !pdg.inst.id !64

.preheader..preheader_crit_edge:                  ; preds = %.preheader
  br label %.preheader, !pdg.inst.id !480

79:                                               ; preds = %67, %113
  %80 = phi i64 [ 0, %67 ], [ %116, %113 ], !pdg.inst.id !136
  %81 = phi i64 [ 0, %67 ], [ %115, %113 ], !pdg.inst.id !186
  %82 = phi i64 [ 0, %67 ], [ %114, %113 ], !pdg.inst.id !202
  %83 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %80, i32 7, !pdg.inst.id !144
  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
  br i1 %85, label %._crit_edge1, label %86, !prof !567, !pdg.inst.id !274

._crit_edge1:                                     ; preds = %79
  br label %113, !pdg.inst.id !498

86:                                               ; preds = %79
  %87 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %80, i32 2, !pdg.inst.id !142
  %88 = load %struct.node*, %struct.node** %87, align 8, !tbaa !568, !pdg.inst.id !150
  %89 = getelementptr inbounds %struct.node, %struct.node* %88, i64 0, i32 12, !pdg.inst.id !148
  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
  br i1 %91, label %92, label %101, !prof !570, !pdg.inst.id !198

92:                                               ; preds = %86
  %93 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %80, i32 3, !pdg.inst.id !138
  %94 = load %struct.node*, %struct.node** %93, align 8, !tbaa !571, !pdg.inst.id !218
  %95 = getelementptr inbounds %struct.node, %struct.node* %94, i64 0, i32 12, !pdg.inst.id !52
  %96 = load i32, i32* %95, align 8, !tbaa !569, !pdg.inst.id !53
  %97 = icmp sgt i32 %96, 0, !pdg.inst.id !237
  br i1 %97, label %113, label %98, !prof !572, !pdg.inst.id !246

98:                                               ; preds = %92
  %99 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %80, i32 1, !pdg.inst.id !124
  %100 = load i64, i64* %99, align 8, !tbaa !573, !pdg.inst.id !125
  br label %110, !pdg.inst.id !514

101:                                              ; preds = %86
  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
  %103 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %80, i32 1, !pdg.inst.id !140
  %104 = load i64, i64* %103, align 8, !tbaa !573, !pdg.inst.id !188
  br i1 %102, label %105, label %110, !prof !574, !pdg.inst.id !243

105:                                              ; preds = %101
  %106 = load i64, i64* %68, align 8, !tbaa !575, !pdg.inst.id !95
  %107 = add i64 %104, %81, !pdg.inst.id !69
  %108 = sub i64 %107, %106, !pdg.inst.id !70
  %109 = add nsw i64 %82, 1, !pdg.inst.id !205
  br label %113, !pdg.inst.id !524

110:                                              ; preds = %98, %101
  %111 = phi i64 [ %100, %98 ], [ %104, %101 ], !pdg.inst.id !156
  %112 = add nsw i64 %111, %81, !pdg.inst.id !72
  br label %113, !pdg.inst.id !528

113:                                              ; preds = %._crit_edge1, %105, %110, %92
  %114 = phi i64 [ %82, %92 ], [ %82, %110 ], [ %109, %105 ], [ %82, %._crit_edge1 ], !pdg.inst.id !203
  %115 = phi i64 [ %81, %92 ], [ %112, %110 ], [ %108, %105 ], [ %81, %._crit_edge1 ], !pdg.inst.id !73
  %116 = add nuw nsw i64 %80, 1, !pdg.inst.id !146
  %117 = icmp eq i64 %116, %25, !pdg.inst.id !114
  br i1 %117, label %.loopexit.loopexit, label %79, !prof !576, !pdg.inst.id !129

.loopexit.loopexit:                               ; preds = %214, %113
  %.lcssa5 = phi i64 [ %114, %113 ], [ %213, %214 ], !pdg.inst.id !240
  %.lcssa = phi i64 [ %115, %113 ], [ %212, %214 ], !pdg.inst.id !46
  br label %.loopexit, !pdg.inst.id !493

.loopexit:                                        ; preds = %.loopexit.loopexit, %.loopexit1
  %118 = phi i64 [ 0, %.loopexit1 ], [ %.lcssa5, %.loopexit.loopexit ], !pdg.inst.id !200
  %119 = phi i64 [ 0, %.loopexit1 ], [ %.lcssa, %.loopexit.loopexit ], !pdg.inst.id !47
  %120 = sitofp i64 %118 to double, !pdg.inst.id !87
  %121 = getelementptr inbounds %struct.network, %struct.network* %0, i64 0, i32 18, !pdg.inst.id !85
  %122 = load i64, i64* %121, align 8, !tbaa !575, !pdg.inst.id !41
  %123 = sitofp i64 %122 to double, !pdg.inst.id !35
  %124 = fmul fast double %123, %120, !pdg.inst.id !36
  %125 = sitofp i64 %119 to double, !pdg.inst.id !152
  %126 = fadd fast double %124, %125, !pdg.inst.id !153
  ret double %126, !pdg.inst.id !207

127:                                              ; preds = %30
  store i32 1, i32* @1
  store i64 %31, i64* %19
  store %struct.arc* %23, %struct.arc** %21
  %128 = alloca [6 x i8*]
  %129 = getelementptr inbounds [6 x i8*], [6 x i8*]* %128, i64 0, i64 0
  %130 = bitcast i8** %129 to void (i8*, i8*)**
  store void (i8*, i8*)* @5, void (i8*, i8*)** %130
  %131 = getelementptr inbounds [6 x i8*], [6 x i8*]* %128, i64 0, i64 1
  %132 = bitcast i8** %131 to void (i8*, i8*)**
  store void (i8*, i8*)* @6, void (i8*, i8*)** %132
  %133 = getelementptr inbounds [6 x i8*], [6 x i8*]* %128, i64 0, i64 2
  %134 = bitcast i8** %133 to void (i8*, i8*)**
  store void (i8*, i8*)* @7, void (i8*, i8*)** %134
  %135 = getelementptr inbounds [6 x i8*], [6 x i8*]* %128, i64 0, i64 3
  %136 = bitcast i8** %135 to void (i8*, i8*)**
  store void (i8*, i8*)* @8, void (i8*, i8*)** %136
  %137 = getelementptr inbounds [6 x i8*], [6 x i8*]* %128, i64 0, i64 4
  %138 = bitcast i8** %137 to void (i8*, i8*)**
  store void (i8*, i8*)* @9, void (i8*, i8*)** %138
  %139 = getelementptr inbounds [6 x i8*], [6 x i8*]* %128, i64 0, i64 5
  %140 = bitcast i8** %139 to void (i8*, i8*)**
  store void (i8*, i8*)* @10, void (i8*, i8*)** %140
  %141 = bitcast [6 x i8*]* %128 to i8*
  %142 = alloca [7 x i64]
  %143 = getelementptr inbounds [7 x i64], [7 x i64]* %142, i64 0, i64 0
  store i64 64, i64* %143
  %144 = getelementptr inbounds [7 x i64], [7 x i64]* %142, i64 0, i64 1
  store i64 64, i64* %144
  %145 = getelementptr inbounds [7 x i64], [7 x i64]* %142, i64 0, i64 2
  store i64 16, i64* %145
  %146 = getelementptr inbounds [7 x i64], [7 x i64]* %142, i64 0, i64 3
  store i64 64, i64* %146
  %147 = getelementptr inbounds [7 x i64], [7 x i64]* %142, i64 0, i64 4
  store i64 64, i64* %147
  %148 = getelementptr inbounds [7 x i64], [7 x i64]* %142, i64 0, i64 5
  store i64 16, i64* %148
  %149 = getelementptr inbounds [7 x i64], [7 x i64]* %142, i64 0, i64 6
  store i64 64, i64* %149
  %150 = bitcast [7 x i64]* %142 to i64*
  call void @stageDispatcher(i8* %17, i64* %150, i8* %141, i64 6, i64 7)
  %151 = load i64, i64* %18
  br label %152

152:                                              ; preds = %127
  store i32 0, i32* @1
  br label %.loopexit2.loopexit

153:                                              ; preds = %.preheader.preheader
  store i32 1, i32* @2
  store i64 %63, i64* %13
  store %struct.node* %61, %struct.node** %15
  %154 = alloca [1 x i8*]
  %155 = getelementptr inbounds [1 x i8*], [1 x i8*]* %154, i64 0, i64 0
  %156 = bitcast i8** %155 to void (i8*, i8*)**
  store void (i8*, i8*)* @11, void (i8*, i8*)** %156
  %157 = bitcast [1 x i8*]* %154 to i8*
  %158 = alloca [7 x i64]
  %159 = getelementptr inbounds [7 x i64], [7 x i64]* %158, i64 0, i64 0
  store i64 64, i64* %159
  %160 = getelementptr inbounds [7 x i64], [7 x i64]* %158, i64 0, i64 1
  store i64 64, i64* %160
  %161 = getelementptr inbounds [7 x i64], [7 x i64]* %158, i64 0, i64 2
  store i64 16, i64* %161
  %162 = getelementptr inbounds [7 x i64], [7 x i64]* %158, i64 0, i64 3
  store i64 64, i64* %162
  %163 = getelementptr inbounds [7 x i64], [7 x i64]* %158, i64 0, i64 4
  store i64 64, i64* %163
  %164 = getelementptr inbounds [7 x i64], [7 x i64]* %158, i64 0, i64 5
  store i64 16, i64* %164
  %165 = getelementptr inbounds [7 x i64], [7 x i64]* %158, i64 0, i64 6
  store i64 64, i64* %165
  %166 = bitcast [7 x i64]* %158 to i64*
  call void @stageDispatcher(i8* %12, i64* %166, i8* %157, i64 1, i64 7)
  br label %167

167:                                              ; preds = %153
  store i32 0, i32* @2
  br label %.loopexit1.loopexit

168:                                              ; preds = %67
  store i32 1, i32* @3
  store i64* %68, i64** %5
  store %struct.arc* %23, %struct.arc** %8
  store i64 %25, i64* %9
  %169 = alloca [8 x i8*]
  %170 = getelementptr inbounds [8 x i8*], [8 x i8*]* %169, i64 0, i64 0
  %171 = bitcast i8** %170 to void (i8*, i8*)**
  store void (i8*, i8*)* @12, void (i8*, i8*)** %171
  %172 = getelementptr inbounds [8 x i8*], [8 x i8*]* %169, i64 0, i64 1
  %173 = bitcast i8** %172 to void (i8*, i8*)**
  store void (i8*, i8*)* @13, void (i8*, i8*)** %173
  %174 = getelementptr inbounds [8 x i8*], [8 x i8*]* %169, i64 0, i64 2
  %175 = bitcast i8** %174 to void (i8*, i8*)**
  store void (i8*, i8*)* @14, void (i8*, i8*)** %175
  %176 = getelementptr inbounds [8 x i8*], [8 x i8*]* %169, i64 0, i64 3
  %177 = bitcast i8** %176 to void (i8*, i8*)**
  store void (i8*, i8*)* @15, void (i8*, i8*)** %177
  %178 = getelementptr inbounds [8 x i8*], [8 x i8*]* %169, i64 0, i64 4
  %179 = bitcast i8** %178 to void (i8*, i8*)**
  store void (i8*, i8*)* @16, void (i8*, i8*)** %179
  %180 = getelementptr inbounds [8 x i8*], [8 x i8*]* %169, i64 0, i64 5
  %181 = bitcast i8** %180 to void (i8*, i8*)**
  store void (i8*, i8*)* @17, void (i8*, i8*)** %181
  %182 = getelementptr inbounds [8 x i8*], [8 x i8*]* %169, i64 0, i64 6
  %183 = bitcast i8** %182 to void (i8*, i8*)**
  store void (i8*, i8*)* @18, void (i8*, i8*)** %183
  %184 = getelementptr inbounds [8 x i8*], [8 x i8*]* %169, i64 0, i64 7
  %185 = bitcast i8** %184 to void (i8*, i8*)**
  store void (i8*, i8*)* @19, void (i8*, i8*)** %185
  %186 = bitcast [8 x i8*]* %169 to i8*
  %187 = alloca [23 x i64]
  %188 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 0
  store i64 64, i64* %188
  %189 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 1
  store i64 64, i64* %189
  %190 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 2
  store i64 16, i64* %190
  %191 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 3
  store i64 64, i64* %191
  %192 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 4
  store i64 64, i64* %192
  %193 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 5
  store i64 16, i64* %193
  %194 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 6
  store i64 64, i64* %194
  %195 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 7
  store i64 64, i64* %195
  %196 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 8
  store i64 64, i64* %196
  %197 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 9
  store i64 64, i64* %197
  %198 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 10
  store i64 32, i64* %198
  %199 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 11
  store i64 64, i64* %199
  %200 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 12
  store i64 32, i64* %200
  %201 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 13
  store i64 64, i64* %201
  %202 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 14
  store i64 32, i64* %202
  %203 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 15
  store i64 64, i64* %203
  %204 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 16
  store i64 32, i64* %204
  %205 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 17
  store i64 64, i64* %205
  %206 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 18
  store i64 64, i64* %206
  %207 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 19
  store i64 32, i64* %207
  %208 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 20
  store i64 32, i64* %208
  %209 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 21
  store i64 64, i64* %209
  %210 = getelementptr inbounds [23 x i64], [23 x i64]* %187, i64 0, i64 22
  store i64 64, i64* %210
  %211 = bitcast [23 x i64]* %187 to i64*
  call void @stageDispatcher(i8* %3, i64* %211, i8* %186, i64 8, i64 23)
  %212 = load i64, i64* %6
  %213 = load i64, i64* %10
  br label %214

214:                                              ; preds = %168
  store i32 0, i32* @3
  br label %.loopexit.loopexit
}

Parallelizer: Exit
Parallelizer: Start
Parallelizer:  Function = "global_opt"
Parallelizer:  Loop 4 = "  %3 = icmp eq i64 %2, 0, !pdg.inst.id !34"
Parallelizer:  Nesting level = 1
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 1
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %34 = tail call i64 @refreshPositions(%struct.network* nonnull @net, i64 (%struct.network*, i64)* nonnull @getOriginalArcPosition, i64 %33) #39, !pdg.inst.id !78
DSWP:       %39 = getelementptr [34 x i8], [34 x i8]* @.str.5, i64 0, i64 0, !pdg.inst.id !63
DSWP:       %6 = load i64, i64* %5, align 8, !tbaa !1148, !pdg.inst.id !40
DSWP:       %10 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 28, !pdg.inst.id !42
DSWP:       %13 = tail call i32 (i8*, ...) @printf(i8* %12, i64 %11), !pdg.inst.id !103
DSWP:       %14 = tail call fast double @flow_cost(%struct.network* nonnull @net) #39, !pdg.inst.id !96
DSWP:       %12 = getelementptr [34 x i8], [34 x i8]* @.str.1, i64 0, i64 0, !pdg.inst.id !107
DSWP:       %11 = load i64, i64* %10, align 8, !tbaa !1155, !pdg.inst.id !43
DSWP:       %15 = getelementptr [36 x i8], [36 x i8]* @.str.2, i64 0, i64 0, !pdg.inst.id !105
DSWP:       %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:       %8 = tail call i32 (i8*, ...) @printf(i8* %7, i64 %6), !pdg.inst.id !101
DSWP:       br label %41, !pdg.inst.id !1128
DSWP:       br label %35, !pdg.inst.id !1118
DSWP:       br i1 %42, label %43, label %1, !prof !1159, !pdg.inst.id !80
DSWP:       %42 = icmp slt i64 %36, 0, !pdg.inst.id !74
DSWP:       %17 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 7, !pdg.inst.id !94
DSWP:       %33 = load i64, i64* %32, align 8, !tbaa !1148, !pdg.inst.id !59
DSWP:       br i1 %3, label %46, label %4, !prof !1147, !pdg.inst.id !99
DSWP:       %36 = tail call i64 @price_out_impl(%struct.network* nonnull @net) #39, !pdg.inst.id !71
DSWP:       br label %35, !pdg.inst.id !1113
DSWP:       %9 = tail call i64 @primal_net_simplex(%struct.network* nonnull @net) #39, !pdg.inst.id !121
DSWP:       %7 = getelementptr [34 x i8], [34 x i8]* @.str, i64 0, i64 0, !pdg.inst.id !109
DSWP:       %2 = phi i64 [ -1, %0 ], [ %36, %41 ], !pdg.inst.id !33
DSWP:       %18 = load i64, i64* %17, align 8, !tbaa !1156, !pdg.inst.id !55
DSWP:       %29 = getelementptr [34 x i8], [34 x i8]* @.str.4, i64 0, i64 0, !pdg.inst.id !66
DSWP:       br i1 %37, label %41, label %38, !prof !1157, !pdg.inst.id !82
DSWP:       br i1 %19, label %31, label %20, !prof !1157, !pdg.inst.id !90
DSWP:       %3 = icmp eq i64 %2, 0, !pdg.inst.id !34
DSWP:       %22 = icmp slt i64 %21, 0, !pdg.inst.id !53
DSWP:       %21 = tail call i64 @suspend_impl(%struct.network* nonnull @net, i64 -1, i64 0) #39, !pdg.inst.id !48
DSWP:       %40 = tail call i32 (i8*, ...) @printf(i8* %39, i64 %36), !pdg.inst.id !64
DSWP:       br i1 %22, label %23, label %26, !prof !1158, !pdg.inst.id !61
DSWP:       %5 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !39
DSWP:       %27 = icmp eq i64 %21, 0, !pdg.inst.id !51
DSWP:       br i1 %27, label %35, label %28, !prof !1158, !pdg.inst.id !84
DSWP:       %30 = tail call i32 (i8*, ...) @printf(i8* %29, i64 %21), !pdg.inst.id !49
DSWP:       %32 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !58
DSWP:       %19 = icmp eq i64 %18, 0, !pdg.inst.id !56
DSWP:       %37 = icmp eq i64 %36, 0, !pdg.inst.id !76
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  Final number of partitions: 1
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %34 = tail call i64 @refreshPositions(%struct.network* nonnull @net, i64 (%struct.network*, i64)* nonnull @getOriginalArcPosition, i64 %33) #39, !pdg.inst.id !78
DSWP:       %39 = getelementptr [34 x i8], [34 x i8]* @.str.5, i64 0, i64 0, !pdg.inst.id !63
DSWP:       %6 = load i64, i64* %5, align 8, !tbaa !1148, !pdg.inst.id !40
DSWP:       %10 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 28, !pdg.inst.id !42
DSWP:       %13 = tail call i32 (i8*, ...) @printf(i8* %12, i64 %11), !pdg.inst.id !103
DSWP:       %14 = tail call fast double @flow_cost(%struct.network* nonnull @net) #39, !pdg.inst.id !96
DSWP:       %12 = getelementptr [34 x i8], [34 x i8]* @.str.1, i64 0, i64 0, !pdg.inst.id !107
DSWP:       %11 = load i64, i64* %10, align 8, !tbaa !1155, !pdg.inst.id !43
DSWP:       %15 = getelementptr [36 x i8], [36 x i8]* @.str.2, i64 0, i64 0, !pdg.inst.id !105
DSWP:       %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:       %8 = tail call i32 (i8*, ...) @printf(i8* %7, i64 %6), !pdg.inst.id !101
DSWP:       br label %41, !pdg.inst.id !1128
DSWP:       br label %35, !pdg.inst.id !1118
DSWP:       br i1 %42, label %43, label %1, !prof !1159, !pdg.inst.id !80
DSWP:       %42 = icmp slt i64 %36, 0, !pdg.inst.id !74
DSWP:       %17 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 7, !pdg.inst.id !94
DSWP:       %33 = load i64, i64* %32, align 8, !tbaa !1148, !pdg.inst.id !59
DSWP:       br i1 %3, label %46, label %4, !prof !1147, !pdg.inst.id !99
DSWP:       %36 = tail call i64 @price_out_impl(%struct.network* nonnull @net) #39, !pdg.inst.id !71
DSWP:       br label %35, !pdg.inst.id !1113
DSWP:       %9 = tail call i64 @primal_net_simplex(%struct.network* nonnull @net) #39, !pdg.inst.id !121
DSWP:       %7 = getelementptr [34 x i8], [34 x i8]* @.str, i64 0, i64 0, !pdg.inst.id !109
DSWP:       %2 = phi i64 [ -1, %0 ], [ %36, %41 ], !pdg.inst.id !33
DSWP:       %18 = load i64, i64* %17, align 8, !tbaa !1156, !pdg.inst.id !55
DSWP:       %29 = getelementptr [34 x i8], [34 x i8]* @.str.4, i64 0, i64 0, !pdg.inst.id !66
DSWP:       br i1 %37, label %41, label %38, !prof !1157, !pdg.inst.id !82
DSWP:       br i1 %19, label %31, label %20, !prof !1157, !pdg.inst.id !90
DSWP:       %3 = icmp eq i64 %2, 0, !pdg.inst.id !34
DSWP:       %22 = icmp slt i64 %21, 0, !pdg.inst.id !53
DSWP:       %21 = tail call i64 @suspend_impl(%struct.network* nonnull @net, i64 -1, i64 0) #39, !pdg.inst.id !48
DSWP:       %40 = tail call i32 (i8*, ...) @printf(i8* %39, i64 %36), !pdg.inst.id !64
DSWP:       br i1 %22, label %23, label %26, !prof !1158, !pdg.inst.id !61
DSWP:       %5 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !39
DSWP:       %27 = icmp eq i64 %21, 0, !pdg.inst.id !51
DSWP:       br i1 %27, label %35, label %28, !prof !1158, !pdg.inst.id !84
DSWP:       %30 = tail call i32 (i8*, ...) @printf(i8* %29, i64 %21), !pdg.inst.id !49
DSWP:       %32 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !58
DSWP:       %19 = icmp eq i64 %18, 0, !pdg.inst.id !56
DSWP:       %37 = icmp eq i64 %36, 0, !pdg.inst.id !76
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  There are 1 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 39
DSWP:     	  %34 = tail call i64 @refreshPositions(%struct.network* nonnull @net, i64 (%struct.network*, i64)* nonnull @getOriginalArcPosition, i64 %33) #39, !pdg.inst.id !78
DSWP:     	  %39 = getelementptr [34 x i8], [34 x i8]* @.str.5, i64 0, i64 0, !pdg.inst.id !63
DSWP:     	  %6 = load i64, i64* %5, align 8, !tbaa !1148, !pdg.inst.id !40
DSWP:     	  %10 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 28, !pdg.inst.id !42
DSWP:     	  %13 = tail call i32 (i8*, ...) @printf(i8* %12, i64 %11), !pdg.inst.id !103
DSWP:     	  %14 = tail call fast double @flow_cost(%struct.network* nonnull @net) #39, !pdg.inst.id !96
DSWP:     	  %12 = getelementptr [34 x i8], [34 x i8]* @.str.1, i64 0, i64 0, !pdg.inst.id !107
DSWP:     	  %11 = load i64, i64* %10, align 8, !tbaa !1155, !pdg.inst.id !43
DSWP:     	  %15 = getelementptr [36 x i8], [36 x i8]* @.str.2, i64 0, i64 0, !pdg.inst.id !105
DSWP:     	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	  %8 = tail call i32 (i8*, ...) @printf(i8* %7, i64 %6), !pdg.inst.id !101
DSWP:     	  br label %41, !pdg.inst.id !1128
DSWP:     	  br label %35, !pdg.inst.id !1118
DSWP:     	  br i1 %42, label %43, label %1, !prof !1159, !pdg.inst.id !80
DSWP:     	  %42 = icmp slt i64 %36, 0, !pdg.inst.id !74
DSWP:     	  %17 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 7, !pdg.inst.id !94
DSWP:     	  %33 = load i64, i64* %32, align 8, !tbaa !1148, !pdg.inst.id !59
DSWP:     	  br i1 %3, label %46, label %4, !prof !1147, !pdg.inst.id !99
DSWP:     	  %36 = tail call i64 @price_out_impl(%struct.network* nonnull @net) #39, !pdg.inst.id !71
DSWP:     	  br label %35, !pdg.inst.id !1113
DSWP:     	  %9 = tail call i64 @primal_net_simplex(%struct.network* nonnull @net) #39, !pdg.inst.id !121
DSWP:     	  %7 = getelementptr [34 x i8], [34 x i8]* @.str, i64 0, i64 0, !pdg.inst.id !109
DSWP:     	  %2 = phi i64 [ -1, %0 ], [ %36, %41 ], !pdg.inst.id !33
DSWP:     	  %18 = load i64, i64* %17, align 8, !tbaa !1156, !pdg.inst.id !55
DSWP:     	  %29 = getelementptr [34 x i8], [34 x i8]* @.str.4, i64 0, i64 0, !pdg.inst.id !66
DSWP:     	  br i1 %37, label %41, label %38, !prof !1157, !pdg.inst.id !82
DSWP:     	  br i1 %19, label %31, label %20, !prof !1157, !pdg.inst.id !90
DSWP:     	  %3 = icmp eq i64 %2, 0, !pdg.inst.id !34
DSWP:     	  %22 = icmp slt i64 %21, 0, !pdg.inst.id !53
DSWP:     	  %21 = tail call i64 @suspend_impl(%struct.network* nonnull @net, i64 -1, i64 0) #39, !pdg.inst.id !48
DSWP:     	  %40 = tail call i32 (i8*, ...) @printf(i8* %39, i64 %36), !pdg.inst.id !64
DSWP:     	  br i1 %22, label %23, label %26, !prof !1158, !pdg.inst.id !61
DSWP:     	  %5 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !39
DSWP:     	  %27 = icmp eq i64 %21, 0, !pdg.inst.id !51
DSWP:     	  br i1 %27, label %35, label %28, !prof !1158, !pdg.inst.id !84
DSWP:     	  %30 = tail call i32 (i8*, ...) @printf(i8* %29, i64 %21), !pdg.inst.id !49
DSWP:     	  %32 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !58
DSWP:     	  %19 = icmp eq i64 %18, 0, !pdg.inst.id !56
DSWP:     	  %37 = icmp eq i64 %36, 0, !pdg.inst.id !76
DSWP:     External nodes: 0
DSWP:     Edges: 552
DSWP:     	From:	  br i1 %42, label %43, label %1, !prof !1159, !pdg.inst.id !80
DSWP:     	To:	  %2 = phi i64 [ -1, %0 ], [ %36, %41 ], !pdg.inst.id !33
DSWP:     	CTRL
DSWP:     	From:	  br i1 %42, label %43, label %1, !prof !1159, !pdg.inst.id !80
DSWP:     	To:	  %3 = icmp eq i64 %2, 0, !pdg.inst.id !34
DSWP:     	CTRL
DSWP:     	From:	  br i1 %42, label %43, label %1, !prof !1159, !pdg.inst.id !80
DSWP:     	To:	  br i1 %3, label %46, label %4, !prof !1147, !pdg.inst.id !99
DSWP:     	CTRL
DSWP:     	From:	  %42 = icmp slt i64 %36, 0, !pdg.inst.id !74
DSWP:     	To:	  br i1 %42, label %43, label %1, !prof !1159, !pdg.inst.id !80
DSWP:     	RAW (must)
DSWP:     	From:	  %17 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 7, !pdg.inst.id !94
DSWP:     	To:	  %18 = load i64, i64* %17, align 8, !tbaa !1156, !pdg.inst.id !55
DSWP:     	RAW (must)
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %8 = tail call i32 (i8*, ...) @printf(i8* %7, i64 %6), !pdg.inst.id !101
DSWP:     	RAW (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %8 = tail call i32 (i8*, ...) @printf(i8* %7, i64 %6), !pdg.inst.id !101
DSWP:     	WAW (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %9 = tail call i64 @primal_net_simplex(%struct.network* nonnull @net) #39, !pdg.inst.id !121
DSWP:     	RAW (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %9 = tail call i64 @primal_net_simplex(%struct.network* nonnull @net) #39, !pdg.inst.id !121
DSWP:     	WAW (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %13 = tail call i32 (i8*, ...) @printf(i8* %12, i64 %11), !pdg.inst.id !103
DSWP:     	RAW (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %13 = tail call i32 (i8*, ...) @printf(i8* %12, i64 %11), !pdg.inst.id !103
DSWP:     	WAW (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %30 = tail call i32 (i8*, ...) @printf(i8* %29, i64 %21), !pdg.inst.id !49
DSWP:     	WAR (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %14 = tail call fast double @flow_cost(%struct.network* nonnull @net) #39, !pdg.inst.id !96
DSWP:     	RAW (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %14 = tail call fast double @flow_cost(%struct.network* nonnull @net) #39, !pdg.inst.id !96
DSWP:     	WAW (may) from memory 
DSWP:     	From:	  %16 = tail call i32 (i8*, ...) @printf(i8* %15, double %14), !pdg.inst.id !97
DSWP:     	To:	  %8 = tail call i32 (i8*, ...) @printf(i8* %7, i64 %6), !pdg.inst.id !101
DSWP:     	WAW (may) from memory 
DSWP:     	....
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 
DSWP:      Pop value queues: 
DSWP:    Queue: 0
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %37 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 4, !pdg.inst.id !92
DSWP:    Queue: 1
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:    Queue: 2
DSWP:     Producer:	  %38 = load i16, i16* %37, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     Consumer:	  %39 = icmp eq i16 %38, 2, !pdg.inst.id !229
DSWP:    Queue: 3
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %40 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 7, !pdg.inst.id !133
DSWP:    Queue: 4
DSWP:     Producer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %43 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 4, !pdg.inst.id !61
DSWP:    Queue: 5
DSWP:     Producer:	  %44 = load i16, i16* %43, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     Consumer:	  %45 = icmp eq i16 %44, 2, !pdg.inst.id !89
DSWP:    Queue: 6
DSWP:     Producer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %46 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 7, !pdg.inst.id !59
DSWP:    Queue: 7
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 8
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 9
DSWP:     Producer:	  %88 = load %struct.node*, %struct.node** %87, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     Consumer:	  %89 = getelementptr inbounds %struct.node, %struct.node* %88, i64 0, i32 12, !pdg.inst.id !148
DSWP:    Queue: 10
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:    Queue: 11
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 12
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 13
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 14
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 15
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 16
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:    Queue: 17
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 18
DSWP:     Producer:	  %94 = load %struct.node*, %struct.node** %93, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     Consumer:	  %95 = getelementptr inbounds %struct.node, %struct.node* %94, i64 0, i32 12, !pdg.inst.id !52
DSWP:    Queue: 19
DSWP:     Producer:	  %96 = load i32, i32* %95, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     Consumer:	  %97 = icmp sgt i32 %96, 0, !pdg.inst.id !237
DSWP:    Queue: 20
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 21
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 22
DSWP:     Producer:	  %106 = load i64, i64* %68, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     Consumer:	  %108 = sub i64 %107, %106, !pdg.inst.id !70
DSWP:  Environment
DSWP:  Create 1 pipeline stages
Pipeline stage 0:

define void @20(i8*, i8*) {
  %3 = bitcast i8* %0 to [8 x i64]*
  %4 = bitcast i8* %1 to [23 x i8*]*
  %5 = getelementptr inbounds [8 x i64], [8 x i64]* %3, i64 0, i64 0
  %6 = bitcast i64* %5 to i32*
  br label %11

7:                                                ; preds = %10, %9, %8
  ret void

8:                                                ; preds = %11
  store i32 0, i32* %6
  br label %7

9:                                                ; preds = %30
  store i32 1, i32* %6
  br label %7

10:                                               ; preds = %48
  store i32 2, i32* %6
  br label %7

11:                                               ; preds = %2, %48
  %12 = phi i64 [ -1, %2 ], [ %43, %48 ], !pdg.inst.id !30
  %13 = icmp eq i64 %12, 0, !pdg.inst.id !31
  br i1 %13, label %8, label %14, !prof !32, !pdg.inst.id !33

14:                                               ; preds = %11
  %15 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !34
  %16 = load i64, i64* %15, align 8, !tbaa !35, !pdg.inst.id !42
  %17 = getelementptr [34 x i8], [34 x i8]* @.str, i64 0, i64 0, !pdg.inst.id !43
  %18 = tail call i32 (i8*, ...) @printf(i8* %17, i64 %16), !pdg.inst.id !44
  %19 = tail call i64 @primal_net_simplex(%struct.network* nonnull @net) #39, !pdg.inst.id !45
  %20 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 28, !pdg.inst.id !46
  %21 = load i64, i64* %20, align 8, !tbaa !47, !pdg.inst.id !48
  %22 = getelementptr [34 x i8], [34 x i8]* @.str.1, i64 0, i64 0, !pdg.inst.id !49
  %23 = tail call i32 (i8*, ...) @printf(i8* %22, i64 %21), !pdg.inst.id !50
  %24 = tail call fast double @flow_cost(%struct.network* nonnull @net) #39, !pdg.inst.id !51
  %25 = getelementptr [36 x i8], [36 x i8]* @.str.2, i64 0, i64 0, !pdg.inst.id !52
  %26 = tail call i32 (i8*, ...) @printf(i8* %25, double %24), !pdg.inst.id !53
  %27 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 7, !pdg.inst.id !54
  %28 = load i64, i64* %27, align 8, !tbaa !55, !pdg.inst.id !56
  %29 = icmp eq i64 %28, 0, !pdg.inst.id !57
  br i1 %29, label %38, label %30, !prof !58, !pdg.inst.id !59

30:                                               ; preds = %14
  %31 = tail call i64 @suspend_impl(%struct.network* nonnull @net, i64 -1, i64 0) #39, !pdg.inst.id !60
  %32 = icmp slt i64 %31, 0, !pdg.inst.id !61
  br i1 %32, label %9, label %33, !prof !62, !pdg.inst.id !63

33:                                               ; preds = %30
  %34 = icmp eq i64 %31, 0, !pdg.inst.id !64
  br i1 %34, label %42, label %35, !prof !62, !pdg.inst.id !65

35:                                               ; preds = %33
  %36 = getelementptr [34 x i8], [34 x i8]* @.str.4, i64 0, i64 0, !pdg.inst.id !66
  %37 = tail call i32 (i8*, ...) @printf(i8* %36, i64 %31), !pdg.inst.id !67
  br label %42, !pdg.inst.id !68

38:                                               ; preds = %14
  %39 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !69
  %40 = load i64, i64* %39, align 8, !tbaa !35, !pdg.inst.id !70
  %41 = tail call i64 @refreshPositions(%struct.network* nonnull @net, i64 (%struct.network*, i64)* nonnull @getOriginalArcPosition, i64 %40) #39, !pdg.inst.id !71
  br label %42, !pdg.inst.id !72

42:                                               ; preds = %38, %33, %35
  %43 = tail call i64 @price_out_impl(%struct.network* nonnull @net) #39, !pdg.inst.id !73
  %44 = icmp eq i64 %43, 0, !pdg.inst.id !74
  br i1 %44, label %48, label %45, !prof !58, !pdg.inst.id !75

45:                                               ; preds = %42
  %46 = getelementptr [34 x i8], [34 x i8]* @.str.5, i64 0, i64 0, !pdg.inst.id !76
  %47 = tail call i32 (i8*, ...) @printf(i8* %46, i64 %43), !pdg.inst.id !77
  br label %48, !pdg.inst.id !78

48:                                               ; preds = %42, %45
  %49 = icmp slt i64 %43, 0, !pdg.inst.id !79
  br i1 %49, label %10, label %11, !prof !80, !pdg.inst.id !81
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: cold nounwind uwtable
define dso_local i64 @global_opt() local_unnamed_addr #0 !prof !30 !pdg.edges !31 {
  %1 = alloca [8 x i64]
  %2 = bitcast [8 x i64]* %1 to i8*
  %3 = getelementptr inbounds [8 x i64], [8 x i64]* %1, i64 0, i64 0
  %4 = bitcast i64* %3 to i32*
  %5 = load i32, i32* @4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %57, label %7

7:                                                ; preds = %0, %47
  %8 = phi i64 [ -1, %0 ], [ %42, %47 ], !pdg.inst.id !33
  %9 = icmp eq i64 %8, 0, !pdg.inst.id !34
  br i1 %9, label %52, label %10, !prof !1146, !pdg.inst.id !99

10:                                               ; preds = %7
  %11 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !39
  %12 = load i64, i64* %11, align 8, !tbaa !1147, !pdg.inst.id !40
  %13 = getelementptr [34 x i8], [34 x i8]* @.str, i64 0, i64 0, !pdg.inst.id !109
  %14 = tail call i32 (i8*, ...) @printf(i8* %13, i64 %12), !pdg.inst.id !101
  %15 = tail call i64 @primal_net_simplex(%struct.network* nonnull @net) #39, !pdg.inst.id !121
  %16 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 28, !pdg.inst.id !42
  %17 = load i64, i64* %16, align 8, !tbaa !1154, !pdg.inst.id !43
  %18 = getelementptr [34 x i8], [34 x i8]* @.str.1, i64 0, i64 0, !pdg.inst.id !107
  %19 = tail call i32 (i8*, ...) @printf(i8* %18, i64 %17), !pdg.inst.id !103
  %20 = tail call fast double @flow_cost(%struct.network* nonnull @net) #39, !pdg.inst.id !96
  %21 = getelementptr [36 x i8], [36 x i8]* @.str.2, i64 0, i64 0, !pdg.inst.id !105
  %22 = tail call i32 (i8*, ...) @printf(i8* %21, double %20), !pdg.inst.id !97
  %23 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 7, !pdg.inst.id !94
  %24 = load i64, i64* %23, align 8, !tbaa !1155, !pdg.inst.id !55
  %25 = icmp eq i64 %24, 0, !pdg.inst.id !56
  br i1 %25, label %37, label %26, !prof !1156, !pdg.inst.id !90

26:                                               ; preds = %10
  %27 = tail call i64 @suspend_impl(%struct.network* nonnull @net, i64 -1, i64 0) #39, !pdg.inst.id !48
  %28 = icmp slt i64 %27, 0, !pdg.inst.id !53
  br i1 %28, label %29, label %32, !prof !1157, !pdg.inst.id !61

29:                                               ; preds = %87, %26
  %30 = getelementptr [28 x i8], [28 x i8]* @str.18, i64 0, i64 0, !pdg.inst.id !111
  %31 = tail call i32 @puts(i8* %30), !pdg.inst.id !112
  tail call void @exit(i32 -1) #40, !pdg.inst.id !151
  br label %UnifiedUnreachableBlock, !pdg.inst.id !1107

32:                                               ; preds = %26
  %33 = icmp eq i64 %27, 0, !pdg.inst.id !51
  br i1 %33, label %41, label %34, !prof !1157, !pdg.inst.id !84

34:                                               ; preds = %32
  %35 = getelementptr [34 x i8], [34 x i8]* @.str.4, i64 0, i64 0, !pdg.inst.id !66
  %36 = tail call i32 (i8*, ...) @printf(i8* %35, i64 %27), !pdg.inst.id !49
  br label %41, !pdg.inst.id !1113

37:                                               ; preds = %10
  %38 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 5, !pdg.inst.id !58
  %39 = load i64, i64* %38, align 8, !tbaa !1147, !pdg.inst.id !59
  %40 = tail call i64 @refreshPositions(%struct.network* nonnull @net, i64 (%struct.network*, i64)* nonnull @getOriginalArcPosition, i64 %39) #39, !pdg.inst.id !78
  br label %41, !pdg.inst.id !1118

41:                                               ; preds = %32, %34, %37
  %42 = tail call i64 @price_out_impl(%struct.network* nonnull @net) #39, !pdg.inst.id !71
  %43 = icmp eq i64 %42, 0, !pdg.inst.id !76
  br i1 %43, label %47, label %44, !prof !1156, !pdg.inst.id !82

44:                                               ; preds = %41
  %45 = getelementptr [34 x i8], [34 x i8]* @.str.5, i64 0, i64 0, !pdg.inst.id !63
  %46 = tail call i32 (i8*, ...) @printf(i8* %45, i64 %42), !pdg.inst.id !64
  br label %47, !pdg.inst.id !1128

47:                                               ; preds = %41, %44
  %48 = icmp slt i64 %42, 0, !pdg.inst.id !74
  br i1 %48, label %49, label %7, !prof !1158, !pdg.inst.id !80

49:                                               ; preds = %87, %47
  %50 = getelementptr [28 x i8], [28 x i8]* @str.18, i64 0, i64 0, !pdg.inst.id !68
  %51 = tail call i32 @puts(i8* %50), !pdg.inst.id !69
  tail call void @exit(i32 -1) #40, !pdg.inst.id !177
  br label %UnifiedUnreachableBlock, !pdg.inst.id !1137

52:                                               ; preds = %87, %7
  %53 = tail call fast double @flow_cost(%struct.network* nonnull @net) #39, !pdg.inst.id !86
  %54 = getelementptr %struct.network, %struct.network* @net, i64 0, i32 19, !pdg.inst.id !45
  store double %53, double* %54, align 8, !tbaa !1159, !pdg.inst.id !46
  %55 = getelementptr [36 x i8], [36 x i8]* @.str.6, i64 0, i64 0, !pdg.inst.id !92
  %56 = tail call i32 (i8*, ...) @printf(i8* %55, double %53), !pdg.inst.id !87
  ret i64 0, !pdg.inst.id !1142

UnifiedUnreachableBlock:                          ; preds = %49, %29
  unreachable, !pdg.inst.id !1144

57:                                               ; preds = %0
  store i32 1, i32* @4
  %58 = alloca [1 x i8*]
  %59 = getelementptr inbounds [1 x i8*], [1 x i8*]* %58, i64 0, i64 0
  %60 = bitcast i8** %59 to void (i8*, i8*)**
  store void (i8*, i8*)* @21, void (i8*, i8*)** %60
  %61 = bitcast [1 x i8*]* %58 to i8*
  %62 = alloca [23 x i64]
  %63 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 0
  store i64 64, i64* %63
  %64 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 1
  store i64 64, i64* %64
  %65 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 2
  store i64 16, i64* %65
  %66 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 3
  store i64 64, i64* %66
  %67 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 4
  store i64 64, i64* %67
  %68 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 5
  store i64 16, i64* %68
  %69 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 6
  store i64 64, i64* %69
  %70 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 7
  store i64 64, i64* %70
  %71 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 8
  store i64 64, i64* %71
  %72 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 9
  store i64 64, i64* %72
  %73 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 10
  store i64 32, i64* %73
  %74 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 11
  store i64 64, i64* %74
  %75 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 12
  store i64 32, i64* %75
  %76 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 13
  store i64 64, i64* %76
  %77 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 14
  store i64 32, i64* %77
  %78 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 15
  store i64 64, i64* %78
  %79 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 16
  store i64 32, i64* %79
  %80 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 17
  store i64 64, i64* %80
  %81 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 18
  store i64 64, i64* %81
  %82 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 19
  store i64 32, i64* %82
  %83 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 20
  store i64 32, i64* %83
  %84 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 21
  store i64 64, i64* %84
  %85 = getelementptr inbounds [23 x i64], [23 x i64]* %62, i64 0, i64 22
  store i64 64, i64* %85
  %86 = bitcast [23 x i64]* %62 to i64*
  call void @stageDispatcher(i8* %2, i64* %86, i8* %61, i64 1, i64 23)
  br label %87

87:                                               ; preds = %57
  %88 = getelementptr inbounds [8 x i64], [8 x i64]* %1, i64 0, i64 0
  %89 = load i64, i64* %88
  %90 = trunc i64 %89 to i32
  store i32 0, i32* @4
  switch i32 %90, label %52 [
    i32 1, label %29
    i32 2, label %49
  ]
}

Parallelizer: Exit
Parallelizer: Start
Parallelizer:  Function = "markBaskets"
Parallelizer:  Loop 5 = "  %59 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !88"
Parallelizer:  Nesting level = 1
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 2
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       store %struct.basket** %69, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !90
DSWP:       %68 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !92
DSWP:       store %struct.basket** %80, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !84
DSWP:       br i1 %65, label %.loopexit.loopexit1.loopexit, label %66, !prof !733, !pdg.inst.id !214
DSWP:       %65 = icmp eq %struct.basket* %64, null, !pdg.inst.id !209
DSWP:       store i64 %58, i64* %67, align 8, !tbaa !729, !pdg.inst.id !196
DSWP:       %67 = getelementptr inbounds %struct.basket, %struct.basket* %64, i64 0, i32 3, !pdg.inst.id !211
DSWP:       %70 = load %struct.basket*, %struct.basket** %69, align 8, !tbaa !724, !pdg.inst.id !219
DSWP:       store i64 %77, i64* %78, align 8, !tbaa !729, !pdg.inst.id !238
DSWP:       %82 = icmp eq i64 %81, 61, !pdg.inst.id !245
DSWP:       %69 = getelementptr inbounds %struct.basket*, %struct.basket** %68, i64 1, !pdg.inst.id !217
DSWP:       %64 = select i1 %63, %struct.basket* %60, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:       %59 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !88
DSWP:       %78 = getelementptr inbounds %struct.basket, %struct.basket* %74, i64 0, i32 3, !pdg.inst.id !231
DSWP:       %74 = select i1 %73, %struct.basket* %70, %struct.basket* null, !prof !734, !pdg.inst.id !222
DSWP:       br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:       %73 = icmp sgt i64 %72, -1, !pdg.inst.id !228
DSWP:       %63 = icmp sgt i64 %62, -1, !pdg.inst.id !206
DSWP:       %77 = add nuw nsw i64 %58, 1, !pdg.inst.id !194
DSWP:       br i1 %75, label %.loopexit.loopexit1.loopexit, label %76, !prof !735, !pdg.inst.id !236
DSWP:       %80 = getelementptr inbounds %struct.basket*, %struct.basket** %79, i64 1, !pdg.inst.id !241
DSWP:       %81 = add nuw nsw i64 %58, 2, !pdg.inst.id !192
DSWP:       %72 = load i64, i64* %71, align 8, !tbaa !729, !pdg.inst.id !226
DSWP:       %62 = load i64, i64* %61, align 8, !tbaa !729, !pdg.inst.id !204
DSWP:       %61 = getelementptr inbounds %struct.basket, %struct.basket* %60, i64 0, i32 3, !pdg.inst.id !202
DSWP:       %79 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !86
DSWP:       %71 = getelementptr inbounds %struct.basket, %struct.basket* %70, i64 0, i32 3, !pdg.inst.id !224
DSWP:       %60 = load %struct.basket*, %struct.basket** %59, align 8, !tbaa !724, !pdg.inst.id !198
DSWP:       %75 = icmp eq %struct.basket* %74, null, !pdg.inst.id !233
DSWP:       %58 = phi i64 [ %81, %76 ], [ 1, %.preheader1.preheader ], !pdg.inst.id !191
DSWP:   SCC: 1 Internal nodes:
DSWP:       store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:       store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:   Set:  0
DSWP:    Children: Set:  1; 
DSWP:    Parents: 
DSWP:   Set:  1
DSWP:    Children: 
DSWP:    Parents: Set:  0; 
DSWP:  Final number of partitions: 2
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       store %struct.basket** %69, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !90
DSWP:       %68 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !92
DSWP:       store %struct.basket** %80, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !84
DSWP:       br i1 %65, label %.loopexit.loopexit1.loopexit, label %66, !prof !733, !pdg.inst.id !214
DSWP:       %65 = icmp eq %struct.basket* %64, null, !pdg.inst.id !209
DSWP:       store i64 %58, i64* %67, align 8, !tbaa !729, !pdg.inst.id !196
DSWP:       %67 = getelementptr inbounds %struct.basket, %struct.basket* %64, i64 0, i32 3, !pdg.inst.id !211
DSWP:       %70 = load %struct.basket*, %struct.basket** %69, align 8, !tbaa !724, !pdg.inst.id !219
DSWP:       store i64 %77, i64* %78, align 8, !tbaa !729, !pdg.inst.id !238
DSWP:       %82 = icmp eq i64 %81, 61, !pdg.inst.id !245
DSWP:       %69 = getelementptr inbounds %struct.basket*, %struct.basket** %68, i64 1, !pdg.inst.id !217
DSWP:       %64 = select i1 %63, %struct.basket* %60, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:       %59 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !88
DSWP:       %78 = getelementptr inbounds %struct.basket, %struct.basket* %74, i64 0, i32 3, !pdg.inst.id !231
DSWP:       %74 = select i1 %73, %struct.basket* %70, %struct.basket* null, !prof !734, !pdg.inst.id !222
DSWP:       br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:       %73 = icmp sgt i64 %72, -1, !pdg.inst.id !228
DSWP:       %63 = icmp sgt i64 %62, -1, !pdg.inst.id !206
DSWP:       %77 = add nuw nsw i64 %58, 1, !pdg.inst.id !194
DSWP:       br i1 %75, label %.loopexit.loopexit1.loopexit, label %76, !prof !735, !pdg.inst.id !236
DSWP:       %80 = getelementptr inbounds %struct.basket*, %struct.basket** %79, i64 1, !pdg.inst.id !241
DSWP:       %81 = add nuw nsw i64 %58, 2, !pdg.inst.id !192
DSWP:       %72 = load i64, i64* %71, align 8, !tbaa !729, !pdg.inst.id !226
DSWP:       %62 = load i64, i64* %61, align 8, !tbaa !729, !pdg.inst.id !204
DSWP:       %61 = getelementptr inbounds %struct.basket, %struct.basket* %60, i64 0, i32 3, !pdg.inst.id !202
DSWP:       %79 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !86
DSWP:       %71 = getelementptr inbounds %struct.basket, %struct.basket* %70, i64 0, i32 3, !pdg.inst.id !224
DSWP:       %60 = load %struct.basket*, %struct.basket** %59, align 8, !tbaa !724, !pdg.inst.id !198
DSWP:       %75 = icmp eq %struct.basket* %74, null, !pdg.inst.id !233
DSWP:       %58 = phi i64 [ %81, %76 ], [ 1, %.preheader1.preheader ], !pdg.inst.id !191
DSWP:   SCC: 1 Internal nodes:
DSWP:       store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:       store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:   Set:  0
DSWP:    Children: Set:  1; 
DSWP:    Parents: 
DSWP:   Set:  1
DSWP:    Children: 
DSWP:    Parents: Set:  0; 
DSWP:  There are 2 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 30
DSWP:     	  store %struct.basket** %69, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !90
DSWP:     	  %68 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !92
DSWP:     	  store %struct.basket** %80, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !84
DSWP:     	  br i1 %65, label %.loopexit.loopexit1.loopexit, label %66, !prof !733, !pdg.inst.id !214
DSWP:     	  %65 = icmp eq %struct.basket* %64, null, !pdg.inst.id !209
DSWP:     	  store i64 %58, i64* %67, align 8, !tbaa !729, !pdg.inst.id !196
DSWP:     	  %67 = getelementptr inbounds %struct.basket, %struct.basket* %64, i64 0, i32 3, !pdg.inst.id !211
DSWP:     	  %70 = load %struct.basket*, %struct.basket** %69, align 8, !tbaa !724, !pdg.inst.id !219
DSWP:     	  store i64 %77, i64* %78, align 8, !tbaa !729, !pdg.inst.id !238
DSWP:     	  %82 = icmp eq i64 %81, 61, !pdg.inst.id !245
DSWP:     	  %69 = getelementptr inbounds %struct.basket*, %struct.basket** %68, i64 1, !pdg.inst.id !217
DSWP:     	  %64 = select i1 %63, %struct.basket* %60, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:     	  %59 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !88
DSWP:     	  %78 = getelementptr inbounds %struct.basket, %struct.basket* %74, i64 0, i32 3, !pdg.inst.id !231
DSWP:     	  %74 = select i1 %73, %struct.basket* %70, %struct.basket* null, !prof !734, !pdg.inst.id !222
DSWP:     	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	  %73 = icmp sgt i64 %72, -1, !pdg.inst.id !228
DSWP:     	  %63 = icmp sgt i64 %62, -1, !pdg.inst.id !206
DSWP:     	  %77 = add nuw nsw i64 %58, 1, !pdg.inst.id !194
DSWP:     	  br i1 %75, label %.loopexit.loopexit1.loopexit, label %76, !prof !735, !pdg.inst.id !236
DSWP:     	  %80 = getelementptr inbounds %struct.basket*, %struct.basket** %79, i64 1, !pdg.inst.id !241
DSWP:     	  %81 = add nuw nsw i64 %58, 2, !pdg.inst.id !192
DSWP:     	  %72 = load i64, i64* %71, align 8, !tbaa !729, !pdg.inst.id !226
DSWP:     	  %62 = load i64, i64* %61, align 8, !tbaa !729, !pdg.inst.id !204
DSWP:     	  %61 = getelementptr inbounds %struct.basket, %struct.basket* %60, i64 0, i32 3, !pdg.inst.id !202
DSWP:     	  %79 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !86
DSWP:     	  %71 = getelementptr inbounds %struct.basket, %struct.basket* %70, i64 0, i32 3, !pdg.inst.id !224
DSWP:     	  %60 = load %struct.basket*, %struct.basket** %59, align 8, !tbaa !724, !pdg.inst.id !198
DSWP:     	  %75 = icmp eq %struct.basket* %74, null, !pdg.inst.id !233
DSWP:     	  %58 = phi i64 [ %81, %76 ], [ 1, %.preheader1.preheader ], !pdg.inst.id !191
DSWP:     External nodes: 2
DSWP:     	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:     	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:     Edges: 145
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  %58 = phi i64 [ %81, %76 ], [ 1, %.preheader1.preheader ], !pdg.inst.id !191
DSWP:     	CTRL
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  %59 = load %struct.basket**, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !88
DSWP:     	CTRL
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  %60 = load %struct.basket*, %struct.basket** %59, align 8, !tbaa !724, !pdg.inst.id !198
DSWP:     	CTRL
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  %61 = getelementptr inbounds %struct.basket, %struct.basket* %60, i64 0, i32 3, !pdg.inst.id !202
DSWP:     	CTRL
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  %62 = load i64, i64* %61, align 8, !tbaa !729, !pdg.inst.id !204
DSWP:     	CTRL
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  %63 = icmp sgt i64 %62, -1, !pdg.inst.id !206
DSWP:     	CTRL
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  %64 = select i1 %63, %struct.basket* %60, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:     	CTRL
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  %65 = icmp eq %struct.basket* %64, null, !pdg.inst.id !209
DSWP:     	CTRL
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  br i1 %65, label %.loopexit.loopexit1.loopexit, label %66, !prof !733, !pdg.inst.id !214
DSWP:     	CTRL
DSWP:     	From:	  %81 = add nuw nsw i64 %58, 2, !pdg.inst.id !192
DSWP:     	To:	  %58 = phi i64 [ %81, %76 ], [ 1, %.preheader1.preheader ], !pdg.inst.id !191
DSWP:     	RAW (must)
DSWP:     	From:	  %81 = add nuw nsw i64 %58, 2, !pdg.inst.id !192
DSWP:     	To:	  %82 = icmp eq i64 %81, 61, !pdg.inst.id !245
DSWP:     	RAW (must)
DSWP:     	From:	  %80 = getelementptr inbounds %struct.basket*, %struct.basket** %79, i64 1, !pdg.inst.id !241
DSWP:     	To:	  store %struct.basket** %80, %struct.basket*** %9, align 8, !tbaa !724, !pdg.inst.id !84
DSWP:     	RAW (must)
DSWP:     	From:	  %77 = add nuw nsw i64 %58, 1, !pdg.inst.id !194
DSWP:     	To:	  store i64 %77, i64* %78, align 8, !tbaa !729, !pdg.inst.id !238
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %75, label %.loopexit.loopexit1.loopexit, label %76, !prof !735, !pdg.inst.id !236
DSWP:     	To:	  %77 = add nuw nsw i64 %58, 1, !pdg.inst.id !194
DSWP:     	CTRL
DSWP:     	From:	  br i1 %75, label %.loopexit.loopexit1.loopexit, label %76, !prof !735, !pdg.inst.id !236
DSWP:     	To:	  %78 = getelementptr inbounds %struct.basket, %struct.basket* %74, i64 0, i32 3, !pdg.inst.id !231
DSWP:     	CTRL
DSWP:     	....
DSWP:    
DSWP:    Stage: 1
DSWP:     Internal nodes: 2
DSWP:     	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:     	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:     External nodes: 4
DSWP:     	  br i1 %65, label %.loopexit.loopexit1.loopexit, label %66, !prof !733, !pdg.inst.id !214
DSWP:     	  %64 = select i1 %63, %struct.basket* %60, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:     	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	  %74 = select i1 %73, %struct.basket* %70, %struct.basket* null, !prof !734, !pdg.inst.id !222
DSWP:     Edges: 8
DSWP:     	From:	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:     	To:	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:     	WAW (must) from memory 
DSWP:     	From:	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:     	To:	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:     	WAW (must) from memory 
DSWP:     	From:	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:     	To:	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:     	WAW (must) from memory 
DSWP:     	From:	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:     	To:	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:     	WAW (must) from memory 
DSWP:     	From:	  %74 = select i1 %73, %struct.basket* %70, %struct.basket* null, !prof !734, !pdg.inst.id !222
DSWP:     	To:	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %65, label %.loopexit.loopexit1.loopexit, label %66, !prof !733, !pdg.inst.id !214
DSWP:     	To:	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:     	CTRL
DSWP:     	From:	  %64 = select i1 %63, %struct.basket* %60, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:     	To:	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:     	To:	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:     	CTRL
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 23 24 25 26 27 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 
DSWP:      Pop value queues: 23 24 25 26 27 
DSWP:    Queue: 0
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %37 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 4, !pdg.inst.id !92
DSWP:    Queue: 1
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:    Queue: 2
DSWP:     Producer:	  %38 = load i16, i16* %37, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     Consumer:	  %39 = icmp eq i16 %38, 2, !pdg.inst.id !229
DSWP:    Queue: 3
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %40 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 7, !pdg.inst.id !133
DSWP:    Queue: 4
DSWP:     Producer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %43 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 4, !pdg.inst.id !61
DSWP:    Queue: 5
DSWP:     Producer:	  %44 = load i16, i16* %43, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     Consumer:	  %45 = icmp eq i16 %44, 2, !pdg.inst.id !89
DSWP:    Queue: 6
DSWP:     Producer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %46 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 7, !pdg.inst.id !59
DSWP:    Queue: 7
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 8
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 9
DSWP:     Producer:	  %88 = load %struct.node*, %struct.node** %87, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     Consumer:	  %89 = getelementptr inbounds %struct.node, %struct.node* %88, i64 0, i32 12, !pdg.inst.id !148
DSWP:    Queue: 10
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:    Queue: 11
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 12
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 13
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 14
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 15
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 16
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:    Queue: 17
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 18
DSWP:     Producer:	  %94 = load %struct.node*, %struct.node** %93, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     Consumer:	  %95 = getelementptr inbounds %struct.node, %struct.node* %94, i64 0, i32 12, !pdg.inst.id !52
DSWP:    Queue: 19
DSWP:     Producer:	  %96 = load i32, i32* %95, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     Consumer:	  %97 = icmp sgt i32 %96, 0, !pdg.inst.id !237
DSWP:    Queue: 20
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 21
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 22
DSWP:     Producer:	  %106 = load i64, i64* %68, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     Consumer:	  %108 = sub i64 %107, %106, !pdg.inst.id !70
DSWP:    Queue: 23
DSWP:     Producer:	  %74 = select i1 %73, %struct.basket* %70, %struct.basket* null, !prof !734, !pdg.inst.id !222
DSWP:     Consumer:	  store %struct.basket* %74, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:    Queue: 24
DSWP:     Producer:	  %64 = select i1 %63, %struct.basket* %60, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:     Consumer:	  store %struct.basket* %64, %struct.basket** %2, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:    Queue: 25
DSWP:     Producer:	  %82 = icmp eq i64 %81, 61, !pdg.inst.id !245
DSWP:     Consumer:	  br i1 %82, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:    Queue: 26
DSWP:     Producer:	  %75 = icmp eq %struct.basket* %74, null, !pdg.inst.id !233
DSWP:     Consumer:	  br i1 %75, label %.loopexit.loopexit1.loopexit, label %76, !prof !735, !pdg.inst.id !236
DSWP:    Queue: 27
DSWP:     Producer:	  %65 = icmp eq %struct.basket* %64, null, !pdg.inst.id !209
DSWP:     Consumer:	  br i1 %65, label %.loopexit.loopexit1.loopexit, label %66, !prof !733, !pdg.inst.id !214
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %9 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !81
DSWP:    Pre loop env 2, producer:	  %2 = alloca %struct.basket*, align 8, !pdg.inst.id !42
DSWP:  Create 2 pipeline stages
Pipeline stage 0:

define void @22(i8*, i8*) {
  %3 = bitcast i8* %0 to [24 x i64]*
  %4 = bitcast i8* %1 to [28 x i8*]*
  %5 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 23
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.54"**
  %7 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %6
  %8 = alloca %struct.basket*
  %9 = bitcast %struct.basket** %8 to i64*
  %10 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 24
  %11 = bitcast i8** %10 to %"class.MARC::ThreadSafeQueue.54"**
  %12 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %11
  %13 = alloca %struct.basket*
  %14 = bitcast %struct.basket** %13 to i64*
  %15 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 25
  %16 = bitcast i8** %15 to %"class.MARC::ThreadSafeQueue.27"**
  %17 = load %"class.MARC::ThreadSafeQueue.27"*, %"class.MARC::ThreadSafeQueue.27"** %16
  %18 = alloca i1
  %19 = bitcast i1* %18 to i8*
  %20 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 26
  %21 = bitcast i8** %20 to %"class.MARC::ThreadSafeQueue.27"**
  %22 = load %"class.MARC::ThreadSafeQueue.27"*, %"class.MARC::ThreadSafeQueue.27"** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 27
  %26 = bitcast i8** %25 to %"class.MARC::ThreadSafeQueue.27"**
  %27 = load %"class.MARC::ThreadSafeQueue.27"*, %"class.MARC::ThreadSafeQueue.27"** %26
  %28 = alloca i1
  %29 = bitcast i1* %28 to i8*
  %30 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 0
  %31 = bitcast i64* %30 to %struct.basket****
  %32 = load %struct.basket***, %struct.basket**** %31
  %33 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 16
  %34 = bitcast i64* %33 to i32*
  br label %39

35:                                               ; preds = %38, %37, %36
  ret void

36:                                               ; No predecessors!
  store i32 0, i32* %34
  br label %35

37:                                               ; preds = %39, %58
  store i32 1, i32* %34
  br label %35

38:                                               ; preds = %78
  store i32 2, i32* %34
  br label %35

39:                                               ; preds = %2, %78
  %40 = phi i64 [ %83, %78 ], [ 1, %2 ], !pdg.inst.id !30
  %41 = load %struct.basket**, %struct.basket*** %32, align 8, !tbaa !31, !pdg.inst.id !35
  %42 = load %struct.basket*, %struct.basket** %41, align 8, !tbaa !31, !pdg.inst.id !36
  %43 = getelementptr inbounds %struct.basket, %struct.basket* %42, i64 0, i32 3, !pdg.inst.id !37
  %44 = load i64, i64* %43, align 8, !tbaa !38, !pdg.inst.id !41
  %45 = icmp sgt i64 %44, -1, !pdg.inst.id !42
  %46 = select i1 %45, %struct.basket* %42, %struct.basket* null, !prof !43, !pdg.inst.id !44
  store %struct.basket* %46, %struct.basket** %13
  %47 = load i64, i64* %14, align 8, !tbaa !45, !pdg.inst.id !49
  %48 = bitcast %"class.MARC::ThreadSafeQueue.54"* %12 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !50
  %49 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %48, align 8, !tbaa !51, !pdg.inst.id !53
  %50 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %49, i64 3, !pdg.inst.id !54
  %51 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %50, align 8, !pdg.inst.id !55
  call void %51(%"class.MARC::ThreadSafeQueue.54"* %12, i64 %47), !pdg.inst.id !56
  %52 = icmp eq %struct.basket* %46, null, !pdg.inst.id !57
  store i1 %52, i1* %28
  %53 = load i8, i8* %29, align 1, !tbaa !58, !pdg.inst.id !59
  %54 = bitcast %"class.MARC::ThreadSafeQueue.27"* %27 to void (%"class.MARC::ThreadSafeQueue.27"*, i8)***, !pdg.inst.id !60
  %55 = load void (%"class.MARC::ThreadSafeQueue.27"*, i8)**, void (%"class.MARC::ThreadSafeQueue.27"*, i8)*** %54, align 8, !tbaa !51, !pdg.inst.id !61
  %56 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.27"*, i8)*, void (%"class.MARC::ThreadSafeQueue.27"*, i8)** %55, i64 3, !pdg.inst.id !62
  %57 = load void (%"class.MARC::ThreadSafeQueue.27"*, i8)*, void (%"class.MARC::ThreadSafeQueue.27"*, i8)** %56, align 8, !pdg.inst.id !63
  call void %57(%"class.MARC::ThreadSafeQueue.27"* %27, i8 signext %53), !pdg.inst.id !64
  br i1 %52, label %37, label %58, !prof !65, !pdg.inst.id !66

58:                                               ; preds = %39
  %59 = getelementptr inbounds %struct.basket, %struct.basket* %46, i64 0, i32 3, !pdg.inst.id !67
  store i64 %40, i64* %59, align 8, !tbaa !38, !pdg.inst.id !68
  %60 = load %struct.basket**, %struct.basket*** %32, align 8, !tbaa !31, !pdg.inst.id !69
  %61 = getelementptr inbounds %struct.basket*, %struct.basket** %60, i64 1, !pdg.inst.id !70
  store %struct.basket** %61, %struct.basket*** %32, align 8, !tbaa !31, !pdg.inst.id !71
  %62 = load %struct.basket*, %struct.basket** %61, align 8, !tbaa !31, !pdg.inst.id !72
  %63 = getelementptr inbounds %struct.basket, %struct.basket* %62, i64 0, i32 3, !pdg.inst.id !73
  %64 = load i64, i64* %63, align 8, !tbaa !38, !pdg.inst.id !74
  %65 = icmp sgt i64 %64, -1, !pdg.inst.id !75
  %66 = select i1 %65, %struct.basket* %62, %struct.basket* null, !prof !76, !pdg.inst.id !77
  store %struct.basket* %66, %struct.basket** %8
  %67 = load i64, i64* %9, align 8, !tbaa !45, !pdg.inst.id !49
  %68 = bitcast %"class.MARC::ThreadSafeQueue.54"* %7 to void (%"class.MARC::ThreadSafeQueue.54"*, i64)***, !pdg.inst.id !50
  %69 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)**, void (%"class.MARC::ThreadSafeQueue.54"*, i64)*** %68, align 8, !tbaa !51, !pdg.inst.id !53
  %70 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %69, i64 3, !pdg.inst.id !54
  %71 = load void (%"class.MARC::ThreadSafeQueue.54"*, i64)*, void (%"class.MARC::ThreadSafeQueue.54"*, i64)** %70, align 8, !pdg.inst.id !55
  call void %71(%"class.MARC::ThreadSafeQueue.54"* %7, i64 %67), !pdg.inst.id !56
  %72 = icmp eq %struct.basket* %66, null, !pdg.inst.id !78
  store i1 %72, i1* %23
  %73 = load i8, i8* %24, align 1, !tbaa !58, !pdg.inst.id !59
  %74 = bitcast %"class.MARC::ThreadSafeQueue.27"* %22 to void (%"class.MARC::ThreadSafeQueue.27"*, i8)***, !pdg.inst.id !60
  %75 = load void (%"class.MARC::ThreadSafeQueue.27"*, i8)**, void (%"class.MARC::ThreadSafeQueue.27"*, i8)*** %74, align 8, !tbaa !51, !pdg.inst.id !61
  %76 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.27"*, i8)*, void (%"class.MARC::ThreadSafeQueue.27"*, i8)** %75, i64 3, !pdg.inst.id !62
  %77 = load void (%"class.MARC::ThreadSafeQueue.27"*, i8)*, void (%"class.MARC::ThreadSafeQueue.27"*, i8)** %76, align 8, !pdg.inst.id !63
  call void %77(%"class.MARC::ThreadSafeQueue.27"* %22, i8 signext %73), !pdg.inst.id !64
  br i1 %72, label %37, label %78, !prof !79, !pdg.inst.id !80

78:                                               ; preds = %58
  %79 = add nuw nsw i64 %40, 1, !pdg.inst.id !81
  %80 = getelementptr inbounds %struct.basket, %struct.basket* %66, i64 0, i32 3, !pdg.inst.id !82
  store i64 %79, i64* %80, align 8, !tbaa !38, !pdg.inst.id !83
  %81 = load %struct.basket**, %struct.basket*** %32, align 8, !tbaa !31, !pdg.inst.id !84
  %82 = getelementptr inbounds %struct.basket*, %struct.basket** %81, i64 1, !pdg.inst.id !85
  store %struct.basket** %82, %struct.basket*** %32, align 8, !tbaa !31, !pdg.inst.id !86
  %83 = add nuw nsw i64 %40, 2, !pdg.inst.id !87
  %84 = icmp eq i64 %83, 61, !pdg.inst.id !88
  store i1 %84, i1* %18
  %85 = load i8, i8* %19, align 1, !tbaa !58, !pdg.inst.id !59
  %86 = bitcast %"class.MARC::ThreadSafeQueue.27"* %17 to void (%"class.MARC::ThreadSafeQueue.27"*, i8)***, !pdg.inst.id !60
  %87 = load void (%"class.MARC::ThreadSafeQueue.27"*, i8)**, void (%"class.MARC::ThreadSafeQueue.27"*, i8)*** %86, align 8, !tbaa !51, !pdg.inst.id !61
  %88 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.27"*, i8)*, void (%"class.MARC::ThreadSafeQueue.27"*, i8)** %87, i64 3, !pdg.inst.id !62
  %89 = load void (%"class.MARC::ThreadSafeQueue.27"*, i8)*, void (%"class.MARC::ThreadSafeQueue.27"*, i8)** %88, align 8, !pdg.inst.id !63
  call void %89(%"class.MARC::ThreadSafeQueue.27"* %17, i8 signext %85), !pdg.inst.id !64
  br i1 %84, label %38, label %39, !prof !89, !pdg.inst.id !90
}

Pipeline stage 1:

define void @23(i8*, i8*) {
  %3 = bitcast i8* %0 to [24 x i64]*
  %4 = bitcast i8* %1 to [28 x i8*]*
  %5 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 23
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.54"**
  %7 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %6
  %8 = alloca %struct.basket*
  %9 = bitcast %struct.basket** %8 to i64*
  %10 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 24
  %11 = bitcast i8** %10 to %"class.MARC::ThreadSafeQueue.54"**
  %12 = load %"class.MARC::ThreadSafeQueue.54"*, %"class.MARC::ThreadSafeQueue.54"** %11
  %13 = alloca %struct.basket*
  %14 = bitcast %struct.basket** %13 to i64*
  %15 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 25
  %16 = bitcast i8** %15 to %"class.MARC::ThreadSafeQueue.27"**
  %17 = load %"class.MARC::ThreadSafeQueue.27"*, %"class.MARC::ThreadSafeQueue.27"** %16
  %18 = alloca i1
  %19 = bitcast i1* %18 to i8*
  %20 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 26
  %21 = bitcast i8** %20 to %"class.MARC::ThreadSafeQueue.27"**
  %22 = load %"class.MARC::ThreadSafeQueue.27"*, %"class.MARC::ThreadSafeQueue.27"** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [28 x i8*], [28 x i8*]* %4, i64 0, i64 27
  %26 = bitcast i8** %25 to %"class.MARC::ThreadSafeQueue.27"**
  %27 = load %"class.MARC::ThreadSafeQueue.27"*, %"class.MARC::ThreadSafeQueue.27"** %26
  %28 = alloca i1
  %29 = bitcast i1* %28 to i8*
  %30 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 8
  %31 = bitcast i64* %30 to %struct.basket***
  %32 = load %struct.basket**, %struct.basket*** %31
  %33 = getelementptr inbounds [24 x i64], [24 x i64]* %3, i64 0, i64 16
  %34 = bitcast i64* %33 to i32*
  br label %39

35:                                               ; preds = %38, %37, %36
  ret void

36:                                               ; No predecessors!
  store i32 0, i32* %34
  br label %35

37:                                               ; preds = %52, %39
  store i32 1, i32* %34
  br label %35

38:                                               ; preds = %65
  store i32 2, i32* %34
  br label %35

39:                                               ; preds = %2, %65
  %40 = bitcast %"class.MARC::ThreadSafeQueue.54"* %12 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !30
  %41 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %40, align 8, !tbaa !31, !pdg.inst.id !34
  %42 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %41, i64 1, !pdg.inst.id !35
  %43 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %42, align 8, !pdg.inst.id !36
  %44 = call zeroext i1 %43(%"class.MARC::ThreadSafeQueue.54"* %12, i64* dereferenceable(8) %14), !pdg.inst.id !37
  %45 = load %struct.basket*, %struct.basket** %13
  store %struct.basket* %45, %struct.basket** %32, align 8, !tbaa !38, !pdg.inst.id !42
  %46 = bitcast %"class.MARC::ThreadSafeQueue.27"* %27 to i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)***, !pdg.inst.id !43
  %47 = load i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)**, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*** %46, align 8, !tbaa !31, !pdg.inst.id !44
  %48 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)** %47, i64 1, !pdg.inst.id !45
  %49 = load i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)** %48, align 8, !pdg.inst.id !46
  %50 = call zeroext i1 %49(%"class.MARC::ThreadSafeQueue.27"* %27, i8* dereferenceable(1) %29), !pdg.inst.id !47
  %51 = load i1, i1* %28
  br i1 %51, label %37, label %52, !prof !48, !pdg.inst.id !49

52:                                               ; preds = %39
  %53 = bitcast %"class.MARC::ThreadSafeQueue.54"* %7 to i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)***, !pdg.inst.id !30
  %54 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)**, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*** %53, align 8, !tbaa !31, !pdg.inst.id !34
  %55 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %54, i64 1, !pdg.inst.id !35
  %56 = load i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)*, i1 (%"class.MARC::ThreadSafeQueue.54"*, i64*)** %55, align 8, !pdg.inst.id !36
  %57 = call zeroext i1 %56(%"class.MARC::ThreadSafeQueue.54"* %7, i64* dereferenceable(8) %9), !pdg.inst.id !37
  %58 = load %struct.basket*, %struct.basket** %8
  store %struct.basket* %58, %struct.basket** %32, align 8, !tbaa !38, !pdg.inst.id !50
  %59 = bitcast %"class.MARC::ThreadSafeQueue.27"* %22 to i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)***, !pdg.inst.id !43
  %60 = load i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)**, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*** %59, align 8, !tbaa !31, !pdg.inst.id !44
  %61 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)** %60, i64 1, !pdg.inst.id !45
  %62 = load i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)** %61, align 8, !pdg.inst.id !46
  %63 = call zeroext i1 %62(%"class.MARC::ThreadSafeQueue.27"* %22, i8* dereferenceable(1) %24), !pdg.inst.id !47
  %64 = load i1, i1* %23
  br i1 %64, label %37, label %65, !prof !51, !pdg.inst.id !52

65:                                               ; preds = %52
  %66 = bitcast %"class.MARC::ThreadSafeQueue.27"* %17 to i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)***, !pdg.inst.id !43
  %67 = load i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)**, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*** %66, align 8, !tbaa !31, !pdg.inst.id !44
  %68 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)** %67, i64 1, !pdg.inst.id !45
  %69 = load i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)*, i1 (%"class.MARC::ThreadSafeQueue.27"*, i8*)** %68, align 8, !pdg.inst.id !46
  %70 = call zeroext i1 %69(%"class.MARC::ThreadSafeQueue.27"* %17, i8* dereferenceable(1) %19), !pdg.inst.id !47
  %71 = load i1, i1* %18
  br i1 %71, label %38, label %39, !prof !53, !pdg.inst.id !54
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: nounwind uwtable
define dso_local void @markBaskets(i64) local_unnamed_addr #3 !prof !30 !pdg.args.id !31 !pdg.edges !33 {
  %2 = alloca [24 x i64]
  %3 = bitcast [24 x i64]* %2 to i8*
  %4 = getelementptr inbounds [24 x i64], [24 x i64]* %2, i64 0, i64 0
  %5 = bitcast i64* %4 to %struct.basket****
  %6 = getelementptr inbounds [24 x i64], [24 x i64]* %2, i64 0, i64 8
  %7 = bitcast i64* %6 to %struct.basket***
  %8 = getelementptr inbounds [24 x i64], [24 x i64]* %2, i64 0, i64 16
  %9 = bitcast i64* %8 to i32*
  %10 = alloca %struct.basket*, align 8, !pdg.inst.id !42
  %11 = alloca %struct.basket*, align 8, !pdg.inst.id !59
  %12 = bitcast %struct.basket** %10 to i8*, !pdg.inst.id !57
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #39, !pdg.inst.id !69
  %13 = bitcast %struct.basket** %11 to i8*, !pdg.inst.id !65
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #39, !pdg.inst.id !73
  %14 = icmp sgt i64 %0, 1, !pdg.inst.id !40
  %15 = bitcast %struct.basket** %11 to i64*, !pdg.inst.id !63
  %16 = bitcast %struct.basket** %10 to i64*, !pdg.inst.id !53
  %17 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !81
  br i1 %14, label %.preheader.preheader, label %.preheader1.preheader, !prof !728, !pdg.inst.id !75

.preheader1.preheader:                            ; preds = %1
  %18 = load i32, i32* @5
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %93, label %.preheader1

.preheader.preheader:                             ; preds = %1
  br label %.preheader, !pdg.inst.id !572

.preheader:                                       ; preds = %.preheader.preheader, %30
  %20 = phi %struct.basket*** [ %32, %30 ], [ %17, %.preheader.preheader ], !pdg.inst.id !82
  %21 = phi i64 [ %.lcssa, %30 ], [ 0, %.preheader.preheader ], !pdg.inst.id !98
  %22 = phi i64 [ %36, %30 ], [ 1, %.preheader.preheader ], !pdg.inst.id !101
  %23 = load %struct.basket**, %struct.basket*** %20, align 8, !tbaa !724, !pdg.inst.id !96
  %24 = load %struct.basket*, %struct.basket** %23, align 8, !tbaa !724, !pdg.inst.id !106
  %25 = getelementptr inbounds %struct.basket, %struct.basket* %24, i64 0, i32 3, !pdg.inst.id !110
  %26 = load i64, i64* %25, align 8, !tbaa !729, !pdg.inst.id !112
  %27 = icmp sgt i64 %26, -1, !pdg.inst.id !114
  %28 = select i1 %27, %struct.basket* %24, %struct.basket* null, !pdg.inst.id !108
  %29 = select i1 %27, i64 0, i64 %21, !pdg.inst.id !99
  store %struct.basket* %28, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !51
  br label %38, !pdg.inst.id !580

30:                                               ; preds = %65
  %31 = getelementptr inbounds %struct.basket, %struct.basket* %66, i64 0, i32 3, !pdg.inst.id !121
  store i64 %22, i64* %31, align 8, !tbaa !729, !pdg.inst.id !104
  %32 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !123
  %33 = getelementptr inbounds %struct.basket**, %struct.basket*** %32, i64 %.lcssa, !pdg.inst.id !125
  %34 = load %struct.basket**, %struct.basket*** %33, align 8, !tbaa !724, !pdg.inst.id !129
  %35 = getelementptr inbounds %struct.basket*, %struct.basket** %34, i64 1, !pdg.inst.id !131
  store %struct.basket** %35, %struct.basket*** %33, align 8, !tbaa !724, !pdg.inst.id !127
  %36 = add nuw nsw i64 %22, 1, !pdg.inst.id !102
  %37 = icmp eq i64 %36, 61, !pdg.inst.id !134
  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137

38:                                               ; preds = %63, %.preheader
  %39 = phi %struct.basket*** [ %20, %.preheader ], [ %64, %63 ], !pdg.inst.id !94
  %40 = phi i64 [ %29, %.preheader ], [ %60, %63 ], !pdg.inst.id !119
  %41 = phi i64 [ 1, %.preheader ], [ %61, %63 ], !pdg.inst.id !143
  %42 = getelementptr inbounds %struct.basket**, %struct.basket*** %39, i64 %41, !pdg.inst.id !139
  %43 = load %struct.basket**, %struct.basket*** %42, align 8, !tbaa !724, !pdg.inst.id !148
  %44 = load %struct.basket*, %struct.basket** %43, align 8, !tbaa !724, !pdg.inst.id !150
  store %struct.basket* %44, %struct.basket** %11, align 8, !tbaa !724, !pdg.inst.id !61
  %45 = getelementptr inbounds %struct.basket, %struct.basket* %44, i64 0, i32 3, !pdg.inst.id !154
  %46 = load i64, i64* %45, align 8, !tbaa !729, !pdg.inst.id !157
  %47 = icmp sgt i64 %46, -1, !pdg.inst.id !159
  br i1 %47, label %48, label %59, !pdg.inst.id !161

48:                                               ; preds = %38
  %49 = ptrtoint %struct.basket* %44 to i64, !pdg.inst.id !152
  %50 = load %struct.basket*, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !47
  %51 = icmp eq %struct.basket* %50, null, !pdg.inst.id !165
  br i1 %51, label %57, label %52, !pdg.inst.id !167

52:                                               ; preds = %48
  %53 = call i32 @cost_compare(%struct.basket** nonnull %11, %struct.basket** nonnull %10) #39, !pdg.inst.id !45
  %54 = icmp slt i32 %53, 0, !pdg.inst.id !169
  br i1 %54, label %55, label %59, !pdg.inst.id !171

55:                                               ; preds = %52
  %56 = load i64, i64* %15, align 8, !tbaa !724, !pdg.inst.id !77
  br label %57, !pdg.inst.id !645

57:                                               ; preds = %55, %48
  %58 = phi i64 [ %56, %55 ], [ %49, %48 ], !pdg.inst.id !163
  store i64 %58, i64* %16, align 8, !tbaa !724, !pdg.inst.id !79
  br label %59, !pdg.inst.id !649

59:                                               ; preds = %57, %52, %38
  %60 = phi i64 [ %41, %57 ], [ %40, %52 ], [ %40, %38 ], !pdg.inst.id !141
  %61 = add nuw nsw i64 %41, 1, !pdg.inst.id !144
  %62 = icmp eq i64 %61, %0, !pdg.inst.id !35
  br i1 %62, label %65, label %63, !pdg.inst.id !180

63:                                               ; preds = %59
  %64 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
  br label %38, !pdg.inst.id !666

65:                                               ; preds = %59
  %.lcssa = phi i64 [ %60, %59 ], !pdg.inst.id !175
  %66 = load %struct.basket*, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !49
  %67 = icmp eq %struct.basket* %66, null, !pdg.inst.id !187
  br i1 %67, label %.loopexit.loopexit, label %30, !pdg.inst.id !189

.preheader1:                                      ; preds = %.preheader1.preheader, %86
  %68 = phi i64 [ %91, %86 ], [ 1, %.preheader1.preheader ], !pdg.inst.id !191
  %69 = load %struct.basket**, %struct.basket*** %17, align 8, !tbaa !724, !pdg.inst.id !88
  %70 = load %struct.basket*, %struct.basket** %69, align 8, !tbaa !724, !pdg.inst.id !198
  %71 = getelementptr inbounds %struct.basket, %struct.basket* %70, i64 0, i32 3, !pdg.inst.id !202
  %72 = load i64, i64* %71, align 8, !tbaa !729, !pdg.inst.id !204
  %73 = icmp sgt i64 %72, -1, !pdg.inst.id !206
  %74 = select i1 %73, %struct.basket* %70, %struct.basket* null, !prof !732, !pdg.inst.id !200
  store %struct.basket* %74, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !55
  %75 = icmp eq %struct.basket* %74, null, !pdg.inst.id !209
  br i1 %75, label %.loopexit.loopexit1.loopexit, label %76, !prof !733, !pdg.inst.id !214

76:                                               ; preds = %.preheader1
  %77 = getelementptr inbounds %struct.basket, %struct.basket* %74, i64 0, i32 3, !pdg.inst.id !211
  store i64 %68, i64* %77, align 8, !tbaa !729, !pdg.inst.id !196
  %78 = load %struct.basket**, %struct.basket*** %17, align 8, !tbaa !724, !pdg.inst.id !92
  %79 = getelementptr inbounds %struct.basket*, %struct.basket** %78, i64 1, !pdg.inst.id !217
  store %struct.basket** %79, %struct.basket*** %17, align 8, !tbaa !724, !pdg.inst.id !90
  %80 = load %struct.basket*, %struct.basket** %79, align 8, !tbaa !724, !pdg.inst.id !219
  %81 = getelementptr inbounds %struct.basket, %struct.basket* %80, i64 0, i32 3, !pdg.inst.id !224
  %82 = load i64, i64* %81, align 8, !tbaa !729, !pdg.inst.id !226
  %83 = icmp sgt i64 %82, -1, !pdg.inst.id !228
  %84 = select i1 %83, %struct.basket* %80, %struct.basket* null, !prof !734, !pdg.inst.id !222
  store %struct.basket* %84, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !43
  %85 = icmp eq %struct.basket* %84, null, !pdg.inst.id !233
  br i1 %85, label %.loopexit.loopexit1.loopexit, label %86, !prof !735, !pdg.inst.id !236

.loopexit.loopexit:                               ; preds = %30, %65
  br label %.loopexit, !pdg.inst.id !709

.loopexit.loopexit1.loopexit:                     ; preds = %130, %130, %.preheader1, %76
  br label %.loopexit.loopexit1, !pdg.inst.id !698

.loopexit.loopexit1:                              ; preds = %.loopexit.loopexit1.loopexit, %..loopexit.loopexit1_crit_edge
  br label %.loopexit, !pdg.inst.id !712

.loopexit:                                        ; preds = %.loopexit.loopexit1, %.loopexit.loopexit
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #39, !pdg.inst.id !71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #39, !pdg.inst.id !67
  ret void, !pdg.inst.id !736

86:                                               ; preds = %76
  %87 = add nuw nsw i64 %68, 1, !pdg.inst.id !194
  %88 = getelementptr inbounds %struct.basket, %struct.basket* %84, i64 0, i32 3, !pdg.inst.id !231
  store i64 %87, i64* %88, align 8, !tbaa !729, !pdg.inst.id !238
  %89 = load %struct.basket**, %struct.basket*** %17, align 8, !tbaa !724, !pdg.inst.id !86
  %90 = getelementptr inbounds %struct.basket*, %struct.basket** %89, i64 1, !pdg.inst.id !241
  store %struct.basket** %90, %struct.basket*** %17, align 8, !tbaa !724, !pdg.inst.id !84
  %91 = add nuw nsw i64 %68, 2, !pdg.inst.id !192
  %92 = icmp eq i64 %91, 61, !pdg.inst.id !245
  br i1 %92, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247

..loopexit.loopexit1_crit_edge:                   ; preds = %130, %86
  br label %.loopexit.loopexit1, !pdg.inst.id !723

93:                                               ; preds = %.preheader1.preheader
  store i32 1, i32* @5
  store %struct.basket*** %17, %struct.basket**** %5
  store %struct.basket** %10, %struct.basket*** %7
  %94 = alloca [2 x i8*]
  %95 = getelementptr inbounds [2 x i8*], [2 x i8*]* %94, i64 0, i64 0
  %96 = bitcast i8** %95 to void (i8*, i8*)**
  store void (i8*, i8*)* @23, void (i8*, i8*)** %96
  %97 = getelementptr inbounds [2 x i8*], [2 x i8*]* %94, i64 0, i64 1
  %98 = bitcast i8** %97 to void (i8*, i8*)**
  store void (i8*, i8*)* @24, void (i8*, i8*)** %98
  %99 = bitcast [2 x i8*]* %94 to i8*
  %100 = alloca [28 x i64]
  %101 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 0
  store i64 64, i64* %101
  %102 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 1
  store i64 64, i64* %102
  %103 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 2
  store i64 16, i64* %103
  %104 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 3
  store i64 64, i64* %104
  %105 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 4
  store i64 64, i64* %105
  %106 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 5
  store i64 16, i64* %106
  %107 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 6
  store i64 64, i64* %107
  %108 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 7
  store i64 64, i64* %108
  %109 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 8
  store i64 64, i64* %109
  %110 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 9
  store i64 64, i64* %110
  %111 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 10
  store i64 32, i64* %111
  %112 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 11
  store i64 64, i64* %112
  %113 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 12
  store i64 32, i64* %113
  %114 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 13
  store i64 64, i64* %114
  %115 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 14
  store i64 32, i64* %115
  %116 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 15
  store i64 64, i64* %116
  %117 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 16
  store i64 32, i64* %117
  %118 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 17
  store i64 64, i64* %118
  %119 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 18
  store i64 64, i64* %119
  %120 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 19
  store i64 32, i64* %120
  %121 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 20
  store i64 32, i64* %121
  %122 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 21
  store i64 64, i64* %122
  %123 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 22
  store i64 64, i64* %123
  %124 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 23
  store i64 64, i64* %124
  %125 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 24
  store i64 64, i64* %125
  %126 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 25
  store i64 1, i64* %126
  %127 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 26
  store i64 1, i64* %127
  %128 = getelementptr inbounds [28 x i64], [28 x i64]* %100, i64 0, i64 27
  store i64 1, i64* %128
  %129 = bitcast [28 x i64]* %100 to i64*
  call void @stageDispatcher(i8* %3, i64* %129, i8* %99, i64 2, i64 28)
  br label %130

130:                                              ; preds = %93
  %131 = getelementptr inbounds [24 x i64], [24 x i64]* %2, i64 0, i64 16
  %132 = load i64, i64* %131
  %133 = trunc i64 %132 to i32
  store i32 0, i32* @5
  switch i32 %133, label %.loopexit.loopexit1.loopexit [
    i32 1, label %.loopexit.loopexit1.loopexit
    i32 2, label %..loopexit.loopexit1_crit_edge
  ]
}

Parallelizer: Exit
Parallelizer: Start
Parallelizer:  Function = "markBaskets"
Parallelizer:  Loop 6 = "  %23 = load %struct.basket**, %struct.basket*** %20, align 8, !tbaa !724, !pdg.inst.id !96"
Parallelizer:  Nesting level = 1
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 1
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       br i1 %54, label %55, label %59, !pdg.inst.id !171
DSWP:       %54 = icmp slt i32 %53, 0, !pdg.inst.id !169
DSWP:       %49 = ptrtoint %struct.basket* %44 to i64, !pdg.inst.id !152
DSWP:       br i1 %67, label %.loopexit.loopexit, label %30, !pdg.inst.id !189
DSWP:       %51 = icmp eq %struct.basket* %50, null, !pdg.inst.id !165
DSWP:       %33 = getelementptr inbounds %struct.basket**, %struct.basket*** %32, i64 %.lcssa, !pdg.inst.id !125
DSWP:       %60 = phi i64 [ %41, %57 ], [ %40, %52 ], [ %40, %38 ], !pdg.inst.id !141
DSWP:       %46 = load i64, i64* %45, align 8, !tbaa !729, !pdg.inst.id !157
DSWP:       %.lcssa = phi i64 [ %60, %59 ], !pdg.inst.id !175
DSWP:       %45 = getelementptr inbounds %struct.basket, %struct.basket* %44, i64 0, i32 3, !pdg.inst.id !154
DSWP:       %58 = phi i64 [ %56, %55 ], [ %49, %48 ], !pdg.inst.id !163
DSWP:       %44 = load %struct.basket*, %struct.basket** %43, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:       store i64 %58, i64* %16, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:       br i1 %51, label %57, label %52, !pdg.inst.id !167
DSWP:       %43 = load %struct.basket**, %struct.basket*** %42, align 8, !tbaa !724, !pdg.inst.id !148
DSWP:       %24 = load %struct.basket*, %struct.basket** %23, align 8, !tbaa !724, !pdg.inst.id !106
DSWP:       %23 = load %struct.basket**, %struct.basket*** %20, align 8, !tbaa !724, !pdg.inst.id !96
DSWP:       %62 = icmp eq i64 %61, %0, !pdg.inst.id !35
DSWP:       %31 = getelementptr inbounds %struct.basket, %struct.basket* %66, i64 0, i32 3, !pdg.inst.id !121
DSWP:       br i1 %62, label %65, label %63, !pdg.inst.id !180
DSWP:       store i64 %22, i64* %31, align 8, !tbaa !729, !pdg.inst.id !104
DSWP:       %66 = load %struct.basket*, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !49
DSWP:       br i1 %47, label %48, label %59, !pdg.inst.id !161
DSWP:       %34 = load %struct.basket**, %struct.basket*** %33, align 8, !tbaa !724, !pdg.inst.id !129
DSWP:       %41 = phi i64 [ 1, %.preheader ], [ %61, %63 ], !pdg.inst.id !143
DSWP:       br label %59, !pdg.inst.id !649
DSWP:       %35 = getelementptr inbounds %struct.basket*, %struct.basket** %34, i64 1, !pdg.inst.id !131
DSWP:       store %struct.basket** %35, %struct.basket*** %33, align 8, !tbaa !724, !pdg.inst.id !127
DSWP:       %36 = add nuw nsw i64 %22, 1, !pdg.inst.id !102
DSWP:       br label %38, !pdg.inst.id !666
DSWP:       %28 = select i1 %27, %struct.basket* %24, %struct.basket* null, !pdg.inst.id !108
DSWP:       %53 = call i32 @cost_compare(%struct.basket** nonnull %11, %struct.basket** nonnull %10) #39, !pdg.inst.id !45
DSWP:       %67 = icmp eq %struct.basket* %66, null, !pdg.inst.id !187
DSWP:       br label %38, !pdg.inst.id !580
DSWP:       %42 = getelementptr inbounds %struct.basket**, %struct.basket*** %39, i64 %41, !pdg.inst.id !139
DSWP:       br label %57, !pdg.inst.id !645
DSWP:       br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:       %37 = icmp eq i64 %36, 61, !pdg.inst.id !134
DSWP:       %61 = add nuw nsw i64 %41, 1, !pdg.inst.id !144
DSWP:       %39 = phi %struct.basket*** [ %20, %.preheader ], [ %64, %63 ], !pdg.inst.id !94
DSWP:       store %struct.basket* %44, %struct.basket** %11, align 8, !tbaa !724, !pdg.inst.id !61
DSWP:       %56 = load i64, i64* %15, align 8, !tbaa !724, !pdg.inst.id !77
DSWP:       %50 = load %struct.basket*, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !47
DSWP:       %32 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !123
DSWP:       %29 = select i1 %27, i64 0, i64 %21, !pdg.inst.id !99
DSWP:       %21 = phi i64 [ %.lcssa, %30 ], [ 0, %.preheader.preheader ], !pdg.inst.id !98
DSWP:       %27 = icmp sgt i64 %26, -1, !pdg.inst.id !114
DSWP:       %26 = load i64, i64* %25, align 8, !tbaa !729, !pdg.inst.id !112
DSWP:       %47 = icmp sgt i64 %46, -1, !pdg.inst.id !159
DSWP:       store %struct.basket* %28, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !51
DSWP:       %25 = getelementptr inbounds %struct.basket, %struct.basket* %24, i64 0, i32 3, !pdg.inst.id !110
DSWP:       %40 = phi i64 [ %29, %.preheader ], [ %60, %63 ], !pdg.inst.id !119
DSWP:       %20 = phi %struct.basket*** [ %32, %30 ], [ %17, %.preheader.preheader ], !pdg.inst.id !82
DSWP:       %64 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
DSWP:       %22 = phi i64 [ %36, %30 ], [ 1, %.preheader.preheader ], !pdg.inst.id !101
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  Final number of partitions: 1
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       br i1 %54, label %55, label %59, !pdg.inst.id !171
DSWP:       %54 = icmp slt i32 %53, 0, !pdg.inst.id !169
DSWP:       %49 = ptrtoint %struct.basket* %44 to i64, !pdg.inst.id !152
DSWP:       br i1 %67, label %.loopexit.loopexit, label %30, !pdg.inst.id !189
DSWP:       %51 = icmp eq %struct.basket* %50, null, !pdg.inst.id !165
DSWP:       %33 = getelementptr inbounds %struct.basket**, %struct.basket*** %32, i64 %.lcssa, !pdg.inst.id !125
DSWP:       %60 = phi i64 [ %41, %57 ], [ %40, %52 ], [ %40, %38 ], !pdg.inst.id !141
DSWP:       %46 = load i64, i64* %45, align 8, !tbaa !729, !pdg.inst.id !157
DSWP:       %.lcssa = phi i64 [ %60, %59 ], !pdg.inst.id !175
DSWP:       %45 = getelementptr inbounds %struct.basket, %struct.basket* %44, i64 0, i32 3, !pdg.inst.id !154
DSWP:       %58 = phi i64 [ %56, %55 ], [ %49, %48 ], !pdg.inst.id !163
DSWP:       %44 = load %struct.basket*, %struct.basket** %43, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:       store i64 %58, i64* %16, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:       br i1 %51, label %57, label %52, !pdg.inst.id !167
DSWP:       %43 = load %struct.basket**, %struct.basket*** %42, align 8, !tbaa !724, !pdg.inst.id !148
DSWP:       %24 = load %struct.basket*, %struct.basket** %23, align 8, !tbaa !724, !pdg.inst.id !106
DSWP:       %23 = load %struct.basket**, %struct.basket*** %20, align 8, !tbaa !724, !pdg.inst.id !96
DSWP:       %62 = icmp eq i64 %61, %0, !pdg.inst.id !35
DSWP:       %31 = getelementptr inbounds %struct.basket, %struct.basket* %66, i64 0, i32 3, !pdg.inst.id !121
DSWP:       br i1 %62, label %65, label %63, !pdg.inst.id !180
DSWP:       store i64 %22, i64* %31, align 8, !tbaa !729, !pdg.inst.id !104
DSWP:       %66 = load %struct.basket*, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !49
DSWP:       br i1 %47, label %48, label %59, !pdg.inst.id !161
DSWP:       %34 = load %struct.basket**, %struct.basket*** %33, align 8, !tbaa !724, !pdg.inst.id !129
DSWP:       %41 = phi i64 [ 1, %.preheader ], [ %61, %63 ], !pdg.inst.id !143
DSWP:       br label %59, !pdg.inst.id !649
DSWP:       %35 = getelementptr inbounds %struct.basket*, %struct.basket** %34, i64 1, !pdg.inst.id !131
DSWP:       store %struct.basket** %35, %struct.basket*** %33, align 8, !tbaa !724, !pdg.inst.id !127
DSWP:       %36 = add nuw nsw i64 %22, 1, !pdg.inst.id !102
DSWP:       br label %38, !pdg.inst.id !666
DSWP:       %28 = select i1 %27, %struct.basket* %24, %struct.basket* null, !pdg.inst.id !108
DSWP:       %53 = call i32 @cost_compare(%struct.basket** nonnull %11, %struct.basket** nonnull %10) #39, !pdg.inst.id !45
DSWP:       %67 = icmp eq %struct.basket* %66, null, !pdg.inst.id !187
DSWP:       br label %38, !pdg.inst.id !580
DSWP:       %42 = getelementptr inbounds %struct.basket**, %struct.basket*** %39, i64 %41, !pdg.inst.id !139
DSWP:       br label %57, !pdg.inst.id !645
DSWP:       br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:       %37 = icmp eq i64 %36, 61, !pdg.inst.id !134
DSWP:       %61 = add nuw nsw i64 %41, 1, !pdg.inst.id !144
DSWP:       %39 = phi %struct.basket*** [ %20, %.preheader ], [ %64, %63 ], !pdg.inst.id !94
DSWP:       store %struct.basket* %44, %struct.basket** %11, align 8, !tbaa !724, !pdg.inst.id !61
DSWP:       %56 = load i64, i64* %15, align 8, !tbaa !724, !pdg.inst.id !77
DSWP:       %50 = load %struct.basket*, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !47
DSWP:       %32 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !123
DSWP:       %29 = select i1 %27, i64 0, i64 %21, !pdg.inst.id !99
DSWP:       %21 = phi i64 [ %.lcssa, %30 ], [ 0, %.preheader.preheader ], !pdg.inst.id !98
DSWP:       %27 = icmp sgt i64 %26, -1, !pdg.inst.id !114
DSWP:       %26 = load i64, i64* %25, align 8, !tbaa !729, !pdg.inst.id !112
DSWP:       %47 = icmp sgt i64 %46, -1, !pdg.inst.id !159
DSWP:       store %struct.basket* %28, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !51
DSWP:       %25 = getelementptr inbounds %struct.basket, %struct.basket* %24, i64 0, i32 3, !pdg.inst.id !110
DSWP:       %40 = phi i64 [ %29, %.preheader ], [ %60, %63 ], !pdg.inst.id !119
DSWP:       %20 = phi %struct.basket*** [ %32, %30 ], [ %17, %.preheader.preheader ], !pdg.inst.id !82
DSWP:       %64 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
DSWP:       %22 = phi i64 [ %36, %30 ], [ 1, %.preheader.preheader ], !pdg.inst.id !101
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  There are 1 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 55
DSWP:     	  br i1 %54, label %55, label %59, !pdg.inst.id !171
DSWP:     	  %54 = icmp slt i32 %53, 0, !pdg.inst.id !169
DSWP:     	  %49 = ptrtoint %struct.basket* %44 to i64, !pdg.inst.id !152
DSWP:     	  br i1 %67, label %.loopexit.loopexit, label %30, !pdg.inst.id !189
DSWP:     	  %51 = icmp eq %struct.basket* %50, null, !pdg.inst.id !165
DSWP:     	  %33 = getelementptr inbounds %struct.basket**, %struct.basket*** %32, i64 %.lcssa, !pdg.inst.id !125
DSWP:     	  %60 = phi i64 [ %41, %57 ], [ %40, %52 ], [ %40, %38 ], !pdg.inst.id !141
DSWP:     	  %46 = load i64, i64* %45, align 8, !tbaa !729, !pdg.inst.id !157
DSWP:     	  %.lcssa = phi i64 [ %60, %59 ], !pdg.inst.id !175
DSWP:     	  %45 = getelementptr inbounds %struct.basket, %struct.basket* %44, i64 0, i32 3, !pdg.inst.id !154
DSWP:     	  %58 = phi i64 [ %56, %55 ], [ %49, %48 ], !pdg.inst.id !163
DSWP:     	  %44 = load %struct.basket*, %struct.basket** %43, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:     	  store i64 %58, i64* %16, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:     	  br i1 %51, label %57, label %52, !pdg.inst.id !167
DSWP:     	  %43 = load %struct.basket**, %struct.basket*** %42, align 8, !tbaa !724, !pdg.inst.id !148
DSWP:     	  %24 = load %struct.basket*, %struct.basket** %23, align 8, !tbaa !724, !pdg.inst.id !106
DSWP:     	  %23 = load %struct.basket**, %struct.basket*** %20, align 8, !tbaa !724, !pdg.inst.id !96
DSWP:     	  %62 = icmp eq i64 %61, %0, !pdg.inst.id !35
DSWP:     	  %31 = getelementptr inbounds %struct.basket, %struct.basket* %66, i64 0, i32 3, !pdg.inst.id !121
DSWP:     	  br i1 %62, label %65, label %63, !pdg.inst.id !180
DSWP:     	  store i64 %22, i64* %31, align 8, !tbaa !729, !pdg.inst.id !104
DSWP:     	  %66 = load %struct.basket*, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !49
DSWP:     	  br i1 %47, label %48, label %59, !pdg.inst.id !161
DSWP:     	  %34 = load %struct.basket**, %struct.basket*** %33, align 8, !tbaa !724, !pdg.inst.id !129
DSWP:     	  %41 = phi i64 [ 1, %.preheader ], [ %61, %63 ], !pdg.inst.id !143
DSWP:     	  br label %59, !pdg.inst.id !649
DSWP:     	  %35 = getelementptr inbounds %struct.basket*, %struct.basket** %34, i64 1, !pdg.inst.id !131
DSWP:     	  store %struct.basket** %35, %struct.basket*** %33, align 8, !tbaa !724, !pdg.inst.id !127
DSWP:     	  %36 = add nuw nsw i64 %22, 1, !pdg.inst.id !102
DSWP:     	  br label %38, !pdg.inst.id !666
DSWP:     	  %28 = select i1 %27, %struct.basket* %24, %struct.basket* null, !pdg.inst.id !108
DSWP:     	  %53 = call i32 @cost_compare(%struct.basket** nonnull %11, %struct.basket** nonnull %10) #39, !pdg.inst.id !45
DSWP:     	  %67 = icmp eq %struct.basket* %66, null, !pdg.inst.id !187
DSWP:     	  br label %38, !pdg.inst.id !580
DSWP:     	  %42 = getelementptr inbounds %struct.basket**, %struct.basket*** %39, i64 %41, !pdg.inst.id !139
DSWP:     	  br label %57, !pdg.inst.id !645
DSWP:     	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	  %37 = icmp eq i64 %36, 61, !pdg.inst.id !134
DSWP:     	  %61 = add nuw nsw i64 %41, 1, !pdg.inst.id !144
DSWP:     	  %39 = phi %struct.basket*** [ %20, %.preheader ], [ %64, %63 ], !pdg.inst.id !94
DSWP:     	  store %struct.basket* %44, %struct.basket** %11, align 8, !tbaa !724, !pdg.inst.id !61
DSWP:     	  %56 = load i64, i64* %15, align 8, !tbaa !724, !pdg.inst.id !77
DSWP:     	  %50 = load %struct.basket*, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !47
DSWP:     	  %32 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !123
DSWP:     	  %29 = select i1 %27, i64 0, i64 %21, !pdg.inst.id !99
DSWP:     	  %21 = phi i64 [ %.lcssa, %30 ], [ 0, %.preheader.preheader ], !pdg.inst.id !98
DSWP:     	  %27 = icmp sgt i64 %26, -1, !pdg.inst.id !114
DSWP:     	  %26 = load i64, i64* %25, align 8, !tbaa !729, !pdg.inst.id !112
DSWP:     	  %47 = icmp sgt i64 %46, -1, !pdg.inst.id !159
DSWP:     	  store %struct.basket* %28, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !51
DSWP:     	  %25 = getelementptr inbounds %struct.basket, %struct.basket* %24, i64 0, i32 3, !pdg.inst.id !110
DSWP:     	  %40 = phi i64 [ %29, %.preheader ], [ %60, %63 ], !pdg.inst.id !119
DSWP:     	  %20 = phi %struct.basket*** [ %32, %30 ], [ %17, %.preheader.preheader ], !pdg.inst.id !82
DSWP:     	  %64 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
DSWP:     	  %22 = phi i64 [ %36, %30 ], [ 1, %.preheader.preheader ], !pdg.inst.id !101
DSWP:     External nodes: 0
DSWP:     Edges: 195
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %21 = phi i64 [ %.lcssa, %30 ], [ 0, %.preheader.preheader ], !pdg.inst.id !98
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %22 = phi i64 [ %36, %30 ], [ 1, %.preheader.preheader ], !pdg.inst.id !101
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %23 = load %struct.basket**, %struct.basket*** %20, align 8, !tbaa !724, !pdg.inst.id !96
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %24 = load %struct.basket*, %struct.basket** %23, align 8, !tbaa !724, !pdg.inst.id !106
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %25 = getelementptr inbounds %struct.basket, %struct.basket* %24, i64 0, i32 3, !pdg.inst.id !110
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %42 = getelementptr inbounds %struct.basket**, %struct.basket*** %39, i64 %41, !pdg.inst.id !139
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %26 = load i64, i64* %25, align 8, !tbaa !729, !pdg.inst.id !112
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %29 = select i1 %27, i64 0, i64 %21, !pdg.inst.id !99
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %39 = phi %struct.basket*** [ %20, %.preheader ], [ %64, %63 ], !pdg.inst.id !94
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %.lcssa = phi i64 [ %60, %59 ], !pdg.inst.id !175
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %40 = phi i64 [ %29, %.preheader ], [ %60, %63 ], !pdg.inst.id !119
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %20 = phi %struct.basket*** [ %32, %30 ], [ %17, %.preheader.preheader ], !pdg.inst.id !82
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %44 = load %struct.basket*, %struct.basket** %43, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  %67 = icmp eq %struct.basket* %66, null, !pdg.inst.id !187
DSWP:     	CTRL
DSWP:     	From:	  br i1 %37, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137
DSWP:     	To:	  br i1 %67, label %.loopexit.loopexit, label %30, !pdg.inst.id !189
DSWP:     	CTRL
DSWP:     	....
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 
DSWP:      Pop value queues: 
DSWP:    Queue: 0
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %37 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 4, !pdg.inst.id !92
DSWP:    Queue: 1
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:    Queue: 2
DSWP:     Producer:	  %38 = load i16, i16* %37, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     Consumer:	  %39 = icmp eq i16 %38, 2, !pdg.inst.id !229
DSWP:    Queue: 3
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %40 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 7, !pdg.inst.id !133
DSWP:    Queue: 4
DSWP:     Producer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %43 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 4, !pdg.inst.id !61
DSWP:    Queue: 5
DSWP:     Producer:	  %44 = load i16, i16* %43, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     Consumer:	  %45 = icmp eq i16 %44, 2, !pdg.inst.id !89
DSWP:    Queue: 6
DSWP:     Producer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %46 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 7, !pdg.inst.id !59
DSWP:    Queue: 7
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 8
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 9
DSWP:     Producer:	  %88 = load %struct.node*, %struct.node** %87, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     Consumer:	  %89 = getelementptr inbounds %struct.node, %struct.node* %88, i64 0, i32 12, !pdg.inst.id !148
DSWP:    Queue: 10
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:    Queue: 11
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 12
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 13
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 14
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 15
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 16
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:    Queue: 17
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 18
DSWP:     Producer:	  %94 = load %struct.node*, %struct.node** %93, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     Consumer:	  %95 = getelementptr inbounds %struct.node, %struct.node* %94, i64 0, i32 12, !pdg.inst.id !52
DSWP:    Queue: 19
DSWP:     Producer:	  %96 = load i32, i32* %95, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     Consumer:	  %97 = icmp sgt i32 %96, 0, !pdg.inst.id !237
DSWP:    Queue: 20
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 21
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 22
DSWP:     Producer:	  %106 = load i64, i64* %68, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     Consumer:	  %108 = sub i64 %107, %106, !pdg.inst.id !70
DSWP:    Queue: 23
DSWP:     Producer:	  %84 = select i1 %83, %struct.basket* %80, %struct.basket* null, !prof !734, !pdg.inst.id !222
DSWP:     Consumer:	  store %struct.basket* %84, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:    Queue: 24
DSWP:     Producer:	  %74 = select i1 %73, %struct.basket* %70, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:     Consumer:	  store %struct.basket* %74, %struct.basket** %10, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:    Queue: 25
DSWP:     Producer:	  %92 = icmp eq i64 %91, 61, !pdg.inst.id !245
DSWP:     Consumer:	  br i1 %92, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:    Queue: 26
DSWP:     Producer:	  %85 = icmp eq %struct.basket* %84, null, !pdg.inst.id !233
DSWP:     Consumer:	  br i1 %85, label %.loopexit.loopexit1.loopexit, label %86, !prof !735, !pdg.inst.id !236
DSWP:    Queue: 27
DSWP:     Producer:	  %75 = icmp eq %struct.basket* %74, null, !pdg.inst.id !209
DSWP:     Consumer:	  br i1 %75, label %.loopexit.loopexit1.loopexit, label %76, !prof !733, !pdg.inst.id !214
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	i64 %0
DSWP:    Pre loop env 2, producer:	  %15 = bitcast %struct.basket** %11 to i64*, !pdg.inst.id !63
DSWP:    Pre loop env 3, producer:	  %17 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !81
DSWP:    Pre loop env 4, producer:	  %10 = alloca %struct.basket*, align 8, !pdg.inst.id !42
DSWP:    Pre loop env 5, producer:	  %11 = alloca %struct.basket*, align 8, !pdg.inst.id !59
DSWP:    Pre loop env 6, producer:	  %16 = bitcast %struct.basket** %10 to i64*, !pdg.inst.id !53
DSWP:  Create 1 pipeline stages
Pipeline stage 0:

define void @25(i8*, i8*) {
  %3 = bitcast i8* %0 to [56 x i64]*
  %4 = bitcast i8* %1 to [28 x i8*]*
  %5 = getelementptr inbounds [56 x i64], [56 x i64]* %3, i64 0, i64 0
  %6 = load i64, i64* %5
  %7 = getelementptr inbounds [56 x i64], [56 x i64]* %3, i64 0, i64 8
  %8 = bitcast i64* %7 to i64**
  %9 = load i64*, i64** %8
  %10 = getelementptr inbounds [56 x i64], [56 x i64]* %3, i64 0, i64 16
  %11 = bitcast i64* %10 to %struct.basket****
  %12 = load %struct.basket***, %struct.basket**** %11
  %13 = getelementptr inbounds [56 x i64], [56 x i64]* %3, i64 0, i64 24
  %14 = bitcast i64* %13 to %struct.basket***
  %15 = load %struct.basket**, %struct.basket*** %14
  %16 = getelementptr inbounds [56 x i64], [56 x i64]* %3, i64 0, i64 32
  %17 = bitcast i64* %16 to %struct.basket***
  %18 = load %struct.basket**, %struct.basket*** %17
  %19 = getelementptr inbounds [56 x i64], [56 x i64]* %3, i64 0, i64 40
  %20 = bitcast i64* %19 to i64**
  %21 = load i64*, i64** %20
  %22 = getelementptr inbounds [56 x i64], [56 x i64]* %3, i64 0, i64 48
  %23 = bitcast i64* %22 to i32*
  br label %27

24:                                               ; preds = %26, %25
  ret void

25:                                               ; No predecessors!
  store i32 0, i32* %23
  br label %24

26:                                               ; preds = %73, %38
  store i32 1, i32* %23
  br label %24

27:                                               ; preds = %2, %38
  %28 = phi %struct.basket*** [ %40, %38 ], [ %12, %2 ], !pdg.inst.id !30
  %29 = phi i64 [ %74, %38 ], [ 0, %2 ], !pdg.inst.id !31
  %30 = phi i64 [ %44, %38 ], [ 1, %2 ], !pdg.inst.id !32
  %31 = load %struct.basket**, %struct.basket*** %28, align 8, !tbaa !33, !pdg.inst.id !37
  %32 = load %struct.basket*, %struct.basket** %31, align 8, !tbaa !33, !pdg.inst.id !38
  %33 = getelementptr inbounds %struct.basket, %struct.basket* %32, i64 0, i32 3, !pdg.inst.id !39
  %34 = load i64, i64* %33, align 8, !tbaa !40, !pdg.inst.id !43
  %35 = icmp sgt i64 %34, -1, !pdg.inst.id !44
  %36 = select i1 %35, %struct.basket* %32, %struct.basket* null, !pdg.inst.id !45
  %37 = select i1 %35, i64 0, i64 %29, !pdg.inst.id !46
  store %struct.basket* %36, %struct.basket** %15, align 8, !tbaa !33, !pdg.inst.id !47
  br label %46, !pdg.inst.id !48

38:                                               ; preds = %73
  %39 = getelementptr inbounds %struct.basket, %struct.basket* %75, i64 0, i32 3, !pdg.inst.id !49
  store i64 %30, i64* %39, align 8, !tbaa !40, !pdg.inst.id !50
  %40 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !33, !pdg.inst.id !51
  %41 = getelementptr inbounds %struct.basket**, %struct.basket*** %40, i64 %74, !pdg.inst.id !52
  %42 = load %struct.basket**, %struct.basket*** %41, align 8, !tbaa !33, !pdg.inst.id !53
  %43 = getelementptr inbounds %struct.basket*, %struct.basket** %42, i64 1, !pdg.inst.id !54
  store %struct.basket** %43, %struct.basket*** %41, align 8, !tbaa !33, !pdg.inst.id !55
  %44 = add nuw nsw i64 %30, 1, !pdg.inst.id !56
  %45 = icmp eq i64 %44, 61, !pdg.inst.id !57
  br i1 %45, label %26, label %27, !pdg.inst.id !58

46:                                               ; preds = %27, %71
  %47 = phi %struct.basket*** [ %28, %27 ], [ %72, %71 ], !pdg.inst.id !59
  %48 = phi i64 [ %37, %27 ], [ %68, %71 ], !pdg.inst.id !60
  %49 = phi i64 [ 1, %27 ], [ %69, %71 ], !pdg.inst.id !61
  %50 = getelementptr inbounds %struct.basket**, %struct.basket*** %47, i64 %49, !pdg.inst.id !62
  %51 = load %struct.basket**, %struct.basket*** %50, align 8, !tbaa !33, !pdg.inst.id !63
  %52 = load %struct.basket*, %struct.basket** %51, align 8, !tbaa !33, !pdg.inst.id !64
  store %struct.basket* %52, %struct.basket** %18, align 8, !tbaa !33, !pdg.inst.id !65
  %53 = getelementptr inbounds %struct.basket, %struct.basket* %52, i64 0, i32 3, !pdg.inst.id !66
  %54 = load i64, i64* %53, align 8, !tbaa !40, !pdg.inst.id !67
  %55 = icmp sgt i64 %54, -1, !pdg.inst.id !68
  br i1 %55, label %56, label %67, !pdg.inst.id !69

56:                                               ; preds = %46
  %57 = ptrtoint %struct.basket* %52 to i64, !pdg.inst.id !70
  %58 = load %struct.basket*, %struct.basket** %15, align 8, !tbaa !33, !pdg.inst.id !71
  %59 = icmp eq %struct.basket* %58, null, !pdg.inst.id !72
  br i1 %59, label %65, label %60, !pdg.inst.id !73

60:                                               ; preds = %56
  %61 = call i32 @cost_compare(%struct.basket** nonnull %18, %struct.basket** nonnull %15) #39, !pdg.inst.id !74
  %62 = icmp slt i32 %61, 0, !pdg.inst.id !75
  br i1 %62, label %63, label %67, !pdg.inst.id !76

63:                                               ; preds = %60
  %64 = load i64, i64* %9, align 8, !tbaa !33, !pdg.inst.id !77
  br label %65, !pdg.inst.id !78

65:                                               ; preds = %63, %56
  %66 = phi i64 [ %64, %63 ], [ %57, %56 ], !pdg.inst.id !79
  store i64 %66, i64* %21, align 8, !tbaa !33, !pdg.inst.id !80
  br label %67, !pdg.inst.id !81

67:                                               ; preds = %46, %65, %60
  %68 = phi i64 [ %49, %65 ], [ %48, %60 ], [ %48, %46 ], !pdg.inst.id !82
  %69 = add nuw nsw i64 %49, 1, !pdg.inst.id !83
  %70 = icmp eq i64 %69, %6, !pdg.inst.id !84
  br i1 %70, label %73, label %71, !pdg.inst.id !85

71:                                               ; preds = %67
  %72 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !33, !pdg.inst.id !86
  br label %46, !pdg.inst.id !87

73:                                               ; preds = %67
  %74 = phi i64 [ %68, %67 ], !pdg.inst.id !88
  %75 = load %struct.basket*, %struct.basket** %15, align 8, !tbaa !33, !pdg.inst.id !89
  %76 = icmp eq %struct.basket* %75, null, !pdg.inst.id !90
  br i1 %76, label %26, label %38, !pdg.inst.id !91
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: nounwind uwtable
define dso_local void @markBaskets(i64) local_unnamed_addr #3 !prof !30 !pdg.args.id !31 !pdg.edges !33 {
  %2 = alloca [56 x i64]
  %3 = bitcast [56 x i64]* %2 to i8*
  %4 = getelementptr inbounds [56 x i64], [56 x i64]* %2, i64 0, i64 0
  %5 = getelementptr inbounds [56 x i64], [56 x i64]* %2, i64 0, i64 8
  %6 = bitcast i64* %5 to i64**
  %7 = getelementptr inbounds [56 x i64], [56 x i64]* %2, i64 0, i64 16
  %8 = bitcast i64* %7 to %struct.basket****
  %9 = getelementptr inbounds [56 x i64], [56 x i64]* %2, i64 0, i64 24
  %10 = bitcast i64* %9 to %struct.basket***
  %11 = getelementptr inbounds [56 x i64], [56 x i64]* %2, i64 0, i64 32
  %12 = bitcast i64* %11 to %struct.basket***
  %13 = getelementptr inbounds [56 x i64], [56 x i64]* %2, i64 0, i64 40
  %14 = bitcast i64* %13 to i64**
  %15 = getelementptr inbounds [56 x i64], [56 x i64]* %2, i64 0, i64 48
  %16 = bitcast i64* %15 to i32*
  %17 = alloca [24 x i64]
  %18 = bitcast [24 x i64]* %17 to i8*
  %19 = getelementptr inbounds [24 x i64], [24 x i64]* %17, i64 0, i64 0
  %20 = bitcast i64* %19 to %struct.basket****
  %21 = getelementptr inbounds [24 x i64], [24 x i64]* %17, i64 0, i64 8
  %22 = bitcast i64* %21 to %struct.basket***
  %23 = getelementptr inbounds [24 x i64], [24 x i64]* %17, i64 0, i64 16
  %24 = bitcast i64* %23 to i32*
  %25 = alloca %struct.basket*, align 8, !pdg.inst.id !42
  %26 = alloca %struct.basket*, align 8, !pdg.inst.id !59
  %27 = bitcast %struct.basket** %25 to i8*, !pdg.inst.id !57
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #39, !pdg.inst.id !69
  %28 = bitcast %struct.basket** %26 to i8*, !pdg.inst.id !65
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #39, !pdg.inst.id !73
  %29 = icmp sgt i64 %0, 1, !pdg.inst.id !40
  %30 = bitcast %struct.basket** %26 to i64*, !pdg.inst.id !63
  %31 = bitcast %struct.basket** %25 to i64*, !pdg.inst.id !53
  %32 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !81
  br i1 %29, label %.preheader.preheader, label %.preheader1.preheader, !prof !728, !pdg.inst.id !75

.preheader1.preheader:                            ; preds = %1
  %33 = load i32, i32* @5
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %110, label %.preheader1

.preheader.preheader:                             ; preds = %1
  %35 = load i32, i32* @6
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %151, label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %47
  %37 = phi %struct.basket*** [ %49, %47 ], [ %32, %.preheader.preheader ], !pdg.inst.id !82
  %38 = phi i64 [ %.lcssa, %47 ], [ 0, %.preheader.preheader ], !pdg.inst.id !98
  %39 = phi i64 [ %53, %47 ], [ 1, %.preheader.preheader ], !pdg.inst.id !101
  %40 = load %struct.basket**, %struct.basket*** %37, align 8, !tbaa !724, !pdg.inst.id !96
  %41 = load %struct.basket*, %struct.basket** %40, align 8, !tbaa !724, !pdg.inst.id !106
  %42 = getelementptr inbounds %struct.basket, %struct.basket* %41, i64 0, i32 3, !pdg.inst.id !110
  %43 = load i64, i64* %42, align 8, !tbaa !729, !pdg.inst.id !112
  %44 = icmp sgt i64 %43, -1, !pdg.inst.id !114
  %45 = select i1 %44, %struct.basket* %41, %struct.basket* null, !pdg.inst.id !108
  %46 = select i1 %44, i64 0, i64 %38, !pdg.inst.id !99
  store %struct.basket* %45, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !51
  br label %55, !pdg.inst.id !580

47:                                               ; preds = %82
  %48 = getelementptr inbounds %struct.basket, %struct.basket* %83, i64 0, i32 3, !pdg.inst.id !121
  store i64 %39, i64* %48, align 8, !tbaa !729, !pdg.inst.id !104
  %49 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !123
  %50 = getelementptr inbounds %struct.basket**, %struct.basket*** %49, i64 %.lcssa, !pdg.inst.id !125
  %51 = load %struct.basket**, %struct.basket*** %50, align 8, !tbaa !724, !pdg.inst.id !129
  %52 = getelementptr inbounds %struct.basket*, %struct.basket** %51, i64 1, !pdg.inst.id !131
  store %struct.basket** %52, %struct.basket*** %50, align 8, !tbaa !724, !pdg.inst.id !127
  %53 = add nuw nsw i64 %39, 1, !pdg.inst.id !102
  %54 = icmp eq i64 %53, 61, !pdg.inst.id !134
  br i1 %54, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137

55:                                               ; preds = %80, %.preheader
  %56 = phi %struct.basket*** [ %37, %.preheader ], [ %81, %80 ], !pdg.inst.id !94
  %57 = phi i64 [ %46, %.preheader ], [ %77, %80 ], !pdg.inst.id !119
  %58 = phi i64 [ 1, %.preheader ], [ %78, %80 ], !pdg.inst.id !143
  %59 = getelementptr inbounds %struct.basket**, %struct.basket*** %56, i64 %58, !pdg.inst.id !139
  %60 = load %struct.basket**, %struct.basket*** %59, align 8, !tbaa !724, !pdg.inst.id !148
  %61 = load %struct.basket*, %struct.basket** %60, align 8, !tbaa !724, !pdg.inst.id !150
  store %struct.basket* %61, %struct.basket** %26, align 8, !tbaa !724, !pdg.inst.id !61
  %62 = getelementptr inbounds %struct.basket, %struct.basket* %61, i64 0, i32 3, !pdg.inst.id !154
  %63 = load i64, i64* %62, align 8, !tbaa !729, !pdg.inst.id !157
  %64 = icmp sgt i64 %63, -1, !pdg.inst.id !159
  br i1 %64, label %65, label %76, !pdg.inst.id !161

65:                                               ; preds = %55
  %66 = ptrtoint %struct.basket* %61 to i64, !pdg.inst.id !152
  %67 = load %struct.basket*, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !47
  %68 = icmp eq %struct.basket* %67, null, !pdg.inst.id !165
  br i1 %68, label %74, label %69, !pdg.inst.id !167

69:                                               ; preds = %65
  %70 = call i32 @cost_compare(%struct.basket** nonnull %26, %struct.basket** nonnull %25) #39, !pdg.inst.id !45
  %71 = icmp slt i32 %70, 0, !pdg.inst.id !169
  br i1 %71, label %72, label %76, !pdg.inst.id !171

72:                                               ; preds = %69
  %73 = load i64, i64* %30, align 8, !tbaa !724, !pdg.inst.id !77
  br label %74, !pdg.inst.id !645

74:                                               ; preds = %72, %65
  %75 = phi i64 [ %73, %72 ], [ %66, %65 ], !pdg.inst.id !163
  store i64 %75, i64* %31, align 8, !tbaa !724, !pdg.inst.id !79
  br label %76, !pdg.inst.id !649

76:                                               ; preds = %74, %69, %55
  %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
  %78 = add nuw nsw i64 %58, 1, !pdg.inst.id !144
  %79 = icmp eq i64 %78, %0, !pdg.inst.id !35
  br i1 %79, label %82, label %80, !pdg.inst.id !180

80:                                               ; preds = %76
  %81 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
  br label %55, !pdg.inst.id !666

82:                                               ; preds = %76
  %.lcssa = phi i64 [ %77, %76 ], !pdg.inst.id !175
  %83 = load %struct.basket*, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !49
  %84 = icmp eq %struct.basket* %83, null, !pdg.inst.id !187
  br i1 %84, label %.loopexit.loopexit, label %47, !pdg.inst.id !189

.preheader1:                                      ; preds = %.preheader1.preheader, %103
  %85 = phi i64 [ %108, %103 ], [ 1, %.preheader1.preheader ], !pdg.inst.id !191
  %86 = load %struct.basket**, %struct.basket*** %32, align 8, !tbaa !724, !pdg.inst.id !88
  %87 = load %struct.basket*, %struct.basket** %86, align 8, !tbaa !724, !pdg.inst.id !198
  %88 = getelementptr inbounds %struct.basket, %struct.basket* %87, i64 0, i32 3, !pdg.inst.id !202
  %89 = load i64, i64* %88, align 8, !tbaa !729, !pdg.inst.id !204
  %90 = icmp sgt i64 %89, -1, !pdg.inst.id !206
  %91 = select i1 %90, %struct.basket* %87, %struct.basket* null, !prof !732, !pdg.inst.id !200
  store %struct.basket* %91, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !55
  %92 = icmp eq %struct.basket* %91, null, !pdg.inst.id !209
  br i1 %92, label %.loopexit.loopexit1.loopexit, label %93, !prof !733, !pdg.inst.id !214

93:                                               ; preds = %.preheader1
  %94 = getelementptr inbounds %struct.basket, %struct.basket* %91, i64 0, i32 3, !pdg.inst.id !211
  store i64 %85, i64* %94, align 8, !tbaa !729, !pdg.inst.id !196
  %95 = load %struct.basket**, %struct.basket*** %32, align 8, !tbaa !724, !pdg.inst.id !92
  %96 = getelementptr inbounds %struct.basket*, %struct.basket** %95, i64 1, !pdg.inst.id !217
  store %struct.basket** %96, %struct.basket*** %32, align 8, !tbaa !724, !pdg.inst.id !90
  %97 = load %struct.basket*, %struct.basket** %96, align 8, !tbaa !724, !pdg.inst.id !219
  %98 = getelementptr inbounds %struct.basket, %struct.basket* %97, i64 0, i32 3, !pdg.inst.id !224
  %99 = load i64, i64* %98, align 8, !tbaa !729, !pdg.inst.id !226
  %100 = icmp sgt i64 %99, -1, !pdg.inst.id !228
  %101 = select i1 %100, %struct.basket* %97, %struct.basket* null, !prof !734, !pdg.inst.id !222
  store %struct.basket* %101, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !43
  %102 = icmp eq %struct.basket* %101, null, !pdg.inst.id !233
  br i1 %102, label %.loopexit.loopexit1.loopexit, label %103, !prof !735, !pdg.inst.id !236

.loopexit.loopexit:                               ; preds = %186, %186, %47, %82
  br label %.loopexit, !pdg.inst.id !709

.loopexit.loopexit1.loopexit:                     ; preds = %147, %147, %.preheader1, %93
  br label %.loopexit.loopexit1, !pdg.inst.id !698

.loopexit.loopexit1:                              ; preds = %.loopexit.loopexit1.loopexit, %..loopexit.loopexit1_crit_edge
  br label %.loopexit, !pdg.inst.id !712

.loopexit:                                        ; preds = %.loopexit.loopexit1, %.loopexit.loopexit
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #39, !pdg.inst.id !71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #39, !pdg.inst.id !67
  ret void, !pdg.inst.id !736

103:                                              ; preds = %93
  %104 = add nuw nsw i64 %85, 1, !pdg.inst.id !194
  %105 = getelementptr inbounds %struct.basket, %struct.basket* %101, i64 0, i32 3, !pdg.inst.id !231
  store i64 %104, i64* %105, align 8, !tbaa !729, !pdg.inst.id !238
  %106 = load %struct.basket**, %struct.basket*** %32, align 8, !tbaa !724, !pdg.inst.id !86
  %107 = getelementptr inbounds %struct.basket*, %struct.basket** %106, i64 1, !pdg.inst.id !241
  store %struct.basket** %107, %struct.basket*** %32, align 8, !tbaa !724, !pdg.inst.id !84
  %108 = add nuw nsw i64 %85, 2, !pdg.inst.id !192
  %109 = icmp eq i64 %108, 61, !pdg.inst.id !245
  br i1 %109, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247

..loopexit.loopexit1_crit_edge:                   ; preds = %147, %103
  br label %.loopexit.loopexit1, !pdg.inst.id !723

110:                                              ; preds = %.preheader1.preheader
  store i32 1, i32* @5
  store %struct.basket*** %32, %struct.basket**** %20
  store %struct.basket** %25, %struct.basket*** %22
  %111 = alloca [2 x i8*]
  %112 = getelementptr inbounds [2 x i8*], [2 x i8*]* %111, i64 0, i64 0
  %113 = bitcast i8** %112 to void (i8*, i8*)**
  store void (i8*, i8*)* @24, void (i8*, i8*)** %113
  %114 = getelementptr inbounds [2 x i8*], [2 x i8*]* %111, i64 0, i64 1
  %115 = bitcast i8** %114 to void (i8*, i8*)**
  store void (i8*, i8*)* @25, void (i8*, i8*)** %115
  %116 = bitcast [2 x i8*]* %111 to i8*
  %117 = alloca [28 x i64]
  %118 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 0
  store i64 64, i64* %118
  %119 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 1
  store i64 64, i64* %119
  %120 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 2
  store i64 16, i64* %120
  %121 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 3
  store i64 64, i64* %121
  %122 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 4
  store i64 64, i64* %122
  %123 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 5
  store i64 16, i64* %123
  %124 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 6
  store i64 64, i64* %124
  %125 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 7
  store i64 64, i64* %125
  %126 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 8
  store i64 64, i64* %126
  %127 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 9
  store i64 64, i64* %127
  %128 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 10
  store i64 32, i64* %128
  %129 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 11
  store i64 64, i64* %129
  %130 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 12
  store i64 32, i64* %130
  %131 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 13
  store i64 64, i64* %131
  %132 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 14
  store i64 32, i64* %132
  %133 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 15
  store i64 64, i64* %133
  %134 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 16
  store i64 32, i64* %134
  %135 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 17
  store i64 64, i64* %135
  %136 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 18
  store i64 64, i64* %136
  %137 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 19
  store i64 32, i64* %137
  %138 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 20
  store i64 32, i64* %138
  %139 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 21
  store i64 64, i64* %139
  %140 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 22
  store i64 64, i64* %140
  %141 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 23
  store i64 64, i64* %141
  %142 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 24
  store i64 64, i64* %142
  %143 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 25
  store i64 1, i64* %143
  %144 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 26
  store i64 1, i64* %144
  %145 = getelementptr inbounds [28 x i64], [28 x i64]* %117, i64 0, i64 27
  store i64 1, i64* %145
  %146 = bitcast [28 x i64]* %117 to i64*
  call void @stageDispatcher(i8* %18, i64* %146, i8* %116, i64 2, i64 28)
  br label %147

147:                                              ; preds = %110
  %148 = getelementptr inbounds [24 x i64], [24 x i64]* %17, i64 0, i64 16
  %149 = load i64, i64* %148
  %150 = trunc i64 %149 to i32
  store i32 0, i32* @5
  switch i32 %150, label %.loopexit.loopexit1.loopexit [
    i32 1, label %.loopexit.loopexit1.loopexit
    i32 2, label %..loopexit.loopexit1_crit_edge
  ]

151:                                              ; preds = %.preheader.preheader
  store i32 1, i32* @6
  store i64 %0, i64* %4
  store i64* %30, i64** %6
  store %struct.basket*** %32, %struct.basket**** %8
  store %struct.basket** %25, %struct.basket*** %10
  store %struct.basket** %26, %struct.basket*** %12
  store i64* %31, i64** %14
  %152 = alloca [1 x i8*]
  %153 = getelementptr inbounds [1 x i8*], [1 x i8*]* %152, i64 0, i64 0
  %154 = bitcast i8** %153 to void (i8*, i8*)**
  store void (i8*, i8*)* @26, void (i8*, i8*)** %154
  %155 = bitcast [1 x i8*]* %152 to i8*
  %156 = alloca [28 x i64]
  %157 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 0
  store i64 64, i64* %157
  %158 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 1
  store i64 64, i64* %158
  %159 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 2
  store i64 16, i64* %159
  %160 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 3
  store i64 64, i64* %160
  %161 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 4
  store i64 64, i64* %161
  %162 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 5
  store i64 16, i64* %162
  %163 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 6
  store i64 64, i64* %163
  %164 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 7
  store i64 64, i64* %164
  %165 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 8
  store i64 64, i64* %165
  %166 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 9
  store i64 64, i64* %166
  %167 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 10
  store i64 32, i64* %167
  %168 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 11
  store i64 64, i64* %168
  %169 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 12
  store i64 32, i64* %169
  %170 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 13
  store i64 64, i64* %170
  %171 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 14
  store i64 32, i64* %171
  %172 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 15
  store i64 64, i64* %172
  %173 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 16
  store i64 32, i64* %173
  %174 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 17
  store i64 64, i64* %174
  %175 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 18
  store i64 64, i64* %175
  %176 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 19
  store i64 32, i64* %176
  %177 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 20
  store i64 32, i64* %177
  %178 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 21
  store i64 64, i64* %178
  %179 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 22
  store i64 64, i64* %179
  %180 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 23
  store i64 64, i64* %180
  %181 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 24
  store i64 64, i64* %181
  %182 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 25
  store i64 1, i64* %182
  %183 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 26
  store i64 1, i64* %183
  %184 = getelementptr inbounds [28 x i64], [28 x i64]* %156, i64 0, i64 27
  store i64 1, i64* %184
  %185 = bitcast [28 x i64]* %156 to i64*
  call void @stageDispatcher(i8* %3, i64* %185, i8* %155, i64 1, i64 28)
  br label %186

186:                                              ; preds = %151
  %187 = getelementptr inbounds [56 x i64], [56 x i64]* %2, i64 0, i64 48
  %188 = load i64, i64* %187
  %189 = trunc i64 %188 to i32
  store i32 0, i32* @6
  switch i32 %189, label %.loopexit.loopexit [
    i32 1, label %.loopexit.loopexit
  ]
}

Parallelizer: Exit
Parallelizer: Start
Parallelizer:  Function = "markBaskets"
Parallelizer:  Loop 8 = "  %59 = getelementptr inbounds %struct.basket**, %struct.basket*** %56, i64 %58, !pdg.inst.id !139"
Parallelizer:  Nesting level = 2
DOALL: Checking if the loop is DOALL
DOALL:   Some post environment value is not reducable
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 2
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %59 = getelementptr inbounds %struct.basket**, %struct.basket*** %56, i64 %58, !pdg.inst.id !139
DSWP:       %70 = call i32 @cost_compare(%struct.basket** nonnull %26, %struct.basket** nonnull %25) #39, !pdg.inst.id !45
DSWP:       br i1 %64, label %65, label %76, !pdg.inst.id !161
DSWP:       %67 = load %struct.basket*, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !47
DSWP:       %66 = ptrtoint %struct.basket* %61 to i64, !pdg.inst.id !152
DSWP:       %71 = icmp slt i32 %70, 0, !pdg.inst.id !169
DSWP:       br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:       br label %74, !pdg.inst.id !645
DSWP:       br label %76, !pdg.inst.id !649
DSWP:       %81 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
DSWP:       %75 = phi i64 [ %73, %72 ], [ %66, %65 ], !pdg.inst.id !163
DSWP:       %61 = load %struct.basket*, %struct.basket** %60, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:       %62 = getelementptr inbounds %struct.basket, %struct.basket* %61, i64 0, i32 3, !pdg.inst.id !154
DSWP:       %68 = icmp eq %struct.basket* %67, null, !pdg.inst.id !165
DSWP:       %64 = icmp sgt i64 %63, -1, !pdg.inst.id !159
DSWP:       %60 = load %struct.basket**, %struct.basket*** %59, align 8, !tbaa !724, !pdg.inst.id !148
DSWP:       br i1 %68, label %74, label %69, !pdg.inst.id !167
DSWP:       store i64 %75, i64* %31, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:       %56 = phi %struct.basket*** [ %37, %.preheader ], [ %81, %80 ], !pdg.inst.id !94
DSWP:       %73 = load i64, i64* %30, align 8, !tbaa !724, !pdg.inst.id !77
DSWP:       store %struct.basket* %61, %struct.basket** %26, align 8, !tbaa !724, !pdg.inst.id !61
DSWP:       %63 = load i64, i64* %62, align 8, !tbaa !729, !pdg.inst.id !157
DSWP:   SCC: 1 Internal nodes:
DSWP:       %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:       %57 = phi i64 [ %46, %.preheader ], [ %77, %80 ], !pdg.inst.id !119
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:   Set:  1
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  Final number of partitions: 2
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %59 = getelementptr inbounds %struct.basket**, %struct.basket*** %56, i64 %58, !pdg.inst.id !139
DSWP:       %70 = call i32 @cost_compare(%struct.basket** nonnull %26, %struct.basket** nonnull %25) #39, !pdg.inst.id !45
DSWP:       br i1 %64, label %65, label %76, !pdg.inst.id !161
DSWP:       %67 = load %struct.basket*, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !47
DSWP:       %66 = ptrtoint %struct.basket* %61 to i64, !pdg.inst.id !152
DSWP:       %71 = icmp slt i32 %70, 0, !pdg.inst.id !169
DSWP:       br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:       br label %74, !pdg.inst.id !645
DSWP:       br label %76, !pdg.inst.id !649
DSWP:       %81 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
DSWP:       %75 = phi i64 [ %73, %72 ], [ %66, %65 ], !pdg.inst.id !163
DSWP:       %61 = load %struct.basket*, %struct.basket** %60, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:       %62 = getelementptr inbounds %struct.basket, %struct.basket* %61, i64 0, i32 3, !pdg.inst.id !154
DSWP:       %68 = icmp eq %struct.basket* %67, null, !pdg.inst.id !165
DSWP:       %64 = icmp sgt i64 %63, -1, !pdg.inst.id !159
DSWP:       %60 = load %struct.basket**, %struct.basket*** %59, align 8, !tbaa !724, !pdg.inst.id !148
DSWP:       br i1 %68, label %74, label %69, !pdg.inst.id !167
DSWP:       store i64 %75, i64* %31, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:       %56 = phi %struct.basket*** [ %37, %.preheader ], [ %81, %80 ], !pdg.inst.id !94
DSWP:       %73 = load i64, i64* %30, align 8, !tbaa !724, !pdg.inst.id !77
DSWP:       store %struct.basket* %61, %struct.basket** %26, align 8, !tbaa !724, !pdg.inst.id !61
DSWP:       %63 = load i64, i64* %62, align 8, !tbaa !729, !pdg.inst.id !157
DSWP:   SCC: 1 Internal nodes:
DSWP:       %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:       %57 = phi i64 [ %46, %.preheader ], [ %77, %80 ], !pdg.inst.id !119
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: 
DSWP:   Set:  1
DSWP:    Children: 
DSWP:    Parents: 
DSWP:  There are 2 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 22
DSWP:     	  %59 = getelementptr inbounds %struct.basket**, %struct.basket*** %56, i64 %58, !pdg.inst.id !139
DSWP:     	  %70 = call i32 @cost_compare(%struct.basket** nonnull %26, %struct.basket** nonnull %25) #39, !pdg.inst.id !45
DSWP:     	  br i1 %64, label %65, label %76, !pdg.inst.id !161
DSWP:     	  %67 = load %struct.basket*, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !47
DSWP:     	  %66 = ptrtoint %struct.basket* %61 to i64, !pdg.inst.id !152
DSWP:     	  %71 = icmp slt i32 %70, 0, !pdg.inst.id !169
DSWP:     	  br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:     	  br label %74, !pdg.inst.id !645
DSWP:     	  br label %76, !pdg.inst.id !649
DSWP:     	  %81 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
DSWP:     	  %75 = phi i64 [ %73, %72 ], [ %66, %65 ], !pdg.inst.id !163
DSWP:     	  %61 = load %struct.basket*, %struct.basket** %60, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:     	  %62 = getelementptr inbounds %struct.basket, %struct.basket* %61, i64 0, i32 3, !pdg.inst.id !154
DSWP:     	  %68 = icmp eq %struct.basket* %67, null, !pdg.inst.id !165
DSWP:     	  %64 = icmp sgt i64 %63, -1, !pdg.inst.id !159
DSWP:     	  %60 = load %struct.basket**, %struct.basket*** %59, align 8, !tbaa !724, !pdg.inst.id !148
DSWP:     	  br i1 %68, label %74, label %69, !pdg.inst.id !167
DSWP:     	  store i64 %75, i64* %31, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:     	  %56 = phi %struct.basket*** [ %37, %.preheader ], [ %81, %80 ], !pdg.inst.id !94
DSWP:     	  %73 = load i64, i64* %30, align 8, !tbaa !724, !pdg.inst.id !77
DSWP:     	  store %struct.basket* %61, %struct.basket** %26, align 8, !tbaa !724, !pdg.inst.id !61
DSWP:     	  %63 = load i64, i64* %62, align 8, !tbaa !729, !pdg.inst.id !157
DSWP:     External nodes: 2
DSWP:     	  %58 = phi i64 [ 1, %.preheader ], [ %78, %80 ], !pdg.inst.id !143
DSWP:     	  br i1 %79, label %82, label %80, !pdg.inst.id !180
DSWP:     Edges: 55
DSWP:     	From:	  %71 = icmp slt i32 %70, 0, !pdg.inst.id !169
DSWP:     	To:	  br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:     	RAW (must)
DSWP:     	From:	  %81 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
DSWP:     	To:	  %56 = phi %struct.basket*** [ %37, %.preheader ], [ %81, %80 ], !pdg.inst.id !94
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:     	To:	  store i64 %75, i64* %31, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:     	CTRL
DSWP:     	From:	  br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:     	To:	  %75 = phi i64 [ %73, %72 ], [ %66, %65 ], !pdg.inst.id !163
DSWP:     	CTRL
DSWP:     	From:	  br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:     	To:	  %73 = load i64, i64* %30, align 8, !tbaa !724, !pdg.inst.id !77
DSWP:     	CTRL
DSWP:     	From:	  br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:     	To:	  br label %74, !pdg.inst.id !645
DSWP:     	CTRL
DSWP:     	From:	  br i1 %71, label %72, label %76, !pdg.inst.id !171
DSWP:     	To:	  br label %76, !pdg.inst.id !649
DSWP:     	CTRL
DSWP:     	From:	  %75 = phi i64 [ %73, %72 ], [ %66, %65 ], !pdg.inst.id !163
DSWP:     	To:	  store i64 %75, i64* %31, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:     	RAW (must)
DSWP:     	From:	  %61 = load %struct.basket*, %struct.basket** %60, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:     	To:	  %66 = ptrtoint %struct.basket* %61 to i64, !pdg.inst.id !152
DSWP:     	RAW (must)
DSWP:     	From:	  %61 = load %struct.basket*, %struct.basket** %60, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:     	To:	  %62 = getelementptr inbounds %struct.basket, %struct.basket* %61, i64 0, i32 3, !pdg.inst.id !154
DSWP:     	RAW (must)
DSWP:     	From:	  %61 = load %struct.basket*, %struct.basket** %60, align 8, !tbaa !724, !pdg.inst.id !150
DSWP:     	To:	  store %struct.basket* %61, %struct.basket** %26, align 8, !tbaa !724, !pdg.inst.id !61
DSWP:     	RAW (must)
DSWP:     	From:	  %62 = getelementptr inbounds %struct.basket, %struct.basket* %61, i64 0, i32 3, !pdg.inst.id !154
DSWP:     	To:	  %63 = load i64, i64* %62, align 8, !tbaa !729, !pdg.inst.id !157
DSWP:     	RAW (must)
DSWP:     	From:	  %68 = icmp eq %struct.basket* %67, null, !pdg.inst.id !165
DSWP:     	To:	  br i1 %68, label %74, label %69, !pdg.inst.id !167
DSWP:     	RAW (must)
DSWP:     	From:	  %64 = icmp sgt i64 %63, -1, !pdg.inst.id !159
DSWP:     	To:	  br i1 %64, label %65, label %76, !pdg.inst.id !161
DSWP:     	RAW (must)
DSWP:     	From:	  store i64 %75, i64* %31, align 8, !tbaa !724, !pdg.inst.id !79
DSWP:     	To:	  %70 = call i32 @cost_compare(%struct.basket** nonnull %26, %struct.basket** nonnull %25) #39, !pdg.inst.id !45
DSWP:     	RAW (may) from memory 
DSWP:     	....
DSWP:    
DSWP:    Stage: 1
DSWP:     Internal nodes: 2
DSWP:     	  %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:     	  %57 = phi i64 [ %46, %.preheader ], [ %77, %80 ], !pdg.inst.id !119
DSWP:     External nodes: 2
DSWP:     	  %58 = phi i64 [ 1, %.preheader ], [ %78, %80 ], !pdg.inst.id !143
DSWP:     	  br i1 %79, label %82, label %80, !pdg.inst.id !180
DSWP:     Edges: 6
DSWP:     	From:	  %57 = phi i64 [ %46, %.preheader ], [ %77, %80 ], !pdg.inst.id !119
DSWP:     	To:	  %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:     	RAW (must)
DSWP:     	From:	  %57 = phi i64 [ %46, %.preheader ], [ %77, %80 ], !pdg.inst.id !119
DSWP:     	To:	  %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:     	RAW (must)
DSWP:     	From:	  %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:     	To:	  %57 = phi i64 [ %46, %.preheader ], [ %77, %80 ], !pdg.inst.id !119
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %79, label %82, label %80, !pdg.inst.id !180
DSWP:     	To:	  %57 = phi i64 [ %46, %.preheader ], [ %77, %80 ], !pdg.inst.id !119
DSWP:     	CTRL
DSWP:     	From:	  %58 = phi i64 [ 1, %.preheader ], [ %78, %80 ], !pdg.inst.id !143
DSWP:     	To:	  %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %79, label %82, label %80, !pdg.inst.id !180
DSWP:     	To:	  %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:     	CTRL
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 
DSWP:      Pop value queues: 
DSWP:    Queue: 0
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %37 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 4, !pdg.inst.id !92
DSWP:    Queue: 1
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:    Queue: 2
DSWP:     Producer:	  %38 = load i16, i16* %37, align 8, !tbaa !554, !pdg.inst.id !93
DSWP:     Consumer:	  %39 = icmp eq i16 %38, 2, !pdg.inst.id !229
DSWP:    Queue: 3
DSWP:     Producer:	  %35 = phi i64 [ 0, %30 ], [ %48, %._crit_edge ], !pdg.inst.id !223
DSWP:     Consumer:	  %40 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %35, i32 7, !pdg.inst.id !133
DSWP:    Queue: 4
DSWP:     Producer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %43 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 4, !pdg.inst.id !61
DSWP:    Queue: 5
DSWP:     Producer:	  %44 = load i16, i16* %43, align 8, !tbaa !554, !pdg.inst.id !163
DSWP:     Consumer:	  %45 = icmp eq i16 %44, 2, !pdg.inst.id !89
DSWP:    Queue: 6
DSWP:     Producer:	  %42 = or i64 %35, 1, !pdg.inst.id !58
DSWP:     Consumer:	  %46 = getelementptr inbounds %struct.arc, %struct.arc* %23, i64 %42, i32 7, !pdg.inst.id !59
DSWP:    Queue: 7
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 8
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 9
DSWP:     Producer:	  %88 = load %struct.node*, %struct.node** %87, align 8, !tbaa !568, !pdg.inst.id !150
DSWP:     Consumer:	  %89 = getelementptr inbounds %struct.node, %struct.node* %88, i64 0, i32 12, !pdg.inst.id !148
DSWP:    Queue: 10
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:    Queue: 11
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 12
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 13
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 14
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 15
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 16
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:    Queue: 17
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 18
DSWP:     Producer:	  %94 = load %struct.node*, %struct.node** %93, align 8, !tbaa !571, !pdg.inst.id !218
DSWP:     Consumer:	  %95 = getelementptr inbounds %struct.node, %struct.node* %94, i64 0, i32 12, !pdg.inst.id !52
DSWP:    Queue: 19
DSWP:     Producer:	  %96 = load i32, i32* %95, align 8, !tbaa !569, !pdg.inst.id !53
DSWP:     Consumer:	  %97 = icmp sgt i32 %96, 0, !pdg.inst.id !237
DSWP:    Queue: 20
DSWP:     Producer:	  %90 = load i32, i32* %89, align 8, !tbaa !569, !pdg.inst.id !103
DSWP:     Consumer:	  %91 = icmp slt i32 %90, 0, !pdg.inst.id !106
DSWP:     Consumer:	  %102 = icmp eq i32 %90, 0, !pdg.inst.id !104
DSWP:    Queue: 21
DSWP:     Producer:	  %84 = load i64, i64* %83, align 8, !tbaa !558, !pdg.inst.id !43
DSWP:     Consumer:	  %85 = icmp eq i64 %84, 0, !pdg.inst.id !44
DSWP:    Queue: 22
DSWP:     Producer:	  %106 = load i64, i64* %68, align 8, !tbaa !575, !pdg.inst.id !95
DSWP:     Consumer:	  %108 = sub i64 %107, %106, !pdg.inst.id !70
DSWP:    Queue: 23
DSWP:     Producer:	  %101 = select i1 %100, %struct.basket* %97, %struct.basket* null, !prof !734, !pdg.inst.id !222
DSWP:     Consumer:	  store %struct.basket* %101, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !43
DSWP:    Queue: 24
DSWP:     Producer:	  %91 = select i1 %90, %struct.basket* %87, %struct.basket* null, !prof !732, !pdg.inst.id !200
DSWP:     Consumer:	  store %struct.basket* %91, %struct.basket** %25, align 8, !tbaa !724, !pdg.inst.id !55
DSWP:    Queue: 25
DSWP:     Producer:	  %109 = icmp eq i64 %108, 61, !pdg.inst.id !245
DSWP:     Consumer:	  br i1 %109, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247
DSWP:    Queue: 26
DSWP:     Producer:	  %102 = icmp eq %struct.basket* %101, null, !pdg.inst.id !233
DSWP:     Consumer:	  br i1 %102, label %.loopexit.loopexit1.loopexit, label %103, !prof !735, !pdg.inst.id !236
DSWP:    Queue: 27
DSWP:     Producer:	  %92 = icmp eq %struct.basket* %91, null, !pdg.inst.id !209
DSWP:     Consumer:	  br i1 %92, label %.loopexit.loopexit1.loopexit, label %93, !prof !733, !pdg.inst.id !214
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %26 = alloca %struct.basket*, align 8, !pdg.inst.id !59
DSWP:    Pre loop env 2, producer:	i64 %0
DSWP:    Pre loop env 3, producer:	  %37 = phi %struct.basket*** [ %49, %47 ], [ %32, %.preheader.preheader ], !pdg.inst.id !82
DSWP:    Pre loop env 4, producer:	  %30 = bitcast %struct.basket** %26 to i64*, !pdg.inst.id !63
DSWP:    Pre loop env 5, producer:	  %46 = select i1 %44, i64 0, i64 %38, !pdg.inst.id !99
DSWP:    Pre loop env 6, producer:	  %25 = alloca %struct.basket*, align 8, !pdg.inst.id !42
DSWP:    Pre loop env 7, producer:	  %31 = bitcast %struct.basket** %25 to i64*, !pdg.inst.id !53
DSWP:    Post loop env 8, producer:	  %77 = phi i64 [ %58, %74 ], [ %57, %69 ], [ %57, %55 ], !pdg.inst.id !141
DSWP:  Create 2 pipeline stages
Pipeline stage 0:

define void @27(i8*, i8*) {
  %3 = bitcast i8* %0 to [64 x i64]*
  %4 = bitcast i8* %1 to [28 x i8*]*
  %5 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 0
  %6 = bitcast i64* %5 to %struct.basket***
  %7 = load %struct.basket**, %struct.basket*** %6
  %8 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 8
  %9 = load i64, i64* %8
  %10 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 16
  %11 = bitcast i64* %10 to %struct.basket****
  %12 = load %struct.basket***, %struct.basket**** %11
  %13 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 24
  %14 = bitcast i64* %13 to i64**
  %15 = load i64*, i64** %14
  %16 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 48
  %17 = bitcast i64* %16 to %struct.basket***
  %18 = load %struct.basket**, %struct.basket*** %17
  %19 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 56
  %20 = bitcast i64* %19 to i64**
  %21 = load i64*, i64** %20
  br label %24

22:                                               ; preds = %23
  ret void

23:                                               ; preds = %44
  br label %22

24:                                               ; preds = %2, %47
  %25 = phi %struct.basket*** [ %12, %2 ], [ %48, %47 ], !pdg.inst.id !30
  %26 = phi i64 [ 1, %2 ], [ %45, %47 ], !pdg.inst.id !31
  %27 = getelementptr inbounds %struct.basket**, %struct.basket*** %25, i64 %26, !pdg.inst.id !32
  %28 = load %struct.basket**, %struct.basket*** %27, align 8, !tbaa !33, !pdg.inst.id !37
  %29 = load %struct.basket*, %struct.basket** %28, align 8, !tbaa !33, !pdg.inst.id !38
  store %struct.basket* %29, %struct.basket** %7, align 8, !tbaa !33, !pdg.inst.id !39
  %30 = getelementptr inbounds %struct.basket, %struct.basket* %29, i64 0, i32 3, !pdg.inst.id !40
  %31 = load i64, i64* %30, align 8, !tbaa !41, !pdg.inst.id !44
  %32 = icmp sgt i64 %31, -1, !pdg.inst.id !45
  br i1 %32, label %33, label %44, !pdg.inst.id !46

33:                                               ; preds = %24
  %34 = ptrtoint %struct.basket* %29 to i64, !pdg.inst.id !47
  %35 = load %struct.basket*, %struct.basket** %18, align 8, !tbaa !33, !pdg.inst.id !48
  %36 = icmp eq %struct.basket* %35, null, !pdg.inst.id !49
  br i1 %36, label %42, label %37, !pdg.inst.id !50

37:                                               ; preds = %33
  %38 = call i32 @cost_compare(%struct.basket** nonnull %7, %struct.basket** nonnull %18) #39, !pdg.inst.id !51
  %39 = icmp slt i32 %38, 0, !pdg.inst.id !52
  br i1 %39, label %40, label %44, !pdg.inst.id !53

40:                                               ; preds = %37
  %41 = load i64, i64* %15, align 8, !tbaa !33, !pdg.inst.id !54
  br label %42, !pdg.inst.id !55

42:                                               ; preds = %33, %40
  %43 = phi i64 [ %41, %40 ], [ %34, %33 ], !pdg.inst.id !56
  store i64 %43, i64* %21, align 8, !tbaa !33, !pdg.inst.id !57
  br label %44, !pdg.inst.id !58

44:                                               ; preds = %24, %37, %42
  %45 = add nuw nsw i64 %26, 1, !pdg.inst.id !59
  %46 = icmp eq i64 %45, %9, !pdg.inst.id !60
  br i1 %46, label %23, label %47, !pdg.inst.id !61

47:                                               ; preds = %44
  %48 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !33, !pdg.inst.id !62
  br label %24, !pdg.inst.id !63
}

Pipeline stage 1:

define void @28(i8*, i8*) {
  %3 = bitcast i8* %0 to [64 x i64]*
  %4 = bitcast i8* %1 to [28 x i8*]*
  %5 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 8
  %6 = load i64, i64* %5
  %7 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 32
  %8 = load i64, i64* %7
  %9 = getelementptr inbounds [64 x i64], [64 x i64]* %3, i64 0, i64 40
  br label %12

10:                                               ; preds = %11
  ret void

11:                                               ; preds = %15
  br label %10

12:                                               ; preds = %2, %19
  %13 = phi i64 [ %8, %2 ], [ %16, %19 ], !pdg.inst.id !30
  %14 = phi i64 [ 1, %2 ], [ %17, %19 ], !pdg.inst.id !31
  br label %15

15:                                               ; preds = %12
  %16 = phi i64 [ %14, <badref> ], [ %13, <badref> ], [ %13, %12 ], !pdg.inst.id !32
  %17 = add nuw nsw i64 %14, 1, !pdg.inst.id !33
  %18 = icmp eq i64 %17, %6, !pdg.inst.id !34
  store i64 %16, i64* %9
  br i1 %18, label %11, label %19, !pdg.inst.id !35

19:                                               ; preds = %15
  br label %12, !pdg.inst.id !36
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: nounwind uwtable
define dso_local void @markBaskets(i64) local_unnamed_addr #3 !prof !30 !pdg.args.id !31 !pdg.edges !33 {
  %2 = alloca [64 x i64]
  %3 = bitcast [64 x i64]* %2 to i8*
  %4 = getelementptr inbounds [64 x i64], [64 x i64]* %2, i64 0, i64 0
  %5 = bitcast i64* %4 to %struct.basket***
  %6 = getelementptr inbounds [64 x i64], [64 x i64]* %2, i64 0, i64 8
  %7 = getelementptr inbounds [64 x i64], [64 x i64]* %2, i64 0, i64 16
  %8 = bitcast i64* %7 to %struct.basket****
  %9 = getelementptr inbounds [64 x i64], [64 x i64]* %2, i64 0, i64 24
  %10 = bitcast i64* %9 to i64**
  %11 = getelementptr inbounds [64 x i64], [64 x i64]* %2, i64 0, i64 32
  %12 = getelementptr inbounds [64 x i64], [64 x i64]* %2, i64 0, i64 40
  %13 = getelementptr inbounds [64 x i64], [64 x i64]* %2, i64 0, i64 48
  %14 = bitcast i64* %13 to %struct.basket***
  %15 = getelementptr inbounds [64 x i64], [64 x i64]* %2, i64 0, i64 56
  %16 = bitcast i64* %15 to i64**
  %17 = alloca [56 x i64]
  %18 = bitcast [56 x i64]* %17 to i8*
  %19 = getelementptr inbounds [56 x i64], [56 x i64]* %17, i64 0, i64 0
  %20 = getelementptr inbounds [56 x i64], [56 x i64]* %17, i64 0, i64 8
  %21 = bitcast i64* %20 to i64**
  %22 = getelementptr inbounds [56 x i64], [56 x i64]* %17, i64 0, i64 16
  %23 = bitcast i64* %22 to %struct.basket****
  %24 = getelementptr inbounds [56 x i64], [56 x i64]* %17, i64 0, i64 24
  %25 = bitcast i64* %24 to %struct.basket***
  %26 = getelementptr inbounds [56 x i64], [56 x i64]* %17, i64 0, i64 32
  %27 = bitcast i64* %26 to %struct.basket***
  %28 = getelementptr inbounds [56 x i64], [56 x i64]* %17, i64 0, i64 40
  %29 = bitcast i64* %28 to i64**
  %30 = getelementptr inbounds [56 x i64], [56 x i64]* %17, i64 0, i64 48
  %31 = bitcast i64* %30 to i32*
  %32 = alloca [24 x i64]
  %33 = bitcast [24 x i64]* %32 to i8*
  %34 = getelementptr inbounds [24 x i64], [24 x i64]* %32, i64 0, i64 0
  %35 = bitcast i64* %34 to %struct.basket****
  %36 = getelementptr inbounds [24 x i64], [24 x i64]* %32, i64 0, i64 8
  %37 = bitcast i64* %36 to %struct.basket***
  %38 = getelementptr inbounds [24 x i64], [24 x i64]* %32, i64 0, i64 16
  %39 = bitcast i64* %38 to i32*
  %40 = alloca %struct.basket*, align 8, !pdg.inst.id !42
  %41 = alloca %struct.basket*, align 8, !pdg.inst.id !59
  %42 = bitcast %struct.basket** %40 to i8*, !pdg.inst.id !57
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #39, !pdg.inst.id !69
  %43 = bitcast %struct.basket** %41 to i8*, !pdg.inst.id !65
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #39, !pdg.inst.id !73
  %44 = icmp sgt i64 %0, 1, !pdg.inst.id !40
  %45 = bitcast %struct.basket** %41 to i64*, !pdg.inst.id !63
  %46 = bitcast %struct.basket** %40 to i64*, !pdg.inst.id !53
  %47 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !81
  br i1 %44, label %.preheader.preheader, label %.preheader1.preheader, !prof !728, !pdg.inst.id !75

.preheader1.preheader:                            ; preds = %1
  %48 = load i32, i32* @5
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %127, label %.preheader1

.preheader.preheader:                             ; preds = %1
  %50 = load i32, i32* @6
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %168, label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %64
  %52 = phi %struct.basket*** [ %66, %64 ], [ %47, %.preheader.preheader ], !pdg.inst.id !82
  %53 = phi i64 [ %.lcssa, %64 ], [ 0, %.preheader.preheader ], !pdg.inst.id !98
  %54 = phi i64 [ %70, %64 ], [ 1, %.preheader.preheader ], !pdg.inst.id !101
  %55 = load %struct.basket**, %struct.basket*** %52, align 8, !tbaa !724, !pdg.inst.id !96
  %56 = load %struct.basket*, %struct.basket** %55, align 8, !tbaa !724, !pdg.inst.id !106
  %57 = getelementptr inbounds %struct.basket, %struct.basket* %56, i64 0, i32 3, !pdg.inst.id !110
  %58 = load i64, i64* %57, align 8, !tbaa !729, !pdg.inst.id !112
  %59 = icmp sgt i64 %58, -1, !pdg.inst.id !114
  %60 = select i1 %59, %struct.basket* %56, %struct.basket* null, !pdg.inst.id !108
  %61 = select i1 %59, i64 0, i64 %53, !pdg.inst.id !99
  store %struct.basket* %60, %struct.basket** %40, align 8, !tbaa !724, !pdg.inst.id !51
  %62 = load i32, i32* @7
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %207, label %72

64:                                               ; preds = %99
  %65 = getelementptr inbounds %struct.basket, %struct.basket* %100, i64 0, i32 3, !pdg.inst.id !121
  store i64 %54, i64* %65, align 8, !tbaa !729, !pdg.inst.id !104
  %66 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !123
  %67 = getelementptr inbounds %struct.basket**, %struct.basket*** %66, i64 %.lcssa, !pdg.inst.id !125
  %68 = load %struct.basket**, %struct.basket*** %67, align 8, !tbaa !724, !pdg.inst.id !129
  %69 = getelementptr inbounds %struct.basket*, %struct.basket** %68, i64 1, !pdg.inst.id !131
  store %struct.basket** %69, %struct.basket*** %67, align 8, !tbaa !724, !pdg.inst.id !127
  %70 = add nuw nsw i64 %54, 1, !pdg.inst.id !102
  %71 = icmp eq i64 %70, 61, !pdg.inst.id !134
  br i1 %71, label %.loopexit.loopexit, label %.preheader, !pdg.inst.id !137

72:                                               ; preds = %.preheader, %97
  %73 = phi %struct.basket*** [ %52, %.preheader ], [ %98, %97 ], !pdg.inst.id !94
  %74 = phi i64 [ %61, %.preheader ], [ %94, %97 ], !pdg.inst.id !119
  %75 = phi i64 [ 1, %.preheader ], [ %95, %97 ], !pdg.inst.id !143
  %76 = getelementptr inbounds %struct.basket**, %struct.basket*** %73, i64 %75, !pdg.inst.id !139
  %77 = load %struct.basket**, %struct.basket*** %76, align 8, !tbaa !724, !pdg.inst.id !148
  %78 = load %struct.basket*, %struct.basket** %77, align 8, !tbaa !724, !pdg.inst.id !150
  store %struct.basket* %78, %struct.basket** %41, align 8, !tbaa !724, !pdg.inst.id !61
  %79 = getelementptr inbounds %struct.basket, %struct.basket* %78, i64 0, i32 3, !pdg.inst.id !154
  %80 = load i64, i64* %79, align 8, !tbaa !729, !pdg.inst.id !157
  %81 = icmp sgt i64 %80, -1, !pdg.inst.id !159
  br i1 %81, label %82, label %93, !pdg.inst.id !161

82:                                               ; preds = %72
  %83 = ptrtoint %struct.basket* %78 to i64, !pdg.inst.id !152
  %84 = load %struct.basket*, %struct.basket** %40, align 8, !tbaa !724, !pdg.inst.id !47
  %85 = icmp eq %struct.basket* %84, null, !pdg.inst.id !165
  br i1 %85, label %91, label %86, !pdg.inst.id !167

86:                                               ; preds = %82
  %87 = call i32 @cost_compare(%struct.basket** nonnull %41, %struct.basket** nonnull %40) #39, !pdg.inst.id !45
  %88 = icmp slt i32 %87, 0, !pdg.inst.id !169
  br i1 %88, label %89, label %93, !pdg.inst.id !171

89:                                               ; preds = %86
  %90 = load i64, i64* %45, align 8, !tbaa !724, !pdg.inst.id !77
  br label %91, !pdg.inst.id !645

91:                                               ; preds = %89, %82
  %92 = phi i64 [ %90, %89 ], [ %83, %82 ], !pdg.inst.id !163
  store i64 %92, i64* %46, align 8, !tbaa !724, !pdg.inst.id !79
  br label %93, !pdg.inst.id !649

93:                                               ; preds = %91, %86, %72
  %94 = phi i64 [ %75, %91 ], [ %74, %86 ], [ %74, %72 ], !pdg.inst.id !141
  %95 = add nuw nsw i64 %75, 1, !pdg.inst.id !144
  %96 = icmp eq i64 %95, %0, !pdg.inst.id !35
  br i1 %96, label %99, label %97, !pdg.inst.id !180

97:                                               ; preds = %93
  %98 = load %struct.basket***, %struct.basket**** @perm_p, align 8, !tbaa !724, !pdg.inst.id !182
  br label %72, !pdg.inst.id !666

99:                                               ; preds = %245, %93
  %.lcssa = phi i64 [ %94, %93 ], [ %244, %245 ], !pdg.inst.id !175
  %100 = load %struct.basket*, %struct.basket** %40, align 8, !tbaa !724, !pdg.inst.id !49
  %101 = icmp eq %struct.basket* %100, null, !pdg.inst.id !187
  br i1 %101, label %.loopexit.loopexit, label %64, !pdg.inst.id !189

.preheader1:                                      ; preds = %.preheader1.preheader, %120
  %102 = phi i64 [ %125, %120 ], [ 1, %.preheader1.preheader ], !pdg.inst.id !191
  %103 = load %struct.basket**, %struct.basket*** %47, align 8, !tbaa !724, !pdg.inst.id !88
  %104 = load %struct.basket*, %struct.basket** %103, align 8, !tbaa !724, !pdg.inst.id !198
  %105 = getelementptr inbounds %struct.basket, %struct.basket* %104, i64 0, i32 3, !pdg.inst.id !202
  %106 = load i64, i64* %105, align 8, !tbaa !729, !pdg.inst.id !204
  %107 = icmp sgt i64 %106, -1, !pdg.inst.id !206
  %108 = select i1 %107, %struct.basket* %104, %struct.basket* null, !prof !732, !pdg.inst.id !200
  store %struct.basket* %108, %struct.basket** %40, align 8, !tbaa !724, !pdg.inst.id !55
  %109 = icmp eq %struct.basket* %108, null, !pdg.inst.id !209
  br i1 %109, label %.loopexit.loopexit1.loopexit, label %110, !prof !733, !pdg.inst.id !214

110:                                              ; preds = %.preheader1
  %111 = getelementptr inbounds %struct.basket, %struct.basket* %108, i64 0, i32 3, !pdg.inst.id !211
  store i64 %102, i64* %111, align 8, !tbaa !729, !pdg.inst.id !196
  %112 = load %struct.basket**, %struct.basket*** %47, align 8, !tbaa !724, !pdg.inst.id !92
  %113 = getelementptr inbounds %struct.basket*, %struct.basket** %112, i64 1, !pdg.inst.id !217
  store %struct.basket** %113, %struct.basket*** %47, align 8, !tbaa !724, !pdg.inst.id !90
  %114 = load %struct.basket*, %struct.basket** %113, align 8, !tbaa !724, !pdg.inst.id !219
  %115 = getelementptr inbounds %struct.basket, %struct.basket* %114, i64 0, i32 3, !pdg.inst.id !224
  %116 = load i64, i64* %115, align 8, !tbaa !729, !pdg.inst.id !226
  %117 = icmp sgt i64 %116, -1, !pdg.inst.id !228
  %118 = select i1 %117, %struct.basket* %114, %struct.basket* null, !prof !734, !pdg.inst.id !222
  store %struct.basket* %118, %struct.basket** %40, align 8, !tbaa !724, !pdg.inst.id !43
  %119 = icmp eq %struct.basket* %118, null, !pdg.inst.id !233
  br i1 %119, label %.loopexit.loopexit1.loopexit, label %120, !prof !735, !pdg.inst.id !236

.loopexit.loopexit:                               ; preds = %203, %203, %64, %99
  br label %.loopexit, !pdg.inst.id !709

.loopexit.loopexit1.loopexit:                     ; preds = %164, %164, %.preheader1, %110
  br label %.loopexit.loopexit1, !pdg.inst.id !698

.loopexit.loopexit1:                              ; preds = %.loopexit.loopexit1.loopexit, %..loopexit.loopexit1_crit_edge
  br label %.loopexit, !pdg.inst.id !712

.loopexit:                                        ; preds = %.loopexit.loopexit1, %.loopexit.loopexit
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #39, !pdg.inst.id !71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #39, !pdg.inst.id !67
  ret void, !pdg.inst.id !736

120:                                              ; preds = %110
  %121 = add nuw nsw i64 %102, 1, !pdg.inst.id !194
  %122 = getelementptr inbounds %struct.basket, %struct.basket* %118, i64 0, i32 3, !pdg.inst.id !231
  store i64 %121, i64* %122, align 8, !tbaa !729, !pdg.inst.id !238
  %123 = load %struct.basket**, %struct.basket*** %47, align 8, !tbaa !724, !pdg.inst.id !86
  %124 = getelementptr inbounds %struct.basket*, %struct.basket** %123, i64 1, !pdg.inst.id !241
  store %struct.basket** %124, %struct.basket*** %47, align 8, !tbaa !724, !pdg.inst.id !84
  %125 = add nuw nsw i64 %102, 2, !pdg.inst.id !192
  %126 = icmp eq i64 %125, 61, !pdg.inst.id !245
  br i1 %126, label %..loopexit.loopexit1_crit_edge, label %.preheader1, !prof !737, !pdg.inst.id !247

..loopexit.loopexit1_crit_edge:                   ; preds = %164, %120
  br label %.loopexit.loopexit1, !pdg.inst.id !723

127:                                              ; preds = %.preheader1.preheader
  store i32 1, i32* @5
  store %struct.basket*** %47, %struct.basket**** %35
  store %struct.basket** %40, %struct.basket*** %37
  %128 = alloca [2 x i8*]
  %129 = getelementptr inbounds [2 x i8*], [2 x i8*]* %128, i64 0, i64 0
  %130 = bitcast i8** %129 to void (i8*, i8*)**
  store void (i8*, i8*)* @25, void (i8*, i8*)** %130
  %131 = getelementptr inbounds [2 x i8*], [2 x i8*]* %128, i64 0, i64 1
  %132 = bitcast i8** %131 to void (i8*, i8*)**
  store void (i8*, i8*)* @26, void (i8*, i8*)** %132
  %133 = bitcast [2 x i8*]* %128 to i8*
  %134 = alloca [28 x i64]
  %135 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 0
  store i64 64, i64* %135
  %136 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 1
  store i64 64, i64* %136
  %137 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 2
  store i64 16, i64* %137
  %138 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 3
  store i64 64, i64* %138
  %139 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 4
  store i64 64, i64* %139
  %140 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 5
  store i64 16, i64* %140
  %141 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 6
  store i64 64, i64* %141
  %142 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 7
  store i64 64, i64* %142
  %143 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 8
  store i64 64, i64* %143
  %144 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 9
  store i64 64, i64* %144
  %145 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 10
  store i64 32, i64* %145
  %146 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 11
  store i64 64, i64* %146
  %147 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 12
  store i64 32, i64* %147
  %148 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 13
  store i64 64, i64* %148
  %149 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 14
  store i64 32, i64* %149
  %150 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 15
  store i64 64, i64* %150
  %151 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 16
  store i64 32, i64* %151
  %152 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 17
  store i64 64, i64* %152
  %153 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 18
  store i64 64, i64* %153
  %154 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 19
  store i64 32, i64* %154
  %155 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 20
  store i64 32, i64* %155
  %156 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 21
  store i64 64, i64* %156
  %157 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 22
  store i64 64, i64* %157
  %158 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 23
  store i64 64, i64* %158
  %159 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 24
  store i64 64, i64* %159
  %160 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 25
  store i64 1, i64* %160
  %161 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 26
  store i64 1, i64* %161
  %162 = getelementptr inbounds [28 x i64], [28 x i64]* %134, i64 0, i64 27
  store i64 1, i64* %162
  %163 = bitcast [28 x i64]* %134 to i64*
  call void @stageDispatcher(i8* %33, i64* %163, i8* %133, i64 2, i64 28)
  br label %164

164:                                              ; preds = %127
  %165 = getelementptr inbounds [24 x i64], [24 x i64]* %32, i64 0, i64 16
  %166 = load i64, i64* %165
  %167 = trunc i64 %166 to i32
  store i32 0, i32* @5
  switch i32 %167, label %.loopexit.loopexit1.loopexit [
    i32 1, label %.loopexit.loopexit1.loopexit
    i32 2, label %..loopexit.loopexit1_crit_edge
  ]

168:                                              ; preds = %.preheader.preheader
  store i32 1, i32* @6
  store i64 %0, i64* %19
  store i64* %45, i64** %21
  store %struct.basket*** %47, %struct.basket**** %23
  store %struct.basket** %40, %struct.basket*** %25
  store %struct.basket** %41, %struct.basket*** %27
  store i64* %46, i64** %29
  %169 = alloca [1 x i8*]
  %170 = getelementptr inbounds [1 x i8*], [1 x i8*]* %169, i64 0, i64 0
  %171 = bitcast i8** %170 to void (i8*, i8*)**
  store void (i8*, i8*)* @27, void (i8*, i8*)** %171
  %172 = bitcast [1 x i8*]* %169 to i8*
  %173 = alloca [28 x i64]
  %174 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 0
  store i64 64, i64* %174
  %175 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 1
  store i64 64, i64* %175
  %176 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 2
  store i64 16, i64* %176
  %177 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 3
  store i64 64, i64* %177
  %178 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 4
  store i64 64, i64* %178
  %179 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 5
  store i64 16, i64* %179
  %180 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 6
  store i64 64, i64* %180
  %181 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 7
  store i64 64, i64* %181
  %182 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 8
  store i64 64, i64* %182
  %183 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 9
  store i64 64, i64* %183
  %184 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 10
  store i64 32, i64* %184
  %185 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 11
  store i64 64, i64* %185
  %186 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 12
  store i64 32, i64* %186
  %187 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 13
  store i64 64, i64* %187
  %188 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 14
  store i64 32, i64* %188
  %189 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 15
  store i64 64, i64* %189
  %190 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 16
  store i64 32, i64* %190
  %191 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 17
  store i64 64, i64* %191
  %192 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 18
  store i64 64, i64* %192
  %193 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 19
  store i64 32, i64* %193
  %194 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 20
  store i64 32, i64* %194
  %195 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 21
  store i64 64, i64* %195
  %196 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 22
  store i64 64, i64* %196
  %197 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 23
  store i64 64, i64* %197
  %198 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 24
  store i64 64, i64* %198
  %199 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 25
  store i64 1, i64* %199
  %200 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 26
  store i64 1, i64* %200
  %201 = getelementptr inbounds [28 x i64], [28 x i64]* %173, i64 0, i64 27
  store i64 1, i64* %201
  %202 = bitcast [28 x i64]* %173 to i64*
  call void @stageDispatcher(i8* %18, i64* %202, i8* %172, i64 1, i64 28)
  br label %203

203:                                              ; preds = %168
  %204 = getelementptr inbounds [56 x i64], [56 x i64]* %17, i64 0, i64 48
  %205 = load i64, i64* %204
  %206 = trunc i64 %205 to i32
  store i32 0, i32* @6
  switch i32 %206, label %.loopexit.loopexit [
    i32 1, label %.loopexit.loopexit
  ]

207:                                              ; preds = %.preheader
  store i32 1, i32* @7
  store %struct.basket** %41, %struct.basket*** %5
  store i64 %0, i64* %6
  store %struct.basket*** %52, %struct.basket**** %8
  store i64* %45, i64** %10
  store i64 %61, i64* %11
  store %struct.basket** %40, %struct.basket*** %14
  store i64* %46, i64** %16
  %208 = alloca [2 x i8*]
  %209 = getelementptr inbounds [2 x i8*], [2 x i8*]* %208, i64 0, i64 0
  %210 = bitcast i8** %209 to void (i8*, i8*)**
  store void (i8*, i8*)* @28, void (i8*, i8*)** %210
  %211 = getelementptr inbounds [2 x i8*], [2 x i8*]* %208, i64 0, i64 1
  %212 = bitcast i8** %211 to void (i8*, i8*)**
  store void (i8*, i8*)* @29, void (i8*, i8*)** %212
  %213 = bitcast [2 x i8*]* %208 to i8*
  %214 = alloca [28 x i64]
  %215 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 0
  store i64 64, i64* %215
  %216 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 1
  store i64 64, i64* %216
  %217 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 2
  store i64 16, i64* %217
  %218 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 3
  store i64 64, i64* %218
  %219 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 4
  store i64 64, i64* %219
  %220 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 5
  store i64 16, i64* %220
  %221 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 6
  store i64 64, i64* %221
  %222 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 7
  store i64 64, i64* %222
  %223 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 8
  store i64 64, i64* %223
  %224 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 9
  store i64 64, i64* %224
  %225 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 10
  store i64 32, i64* %225
  %226 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 11
  store i64 64, i64* %226
  %227 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 12
  store i64 32, i64* %227
  %228 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 13
  store i64 64, i64* %228
  %229 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 14
  store i64 32, i64* %229
  %230 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 15
  store i64 64, i64* %230
  %231 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 16
  store i64 32, i64* %231
  %232 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 17
  store i64 64, i64* %232
  %233 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 18
  store i64 64, i64* %233
  %234 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 19
  store i64 32, i64* %234
  %235 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 20
  store i64 32, i64* %235
  %236 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 21
  store i64 64, i64* %236
  %237 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 22
  store i64 64, i64* %237
  %238 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 23
  store i64 64, i64* %238
  %239 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 24
  store i64 64, i64* %239
  %240 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 25
  store i64 1, i64* %240
  %241 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 26
  store i64 1, i64* %241
  %242 = getelementptr inbounds [28 x i64], [28 x i64]* %214, i64 0, i64 27
  store i64 1, i64* %242
  %243 = bitcast [28 x i64]* %214 to i64*
  call void @stageDispatcher(i8* %3, i64* %243, i8* %213, i64 2, i64 28)
  %244 = load i64, i64* %12
  br label %245

245:                                              ; preds = %207
  store i32 0, i32* @7
  br label %99
}

Parallelizer: Exit
Parallelizer: Start
Parallelizer:  Function = "master"
Parallelizer:  Loop 9 = "  %41 = add <2 x i64> %40, <i64 2, i64 2>, !pdg.inst.id !225"
Parallelizer:  Nesting level = 1
DOALL: Checking if the loop is DOALL
DOALL:   It wasn't possible to determine how to compute the loop trip count just before executing the loop
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 9
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %40 = phi <2 x i64> [ <i64 1, i64 2>, %36 ], [ %58, %._crit_edge1 ], !pdg.inst.id !217
DSWP:       %58 = add <2 x i64> %40, <i64 8, i64 8>, !pdg.inst.id !218
DSWP:   SCC: 1 Internal nodes:
DSWP:       %41 = add <2 x i64> %40, <i64 2, i64 2>, !pdg.inst.id !225
DSWP:   SCC: 2 Internal nodes:
DSWP:       %42 = add <2 x i64> %40, <i64 4, i64 4>, !pdg.inst.id !222
DSWP:   SCC: 3 Internal nodes:
DSWP:       %43 = add <2 x i64> %40, <i64 6, i64 6>, !pdg.inst.id !220
DSWP:   SCC: 4 Internal nodes:
DSWP:       %44 = or i64 %39, 1, !pdg.inst.id !213
DSWP:   SCC: 5 Internal nodes:
DSWP:       %45 = getelementptr inbounds %struct.basket, %struct.basket* %31, <2 x i64> %40, !pdg.inst.id !192
DSWP:       store <2 x %struct.basket*> %45, <2 x %struct.basket*>* %50, align 8, !tbaa !2359, !pdg.inst.id !231
DSWP:       %50 = bitcast %struct.basket** %49 to <2 x %struct.basket*>*, !pdg.inst.id !239
DSWP:   SCC: 6 Internal nodes:
DSWP:       %46 = getelementptr inbounds %struct.basket, %struct.basket* %31, <2 x i64> %41, !pdg.inst.id !190
DSWP:       %51 = getelementptr inbounds %struct.basket*, %struct.basket** %49, i64 2, !pdg.inst.id !245
DSWP:       store <2 x %struct.basket*> %46, <2 x %struct.basket*>* %52, align 8, !tbaa !2359, !pdg.inst.id !233
DSWP:       %52 = bitcast %struct.basket** %51 to <2 x %struct.basket*>*, !pdg.inst.id !248
DSWP:   SCC: 7 Internal nodes:
DSWP:       %47 = getelementptr inbounds %struct.basket, %struct.basket* %31, <2 x i64> %42, !pdg.inst.id !188
DSWP:       %53 = getelementptr inbounds %struct.basket*, %struct.basket** %49, i64 4, !pdg.inst.id !243
DSWP:       store <2 x %struct.basket*> %47, <2 x %struct.basket*>* %54, align 8, !tbaa !2359, !pdg.inst.id !235
DSWP:       %54 = bitcast %struct.basket** %53 to <2 x %struct.basket*>*, !pdg.inst.id !251
DSWP:   SCC: 8 Internal nodes:
DSWP:       %48 = getelementptr inbounds %struct.basket, %struct.basket* %31, <2 x i64> %43, !pdg.inst.id !186
DSWP:       %55 = getelementptr inbounds %struct.basket*, %struct.basket** %49, i64 6, !pdg.inst.id !241
DSWP:       store <2 x %struct.basket*> %48, <2 x %struct.basket*>* %56, align 8, !tbaa !2359, !pdg.inst.id !237
DSWP:       %56 = bitcast %struct.basket** %55 to <2 x %struct.basket*>*, !pdg.inst.id !254
DSWP:   Set:  0
DSWP:    Children: Set:  2; Set:  5; Set:  1; Set:  3; 
DSWP:    Parents: 
DSWP:   Set:  1
DSWP:    Children: Set:  6; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  2
DSWP:    Children: Set:  7; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  3
DSWP:    Children: Set:  8; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  4
DSWP:    Children: Set:  7; Set:  6; Set:  8; Set:  5; 
DSWP:    Parents: 
DSWP:   Set:  5
DSWP:    Children: 
DSWP:    Parents: Set:  0; Set:  4; 
DSWP:   Set:  6
DSWP:    Children: 
DSWP:    Parents: Set:  1; Set:  4; 
DSWP:   Set:  7
DSWP:    Children: 
DSWP:    Parents: Set:  2; Set:  4; 
DSWP:   Set:  8
DSWP:    Children: 
DSWP:    Parents: Set:  4; Set:  3; 
DSWP:  Final number of partitions: 9
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %40 = phi <2 x i64> [ <i64 1, i64 2>, %36 ], [ %58, %._crit_edge1 ], !pdg.inst.id !217
DSWP:       %58 = add <2 x i64> %40, <i64 8, i64 8>, !pdg.inst.id !218
DSWP:   SCC: 1 Internal nodes:
DSWP:       %41 = add <2 x i64> %40, <i64 2, i64 2>, !pdg.inst.id !225
DSWP:   SCC: 2 Internal nodes:
DSWP:       %42 = add <2 x i64> %40, <i64 4, i64 4>, !pdg.inst.id !222
DSWP:   SCC: 3 Internal nodes:
DSWP:       %43 = add <2 x i64> %40, <i64 6, i64 6>, !pdg.inst.id !220
DSWP:   SCC: 4 Internal nodes:
DSWP:       %44 = or i64 %39, 1, !pdg.inst.id !213
DSWP:   SCC: 5 Internal nodes:
DSWP:       %45 = getelementptr inbounds %struct.basket, %struct.basket* %31, <2 x i64> %40, !pdg.inst.id !192
DSWP:       store <2 x %struct.basket*> %45, <2 x %struct.basket*>* %50, align 8, !tbaa !2359, !pdg.inst.id !231
DSWP:       %50 = bitcast %struct.basket** %49 to <2 x %struct.basket*>*, !pdg.inst.id !239
DSWP:   SCC: 6 Internal nodes:
DSWP:       %46 = getelementptr inbounds %struct.basket, %struct.basket* %31, <2 x i64> %41, !pdg.inst.id !190
DSWP:       %51 = getelementptr inbounds %struct.basket*, %struct.basket** %49, i64 2, !pdg.inst.id !245
DSWP:       store <2 x %struct.basket*> %46, <2 x %struct.basket*>* %52, align 8, !tbaa !2359, !pdg.inst.id !233
DSWP:       %52 = bitcast %struct.basket** %51 to <2 x %struct.basket*>*, !pdg.inst.id !248
DSWP:   SCC: 7 Internal nodes:
DSWP:       %47 = getelementptr inbounds %struct.basket, %struct.basket* %31, <2 x i64> %42, !pdg.inst.id !188
DSWP:       %53 = getelementptr inbounds %struct.basket*, %struct.basket** %49, i64 4, !pdg.inst.id !243
DSWP:       store <2 x %struct.basket*> %47, <2 x %struct.basket*>* %54, align 8, !tbaa !2359, !pdg.inst.id !235
DSWP:       %54 = bitcast %struct.basket** %53 to <2 x %struct.basket*>*, !pdg.inst.id !251
DSWP:   SCC: 8 Internal nodes:
DSWP:       %48 = getelementptr inbounds %struct.basket, %struct.basket* %31, <2 x i64> %43, !pdg.inst.id !186
DSWP:       %55 = getelementptr inbounds %struct.basket*, %struct.basket** %49, i64 6, !pdg.inst.id !241
DSWP:       store <2 x %struct.basket*> %48, <2 x %struct.basket*>* %56, align 8, !tbaa !2359, !pdg.inst.id !237
DSWP:       %56 = bitcast %struct.basket** %55 to <2 x %struct.basket*>*, !pdg.inst.id !254
DSWP:   Set:  0
DSWP:    Children: Set:  2; Set:  5; Set:  1; Set:  3; 
DSWP:    Parents: 
DSWP:   Set:  1
DSWP:    Children: Set:  6; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  2
DSWP:    Children: Set:  7; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  3
DSWP:    Children: Set:  8; 
DSWP:    Parents: Set:  0; 
DSWP:   Set:  4
DSWP:    Children: Set:  7; Set:  6; Set:  8; Set:  5; 
DSWP:    Parents: 
DSWP:   Set:  5
DSWP:    Children: 
DSWP:    Parents: Set:  0; Set:  4; 
DSWP:   Set:  6
DSWP:    Children: 
DSWP:    Parents: Set:  1; Set:  4; 
DSWP:   Set:  7
DSWP:    Children: 
DSWP:    Parents: Set:  2; Set:  4; 
DSWP:   Set:  8
DSWP:    Children: 
DSWP:    Parents: Set:  4; Set:  3; 
DSWP:  There are 9 partitions in the SCCDAG
NOT SUPPORTED BYTE SIZE (128): <2 x i64>
Producer:   %40 = phi <2 x i64> [ <i64 1, i64 2>, %36 ], [ %58, %._crit_edge1 ], !pdg.inst.id !217
Stack dump:
0.	Program arguments: opt -load /home/yso0488/projects/noelle/install/lib/libSvf.so -load /home/yso0488/projects/noelle/install/lib/libCudd.so -veto -nander -hander -sander -sfrander -wander -ander -lander -hlander -stat=false -load /home/yso0488/projects/noelle/install/lib/AllocAA.so -load /home/yso0488/projects/noelle/install/lib/TalkDown.so -load /home/yso0488/projects/noelle/install/lib/PDGAnalysis.so -load /home/yso0488/projects/noelle/install/lib/Architecture.so -load /home/yso0488/projects/noelle/install/lib/DataFlow.so -load /home/yso0488/projects/noelle/install/lib/HotProfiler.so -load /home/yso0488/projects/noelle/install/lib/Loops.so -load /home/yso0488/projects/noelle/install/lib/Parallelization.so -load /home/yso0488/projects/noelle/install/lib/Heuristics.so -load /home/yso0488/projects/noelle/install/lib/ParallelizationTechnique.so -load /home/yso0488/projects/noelle/install/lib/LoopDistribution.so -load /home/yso0488/projects/noelle/install/lib/DSWP.so -load /home/yso0488/projects/noelle/install/lib/DOALL.so -load /home/yso0488/projects/noelle/install/lib/HELIX.so -load /home/yso0488/projects/noelle/install/lib/Parallelizer.so -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa -scalar-evolution -loops -loop-simplify -lcssa -domtree -postdomtree -parallelization -heuristics -parallelizer -noelle-verbose=3 -dswp-force -noelle-disable-helix -dswp-no-scc-merge baseline_with_metadata.bc -o baseline_parallelized.bc 
1.	Running pass 'Automatic parallelization of sequential code' on module 'baseline_with_metadata.bc'.
#0 0x000000000219868a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/project/extra/llvm/9.0.0/release/bin/opt+0x219868a)
#1 0x0000000002196614 llvm::sys::RunSignalHandlers() (/project/extra/llvm/9.0.0/release/bin/opt+0x2196614)
#2 0x0000000002196775 SignalHandler(int) (/project/extra/llvm/9.0.0/release/bin/opt+0x2196775)
#3 0x00007f154f220dd0 __restore_rt (/lib64/libpthread.so.0+0x12dd0)
#4 0x00007f154dd0370f raise (/lib64/libc.so.6+0x3770f)
#5 0x00007f154dcedb25 abort (/lib64/libc.so.6+0x21b25)
#6 0x00007f154bc52c17 llvm::DSWP::registerQueue(llvm::Parallelization&, llvm::LoopDependenceInfo*, llvm::DSWPTask*, llvm::DSWPTask*, llvm::Instruction*, llvm::Instruction*) /home/yso0488/projects/noelle/src/dswp/src/Queue.cpp:50:3
/home/yso0488/projects/noelle/install/bin/noelle-load: line 25: 2421968 Aborted                 (core dumped) opt -load /home/yso0488/projects/noelle/install/lib/libSvf.so -load /home/yso0488/projects/noelle/install/lib/libCudd.so -veto -nander -hander -sander -sfrander -wander -ander -lander -hlander -stat=false -load /home/yso0488/projects/noelle/install/lib/AllocAA.so -load /home/yso0488/projects/noelle/install/lib/TalkDown.so -load /home/yso0488/projects/noelle/install/lib/PDGAnalysis.so -load /home/yso0488/projects/noelle/install/lib/Architecture.so -load /home/yso0488/projects/noelle/install/lib/DataFlow.so -load /home/yso0488/projects/noelle/install/lib/HotProfiler.so -load /home/yso0488/projects/noelle/install/lib/Loops.so -load /home/yso0488/projects/noelle/install/lib/Parallelization.so -load /home/yso0488/projects/noelle/install/lib/Heuristics.so -load /home/yso0488/projects/noelle/install/lib/ParallelizationTechnique.so -load /home/yso0488/projects/noelle/install/lib/LoopDistribution.so -load /home/yso0488/projects/noelle/install/lib/DSWP.so -load /home/yso0488/projects/noelle/install/lib/DOALL.so -load /home/yso0488/projects/noelle/install/lib/HELIX.so -load /home/yso0488/projects/noelle/install/lib/Parallelizer.so -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa -scalar-evolution -loops -loop-simplify -lcssa -domtree -postdomtree -parallelization -heuristics -parallelizer -noelle-verbose=3 -dswp-force -noelle-disable-helix -dswp-no-scc-merge baseline_with_metadata.bc -o baseline_parallelized.bc
make[1]: *** [Makefile:27: baseline_parallelized.bc] Error 134
make[1]: Leaving directory '/home/yso0488/projects/BenchmarksBitcodes/build/SPEC2017/benchmarks/mcf_r'
